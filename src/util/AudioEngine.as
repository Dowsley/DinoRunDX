package util {		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.Timer;		import data.AudioAssets;		import datas.AudioAssets;
		public class AudioEngine {				private var soundsA:Array;		private var sounds:Object;		private var sIndex:uint=0;		private var brain:Object;		private var channels:Object;		public var muted:Boolean=false;		public var mutedSFX:Boolean=false;		public var muteNum:int = 3;		public var loadEXT:Boolean;		public var solo:uint=0;		var fTimer:Timer;		public var music:String;		private var vt:SoundTransform;		private var vtbg:SoundTransform;		var mSound:Sound;		public var ff:Boolean=false;				private var newSounds:Array;				public function AudioEngine (br,loadEXT) {						brain=br;			this.loadEXT=loadEXT;			sounds={};			channels = { c0:"", c1:"", c2:"", c3:"", c4:"", c5:"", c6:"", c7:"" };			vt=new SoundTransform();			vtbg=new SoundTransform();			fTimer = new Timer (100,0);						newSounds = ["Boneyard","BouncyHarvest","Final","Flying","Slaughter"];												//define sounds			soundsA = [				"j1",4,				"j2",4,				"j3",4,				"j4",4,				"b11",4,				"b12",4,				"b21",4,				"b22",4,				"b31",4,				"b32",4,				"b41",4,				"b42",4,				"b51",4,				"b52",4,				"doom",2,				"doomLow",1,				"impact",0,				"incoming",0,				"incoming2",0,				"speedBoost1",3,				"speedBoost2",3,				"superJump",3,				"egg1",3,				"egg2",3,				"egg3",3,								"bone1",4,				"bone2",4,				"bone3",4,				"bone4",4,				"ceraMoan1",3,				"ceraMoan2",3,				"dactylEgg",3,				"diploMoan1",3,				"diploMoan2",3,				"eatBird1",3,				"eatBird2",3,				"eatBird3",3,				"eatLiz1",3,				"eatLiz2",3,				"eatLiz3",3,				"eatMisc1",3,				"eatMisc2",3,				"eatRun1",3,				"eatRun2",3,				"eatRun3",3,				"hitGround1",4,				"hitGround2",4,				"shroom",0,				"slurp1",3,				"slurp2",3,				"slurp3",3,				"splash1",4,				"splash2",4,				"splash3",4,				"splat1",4,				"splat2",4,				"splat3",4,				"splat4",4,				"squash1",4,				"squash2",4,				"squawk1",3,				"squawk2",3,				"squawk3",3,				"stampede",0,				"stegoMoan1",3,				"stegoMoan2",3,				"strength",3,				"swat",3,				"waterfall",0,				"feetSpark",3,								"brontoMoan",3,				"ceraCrush",3,				"dc1",3,				"dc2",3,				"dc3",3,				"dc4",3,				"eggCrack",3,				"hotFoot",3,				"ridePara",3,				"stegoCrush",3,				"superEgg",3,				"speedJump",3,				"misc2",3,				"destructo",3,				"misc1",3,												//bg				"bg1",0,				"bg2",0,				"bg3",0,				"bg4",0,				"bg5",0,				"bg6",0,				"bg7",0,				"bg8",0,				"bg9",0,				"bg10",0,				"bg11",0,				"bg12",0,				"bg13",0,				"bg14",0,				"bg15",0,				"bg16",0,				"bg17",0,				"bg18",0,				"bg19",0,				"bg20",0,				"bg21",0,				"bg22",0,				"bg23",0,				"bg24",0,				"bg25",0,				"bg26",0,				"bg27",0,				"bg28",0,				"bg29",0,				"bg30",0,				"BC",1,								"Boneyard",1,				"BouncyHarvest",1,				"Final",1,				"Flying",1,				"Slaughter",1							]						if (true) { soundsA.push ("MM1",1,"MM4",1,"AL",1,"MM2",1,"MM3",1,"MM5",1,"MP",1,"V1",1,"V2",1,"Escape",1,"Panic",1,"EscapeA",1,"PanicA",1,"EscapeB",1,"PanicB",1) }									//load em in			loadNextSound ();		}						public function ply (id,v,loop) {						if (Config.MUTE) return;						if (mutedSFX)				return;						try {				var cNum:uint=sounds[id].chnl;				if (solo==0||solo==cNum) {										//stop existing 					if (channels["c"+cNum]!="") { channels["c"+cNum].stop() }					//start new					vt.volume=v;					channels["c"+cNum] = sounds[id].snd.play ((cNum==1?50:50),loop?100000:1,vt);					//set new musicV?					if (cNum==1) { brain.doom.musicV=v }								}							} catch (e:Error) {}					}				public function stp (num) {						trace ("stop",num)									try { if (channels["c"+num]!="") { channels["c"+num].stop() } } catch (e:Error) {}					}				public function vol (num,v) {						try {								if (channels["c"+num]!="") {										var c:SoundChannel = channels["c"+num];					var vo:SoundTransform = c.soundTransform;					vo.volume = v;					c.soundTransform=vo;										}						} catch (e) {};					}				private var loud:Array= ["V1","V2","MP","BC","AL","Boneyard","BouncyHarvest","Final","Flying","Slaughter"];				public function startMusic () {						if (Config.MUTE) return;						if ((!muted||brain.S.BC) && music != "Silence") {				ply (music,loud.indexOf(music)!=-1?.275:.2,music=="AL"?false:true) 							} else { startBG(true) }					}				public function startMP () {						if (!muted&&brain.S.endID!="XD") {								try { channels.c1.stop() } catch (e:Error) {}				music="MP";				ff=true;				startMusic();							}					}				public function noMusic (ev) {						if (!muted) { mute() }					}						public function startBG (doom) {						if (brain.S.lvl!=8) {							fTimer.addEventListener(TimerEvent.TIMER,bgLoop,false,0,true);				fTimer.start();								if (doom) { ply ("doomLow",brain.S.V?1:.5,true) }							}					}				public function bgLoop (ev) {						if (rand(0,3)==0) {								var id:String="bg"+rand(1,30);				var chn:int=rand(5,7)				try { if (channels["c"+chn]!="") { channels["c"+chn].stop() } } catch (e:Error) {}				vtbg.volume=rand2(.05,.4);				vtbg.pan=rand2(-1,1);				try { channels["c"+chn] = sounds[id].snd.play (50,0,vtbg) } catch (e:Error) {}							}					}				public function stopBG () {						if (brain.S.lvl!=8) {							fTimer.stop();				if (fTimer.hasEventListener(TimerEvent.TIMER)) { fTimer.removeEventListener(TimerEvent.TIMER,bgLoop) }							}					}						public function mute () {						if (!brain.S.BC) {								try { channels.c1.stop() } catch (e:Error) {}								muteNum++;				if (muteNum > 3)					muteNum = 1;								switch (muteNum) {										case 1:					muted=true;					mutedSFX = false;					startBG(true);					brain.interF.interX.muteMSG.gotoAndPlay ("m1");					break;										case 2:					muted=true;					mutedSFX = true;					stopBG();					brain.interF.interX.muteMSG.gotoAndPlay ("m2");					break;										case 3:					muted=false;					mutedSFX = false;					stopBG();					startMusic();					brain.interF.interX.muteMSG.gotoAndPlay ("m3");					break;									}						}					}		private function loadNextSound () {						var id:String = soundsA[sIndex];			sounds[id] = {};			sounds[id].chnl=soundsA[sIndex+1];						if (!loadEXT) {								if (newSounds.indexOf(id)!=-1) {					sounds[id].snd = new (AudioAssets[id] as Class);				} else {					sounds[id].snd = this["create_"+id]();				}				soundLoaded(0);							} else {								sounds[id].snd = new Sound(new URLRequest("audio/"+id+".mp3"));				sounds[id].snd.addEventListener(Event.COMPLETE, soundLoaded);							}					}				public function soundLoaded (ev) {						sIndex+=2;			if (sIndex>=soundsA.length) { trace ("audio loaded") } else { loadNextSound() }		}						//embedded sound functions		public function create_j1 () { return new j1 () }		public function create_j2 () { return new j2 () }		public function create_j3 () { return new j3 () }		public function create_j4 () { return new j4 () }		public function create_b11 () { return new b11 () }		public function create_b12 () { return new b12 () }		public function create_b21 () { return new b21 () }		public function create_b22 () { return new b22 () }		public function create_b31 () { return new b31 () }		public function create_b32 () { return new b32 () }		public function create_b41 () { return new b41 () }		public function create_b42 () { return new b42 () }		public function create_b51 () { return new b51 () }		public function create_b52 () { return new b52 () }		public function create_doom () { return new doom () }		public function create_doomLow () { return new doomLow () }		public function create_impact () { return new impact () }		public function create_incoming () { return new incoming () }		public function create_incoming2 () { return new incoming2 () }		public function create_speedBoost1 () { return new speedBoost1 () }		public function create_speedBoost2 () { return new speedBoost2 () }		public function create_superJump () { return new superJump () }		public function create_egg1 () { return new egg1 () }		public function create_egg2 () { return new egg2 () }		public function create_egg3 () { return new egg3 () }				public function create_bone1 () { return new bone1  () }		public function create_bone2 () { return new bone2 () }		public function create_bone3 () { return new bone3 () }		public function create_bone4 () { return new bone4 () }		public function create_ceraMoan1 () { return new ceraMoan1 () }		public function create_ceraMoan2 () { return new ceraMoan2 () }		public function create_dactylEgg () { return new dactylEgg () }		public function create_diploMoan1 () { return new diploMoan1 () }		public function create_diploMoan2 () { return new diploMoan2 () }		public function create_eatBird1 () { return new eatBird1 () }		public function create_eatBird2 () { return new eatBird2 () }		public function create_eatBird3 () { return new eatBird3 () }		public function create_eatLiz1 () { return new eatLiz1 () }		public function create_eatLiz2 () { return new eatLiz2 () }		public function create_eatLiz3 () { return new eatLiz3 () }		public function create_eatMisc1 () { return new eatMisc1 () }		public function create_eatMisc2 () { return new eatMisc2 () }		public function create_eatRun1 () { return new eatRun1 () }		public function create_eatRun2 () { return new eatRun2 () }		public function create_eatRun3 () { return new eatRun3 () }		public function create_hitGround1 () { return new hitGround1 () }		public function create_hitGround2 () { return new hitGround2 () }		public function create_shroom () { return new shroom () }		public function create_slurp1 () { return new slurp1 () }		public function create_slurp2 () { return new slurp2 () }		public function create_slurp3 () { return new slurp3 () }		public function create_splash1 () { return new splash1 () }		public function create_splash2 () { return new splash2 () }		public function create_splash3 () { return new splash3 () }		public function create_splat1 () { return new splat1 () }		public function create_splat2 () { return new splat2 () }		public function create_splat3 () { return new splat3 () }		public function create_splat4 () { return new splat4 () }		public function create_squash1 () { return new squash1 () }		public function create_squash2 () { return new squash2 () }		public function create_squawk1 () { return new squawk1 () }		public function create_squawk2 () { return new squawk2 () }		public function create_squawk3 () { return new squawk3 () }		public function create_stampede () { return new stampede () }		public function create_stegoMoan1 () { return new stegoMoan1 () }		public function create_stegoMoan2 () { return new stegoMoan2 () }		public function create_strength () { return new strength () }		public function create_swat () { return new swat () }		public function create_waterfall () { return new waterfall () }		public function create_feetSpark () { return new feetSpark () }				public function create_brontoMoan () { return new brontoMoan () }		public function create_ceraCrush () { return new ceraCrush () }		public function create_dc1 () { return new dc1 () }		public function create_dc2 () { return new dc2 () }		public function create_dc3 () { return new dc3 () }		public function create_dc4 () { return new dc4 () }		public function create_eggCrack () { return new eggCrack () }		public function create_hotFoot () { return new hotFoot () }		public function create_ridePara () { return new ridePara () }		public function create_stegoCrush () { return new stegoCrush () }		public function create_superEgg() { return new superEgg () }		public function create_speedJump() { return new speedJump () }		public function create_misc2() { return new misc2 () }		public function create_misc1() { return new misc1 () }		public function create_destructo() { return new destructo () }									public function create_bg1 () { return new bg1 () }		public function create_bg2 () { return new bg2 () }		public function create_bg3 () { return new bg3 () }		public function create_bg4 () { return new bg4 () }		public function create_bg5 () { return new bg5 () }		public function create_bg6 () { return new bg6 () }		public function create_bg7 () { return new bg7 () }		public function create_bg8 () { return new bg8 () }		public function create_bg9 () { return new bg9 () }		public function create_bg10 () { return new bg10 () }		public function create_bg11 () { return new bg11 () }		public function create_bg12 () { return new bg12 () }		public function create_bg13 () { return new bg13 () }		public function create_bg14 () { return new bg14 () }		public function create_bg15 () { return new bg15 () }		public function create_bg16 () { return new bg16 () }		public function create_bg17 () { return new bg17 () }		public function create_bg18 () { return new bg18 () }		public function create_bg19 () { return new bg19 () }		public function create_bg20 () { return new bg20 () }		public function create_bg21 () { return new bg21 () }		public function create_bg22 () { return new bg22 () }		public function create_bg23 () { return new bg23 () }		public function create_bg24 () { return new bg24 () }		public function create_bg25 () { return new bg25 () }		public function create_bg26 () { return new bg26 () }		public function create_bg27 () { return new bg27 () }		public function create_bg28 () { return new bg28 () }		public function create_bg29 () { return new bg29 () }		public function create_bg30 () { return new bg30 () }				// remove for external music load :				public function create_AL () { return new AL () }		public function create_MM1 () { return new MM1 () }		public function create_MM2 () { return new MM2 () }		public function create_MM3 () { return new MM3 () }		public function create_MM4 () { return new MM4 () }		public function create_MM5 () { return new MM5 () }		public function create_MP () { return new MP () }		public function create_V1 () { return new V1 () }		public function create_V2 () { return new V2 () }		public function create_BC () { return new BC2 () }				public function create_Escape () { return new Escape () }		public function create_EscapeA () { return new EscapeA () }		public function create_EscapeB () { return new EscapeB () }		public function create_Panic () { return new Panic () }		public function create_PanicA () { return new PanicA () }		public function create_PanicB () { return new PanicB () }				//						public function rand(min:int, max:int):int {			return (Math.round(Math.random()*(max-min))+min);		}			public function rand2(min:Number, max:Number):Number {			return (Math.round(((Math.random()*(max-min))+min)*100))/100;		}	}			}