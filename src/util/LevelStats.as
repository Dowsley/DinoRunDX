package util {		import base.Brain;		import flash.display.MovieClip;	import flash.events.*;	import flash.utils.*;
		public class LevelStats {				public var c:uint;		private var cd:int;		private var brain:Brain;		private var stats:Stats;		private var time:Number;		private var interF:Object;		private var cc:Object;		private var colors:Array = [0xFFFFFF, 0xAAAAAA, 0x00FFFF, 0x00FF00]		private var bonus:Boolean=false;		private var ba:Number;		private var bonusX:int;		private var tbn:int;		private var sbn:int;		private var endGame:Boolean;		public var go:Boolean=true;		private var cdTimer:Timer;		var spc:int=0;				public function LevelStats (brain,endGame):void {						this.brain=brain;			this.endGame=endGame;			c=0;			stats=brain.sys2.stats;			time=brain.c;			interF=brain.interF.graphic;			//color changers			cc={ txt:{ A:"", B:"", C:"", D:"", E:"", F:""}, c:{ A:0, B:0, C:0, D:0, E:0, F:0} }						//bonusX			switch (brain.S.dif) {								case "Easy": bonusX=2; break;				case "Medium": bonusX=5; break;				case "Hard": bonusX=20; break;				case "Insane": bonusX=50; break;							}			if (brain.S.meteors) { bonusX=Math.ceil(bonusX*1.1) }			if (brain.S.night) { bonusX=Math.ceil(bonusX*1.1) }						//time bonus init			tbn = brain.S.BC?50000:Math.round(((stats.par-time)*bonusX)/10)*10;			stats.addScore (tbn)						//survival bonus init			trace (brain.S,brain.S.winBonus)			sbn = (endGame)?(brain.S.winBonus[1]+((brain.S.difNum-1)*1000)+(brain.S.night?((brain.S.difNum-1)*1000):0)+(brain.S.meteors?((brain.S.difNum-1)*2000):0)):0;			stats.addScore (sbn);						if (endGame) {								//end bonus				if (stats.lvlsWon.indexOf(brain.S.winBonus[0])==-1) { 									stats.lvlsWon.push(brain.S.winBonus[0]);					stats.addPLScore (sbn);									}								//eatin timer				if (!brain.S.BC) { cdTimer = new Timer (1000,0) }								//music				if (brain.S.mod!="SpeedRun"&&!brain.S.BC) { brain.sys.audio.startMP() }							} else { brain.sys.audio.startBG(false) }											}				public function cdDown (ev) {						cd--;			if (cd<5) { brain.sys.audio.vol (1,.225-(.045*(5-cd))) }			interF.cdNum.text=cd;			interF.cdNums.text=cd;			if (cd<=0) {								stopCD();				go=true;				//interF.MSG.gotoAndStop (brain.S.mod=="SpeedRun"? (Brain.ENABLE_ZINC ? 2 : 4): (Brain.ENABLE_ZINC ? 3 : 5) ); //alt				interF.MSG.gotoAndStop (brain.S.mod=="SpeedRun"? 2: 3 ); //alt				stats.addP=false;						}					}				public function startCD () {						//determine cd			if (brain.world.sp!="V2") { stats.addCD() }			cd=stats.cd;						interF.MSG.visible=true;			interF.cdNum.text=cd;			interF.cdNums.text=cd;			cdTimer.addEventListener (TimerEvent.TIMER, cdDown, false, 0, true);			cdTimer.start();							}				public function stopCD () {						cdTimer.stop();			cdTimer.removeEventListener (TimerEvent.TIMER, cdDown)			interF.cdNum.text="";			interF.cdNums.text="";					}				public function updateScore(num) {						interF.score.text="Score: "+num;			interF.scores.text="Score: "+num;					}				public function main () {						if (go) { 				c++;				switch (c) {										case 2:					if (endGame) {												brain.submitHS();						if (brain.S.endID=="XD") { 							spc=1;						} else if (brain.S.mod!="SpeedRun"&&!brain.S.BC) {							go=false; 							startCD() ;						} else { 							stats.addP=false; 							interF.MSG.visible=true; 							//interF.MSG.gotoAndStop (brain.S.mod=="SpeedRun"? (Brain.ENABLE_ZINC ? 2 : 4): (Brain.ENABLE_ZINC ? 3 : 5) ); //alt							interF.MSG.gotoAndStop (brain.S.mod=="SpeedRun"? 2 : 3 );						} 											}					break;										case 3:					c=10;					//if (brain.VAR=="WR"||brain.VAR=="SS") { brain.submitHS() }					stats.endLevel();					break;										case 11:					if (spc>0) {						spc++;						c--;						if (spc>=300) {							spc=0; 							stats.addP=false; 							interF.MSG.visible=true; 							//interF.MSG.gotoAndStop (Brain.ENABLE_ZINC ? 3 : 5); //alt							interF.MSG.gotoAndStop (3)						}					}					break;										case 13:					//hiscore submit					//if (endGame&&brain.VAR!="WR") { brain.submitHS(); brain.endAPI() }					break;										case 60:					updateScore(stats.score-(tbn+sbn));//(Math.round(stats.boulderRide/5))/10					interF.time.text=(brain.S.BC)?"Time Freedom":"Time: "+(Math.round(time/5))/10+" Sec";					interF.times.text=(brain.S.BC)?"Time Freedom":"Time: "+(Math.round(time/5))/10+" Sec";					intro ("A", interF.time);					intro ("B", interF.score);					if (endGame&&!brain.S.cheat&&!Config.STEAM) {												interF.bt_SubmitScore.visible=true;						interF.bt_SubmitScore.addEventListener (MouseEvent.CLICK,submitScore);											}					if (interF.scoreSubmitted) {						if (Config.STEAM) {							interF.bt_SubmitScore.visible=false;							brain.interF.steamSubmitScore();							interF.scoreSubmitted.visible = true;							interF.scoreSubmitted.gotoAndPlay (1);						} else {							interF.scoreSubmitted.visible = false;						}					}					break;										case 90:					interF.par.text=(brain.S.BC)?"No Doom":"Doom at: "+(Math.round(stats.par/5))/10+" Sec";					interF.pars.text=(brain.S.BC)?"No Doom":"Doom at: "+(Math.round(stats.par/5))/10+" Sec";					intro ("C", interF.par);					break;										case 120:					var X:Array=[0,1,3,10,20]					if (tbn>0) { showBonus("Time Bonus X"+bonusX+": "+tbn) }					updateScore(stats.score-sbn);					break;										case 210:					if (endGame) {												interF.eggsGame.text="Total Eggs: "+stats.eggsGame; //+"/"+stats.eggsTotalGame;						interF.eggsGames.text="Total Eggs: "+stats.eggsGame;						intro ("D", interF.eggsGame);											} else {												interF.eggs.text="Eggs: "+stats.eggs; //+"/"+stats.eggsTotal;						interF.eggss.text="Eggs: "+stats.eggs;						intro ("D", interF.eggs);											}					break;										case 240:					if (endGame) {												interF.superEggsGame.text="Total Super Eggs: "+stats.superEggsGame+"/"+stats.superEggsTotalGame;						interF.superEggsGames.text="Total Super Eggs: "+stats.superEggsGame+"/"+stats.superEggsTotalGame;						intro ("E", interF.superEggsGame);											} else {												interF.superEggs.text="Super Eggs: "+stats.superEggs+"/"+stats.superEggsTotal;						interF.superEggss.text="Super Eggs: "+stats.superEggs+"/"+stats.superEggsTotal;						intro ("E", interF.superEggs);											}					break;										case 280:					if (endGame) {												showBonus("Survival Bonus: "+sbn);						updateScore(stats.score);											}					break;										case 750:					interF.time.text="";					interF.times.text="";					interF.par.text="";					interF.pars.text="";					interF.score.text="";					interF.scores.text="";					if (endGame) {												//interF.MSG.visible=false;						interF.eggsGame.text="";						interF.eggsGames.text="";						interF.superEggsGame.text="";						interF.superEggsGames.text="";											} else {												interF.eggs.text="";						interF.eggss.text="";						interF.superEggs.text="";						interF.superEggss.text="";											}										}			}						//color change			//text			for (var id in cc.txt) {								var txt=cc.txt[id];				if (txt!="") {										txt.textColor=colors[brain.rand(0,colors.length-1)];					cc.c[id]--;					if (cc.c[id]==0) { txt.textColor=0xFFFFFF; cc.txt[id]="" }									}							}						//bonus			if (bonus) {								ba-=.015;				interF.bonus.alpha=ba;				interF.bonus.y-=.2;				if (ba<=0) { bonus=false }							}									}				function submitScore (ev) {						interF.bt_SubmitScore.visible=false;			brain.interF.act_SubmitScore (0);					}				public function showBonus (mess) {						interF.bonus.clip.val.text=mess;			interF.bonus.clips.val.text=mess;			bonus=true;			ba=1.5;			interF.bonus.y=275;			intro ("B", interF.score);					}				public function intro (id,txt) {						cc.txt[id]=txt;			cc.c[id]=15;					}							public function remove () {						if (endGame) { interF.bt_SubmitScore.removeEventListener (MouseEvent.CLICK,submitScore) }			if (cdTimer!=null) { cdTimer.stop(); if (cdTimer.hasEventListener(TimerEvent.TIMER)) { cdTimer.removeEventListener (TimerEvent.TIMER, cdDown) } }			cdTimer=null;			stats=null;			interF=null;			cc=null;			colors=null;			brain.removeSYS2 ("levelStats");					}			}	}