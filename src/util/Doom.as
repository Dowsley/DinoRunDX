package util {		import base.Brain;		import gfx.DoomCloud1;	import gfx.DoomCloud2;	import gfx.DoomCloud3;
		public class Doom {				private var brain:Object;		public var px:Number;		public var xMov:Number;		public var dif:Number;		public var rng:uint;		private var rng2:uint;		private var rng3:uint;		private var rngFG:uint;		private var rngFG2:Number;		private var rngFG3:Number;		private var rngSH:Number;				private var xFactor:Number;		private var yFactor:Number;				//clouds		private var cloud1:DoomCloud1;		private var cloud2:DoomCloud2;		private var cloud3:DoomCloud3;				private var clouds:Boolean=false;		private var oClouds:Boolean=false;		private var sound:Boolean=false;		private var oSound:Boolean=false;				private var gameOver:Boolean=false;		public var win:Boolean=false;		public var winC:uint=0;		public var spA:Number=1;		public var go:Boolean;		public var musicV:Number=.2;		private var surfThreshold:int;				var ds:Boolean=false;		var ods:Boolean=false;		var dsc:int=0;		public function Doom (br,go):void {						//init brain			brain=br;			this.go=(brain.S.BC||brain.S.mods.indexOf("D")!=-1)?false:go;						//main vars			rng=2000;			xMov=brain.S.ds;			if (brain.S.RT)				xMov *= .5;			px=(-3500+((10-xMov)*250))-(brain.S.BC?3000:0);			if (brain.S.SF)				px += 3500;			if (brain.S.PL)				px += 4000;			if (brain.S.fc)				px += 3500;			if (brain.S.mod == "MP") {				px -= 200;			}						xMovOrig = xMov;			if (Brain.freeRun && !Brain.frDoom) {				xMov = 0;			}												//other vars			rng2=rng*.3;			rng3=rng-rng2;			rngFG=rng*.9;			rngFG2=rng*.35;			rngFG3=rngFG-rngFG2;			rngSH=rngFG/2;						//scroll factors			xFactor=brain.worldBG.xFactor;			yFactor=brain.worldBG.yFactor;						//clouds			cloud1 = new DoomCloud1 (-1200,300);			cloud1.alpha=.3;			cloud1.stop();			//			cloud2 = new DoomCloud2 (-900,300);			cloud2.alpha=.6;			cloud2.stop();			//			cloud3 = new DoomCloud3 (-600,300);			cloud3.stop();						surfThreshold = brain.S.SF ? 650 : 450;					}				public function showFRDoom():void		{			go = true;			px = brain.dino.x-1500;			xMov = xMovOrig;		}				public function hideFRDoom():void		{			xMov = -10;		}				private var xMovOrig:Number;				public function removeClouds() {						cloud1=null;			cloud2=null;			cloud3=null;			brain=null;					}				public function fgColor (m2) {						if (!brain.S.night) {								brain.world.doomBGCC.cChange ([0,0,0,m2,m2,m2,1]);				brain.world.bgCC.cChange ([0,0,0,m2,m2,m2,1]);				brain.world.mainCC.cChange ([0,0,0,m2,m2,m2,1]);				brain.world.fgCC.cChange ([0,0,0,m2,m2,m2,1]);							}							}				private var xx:Number = 0;				public function main (dinoX,dinoY):void {									var al:Boolean=brain.S.night;			if (win&&brain.S.lastLvl) { al=false }			try { var ca:Number=(brain.dino.screen.substring(0,4)=="spEE")?.5:.04; } catch (e) {}			if (brain.S.dusk) {								brain.world.doomBGCC.cChange ([0,0,0,1,1,1,1]);				brain.world.bgCC.cChange ([20,0,10,.5,.5,.5,1]);				brain.world.mainCC.cChange ([20,0,10,.5,.5,.5,1]);				brain.world.fgCC.cChange ([20,0,10,.5,.5,.5,1]);							}if (brain.S.gh) {								brain.world.doomBGCC.cChange ([0,0,0,1,1,1,1]);				brain.world.bgCC.cChange ([0,0,0,.75,.75,.75,1]);				brain.world.mainCC.cChange ([0,0,0,.75,.75,.75,1]);				brain.world.fgCC.cChange ([0,0,0,.75,.75,.75,1]);							}else if (al) {								brain.world.doomBGCC.cChange ([0,0,0,ca,ca,ca,1]);				brain.world.bgCC.cChange ([0,0,0,ca,ca,ca,1]);				brain.world.mainCC.cChange ([0,0,0,ca,ca,ca,1]);				brain.world.fgCC.cChange ([0,0,0,ca,ca,ca,1]);							} else if (brain.S.night) {								brain.world.doomBGCC.cChange ([0,0,0,1,1,1,1]);				brain.world.bgCC.cChange ([0,0,0,1,1,1,1]);				brain.world.mainCC.cChange ([0,0,0,1,1,1,1]);				brain.world.fgCC.cChange ([0,0,0,1,1,1,1]);							}						//doom draws closer			if (go) { px+=(xMov*spA*brain.hc) }			if (brain.S.df) {				if (brain.dino.stegoTouch&& xx==0) {					xx = 1;				}				if (xx > 0) {					xx+=10;				}				px = brain.dino.x-450 + xx;;			}			dif = dinoX-px;									//lightning?			var dif2:Number=(win)?1500:dif;			if (brain.S.df) {				dif2 += 20000;			}			if (rand(0,dif2+(brain.S.night?50:200))<20) { brain.weather.lStrike(rand(1,3),rand2(.3-(dif2*0.000075),.8-(dif2*0.000075))) }						if (dif<rng) {								//doomsurf				ds=(dif < surfThreshold && !win)?true:false;				if (ds) {										dsc++;					brain.dino.body.head.emo.gotoAndStop (2); 					brain.dino.body.head.emo.alpha=.8;					//if (!ods&&brain.VAR=="KG") { dsc=getTimer() } else { dsc++ }									} else if (ods) {										brain.dino.body.head.emo.gotoAndStop (0);					brain.dino.body.head.emo.alpha=1;										//if (brain.VAR=="KG") { dsc=(getTimer()-dsc)/20; trace ("DS",dsc) }										//end surf					if (dsc>100) {												if (brain.S.mod=="MP") {							brain.interF.showMessage (Math.round(dsc/50)+ " Second DoomSurF!");							if (dsc>brain.sys2.stats.MPdoomSurf&&dsc>brain.sys2.stats.MPdoomSurfGame&&!brain.S.cheat) { brain.sys2.stats.MPdoomSurfGame=dsc }													} else {														brain.interF.showMessage (Math.round(dsc/50)+ " Second DoomSurF!");							if (dsc>brain.sys2.stats.doomSurf&&dsc>brain.sys2.stats.dsLvl&&!brain.S.cheat) { brain.sys2.stats.dsLvl=dsc }							var surfScore:Number=dsc*5;							brain.create ( {nam:"ScoreFloat", px:brain.dino.x, py:brain.dino.y-24, val:surfScore, depth:["world","main"]} )							brain.sys2.stats.addScore (surfScore);													}											}										dsc=0;									}				ods=ds;				//audio				var vol:Number=(gameOver)?1+(dif/rng):1-(dif/rng);				if (!win) {					sound=true;					if (vol<0) { vol=0 };					if (vol>1) { vol=1 };										//final test					if (brain.S.df) {						vol*=.25;					}										//start sound?					if (!oSound) { brain.sys.audio.ply ("doom",vol,true) }										//adjust vol of both music and doom					brain.sys.audio.vol (2,vol);					if (!gameOver) { brain.sys.audio.vol (1,musicV-(musicV*vol)) }									} else {										winC++;					var doomVol:Number=vol-(winC/300);					if (doomVol<0) { doomVol=0 };					var musicVol:Number=(musicV-(musicV*vol))-(winC/300);					if (musicVol<0) { musicVol=0 };										//decrease current volume of doom and theme					brain.sys.audio.vol (2,doomVol);					if (brain.S.lvl!=8&&!brain.sys.audio.ff) { brain.sys.audio.vol (1,musicVol) }									}								//BG gets red				var m:Number = (dif-rng2)/rng3;				if (m>1) { m=1 }				brain.sky.cc.cChange ([0,0,0,1,m,m,1]);				brain.worldBG.cc.cChange ([0,0,0,1,m,m,1]);								if (dif<rngFG) {					//FG gets black					var m2:Number = (dif-rngFG2)/rngFG3;					if (win&&!brain.endLevel) { m2+=((winC/200)) }					if (m2>1) { m2=1 }					if (brain.dino.screen.substring(0,4)=="spEE") { if (m2<.5) { m2=.5 } }					fgColor(m2);										//screen and boulders shake					brain.world.shakeMag=(win)?0:2-(dif/rngSH);					//					if (brain.lib.Boulder!=undefined&&!win) {												var bRefs:Array=brain.lib.Boulder.refs						for each (var b:Object in bRefs) { b.shake(2-(dif/rngSH)) }											}										//wall of doom?					if (dif<rngFG3) {												clouds=true;						if (!oClouds) {														brain.world.doomBG.addChild (cloud1);							brain.world.doomBG.addChild (cloud2);							brain.world.doomFG.addChild (cloud3);							cloud1.play();							cloud2.play();							cloud3.play();													}													cloud1.x=(dinoX)-2000+((rng-dif)*.9);						cloud2.x=(dinoX)-2300+((rng-dif)*1.1);						cloud3.x=(dinoX)-2700+((rng-dif)*1.3);						cloud1.y=(dinoY);						cloud2.y=(dinoY);						cloud3.y=(dinoY);						//fade clouds if win						if (win) {														cloud1.alpha=.3-(winC/20);							cloud2.alpha=.6-(winC/20);							cloud3.alpha=1-(winC/200);													} else {														//doom chunks!							var screen:String = brain.world.sArr[brain.dino.roomID];							var typ:String = screen.substring (screen.length-2,screen.length-1);							if (typ!="R"&&typ!="T") { typ="G" }							var typA:Array =["G",typ]							if (rand(0,8)<3) {																brain.create ({ nam:"DoomChunk", px:px, py:brain.dino.pos.y+(rand(-200,200)), vx:rand(5,20), vy:rand(-12,-4), typ:typA[rand(0,typA.length-1)], depth:["world",rand(0,1)==0?"main":"doomBG"]})															}												}											} else {												clouds=false;						if (oClouds) {														cloud1.stop();							cloud2.stop();							cloud3.stop();							brain.world.doomBG.removeChild (cloud1);							brain.world.doomBG.removeChild (cloud2);							brain.world.doomFG.removeChild (cloud3);													}											}					oClouds=clouds;										//adrenaline?					//if (dif<500) { if (brain.dino.sys.adren==undefined) { brain.dino.sys.adren= new Adren(brain.dino) } }										//extinct?					if (dif<0&&!gameOver&&!win) {												if (brain.endLevel) {														xMov=0;													} else {														gameOver=true;							brain.gameOver();													}					}				} else { brain.world.shakeMag=0 }			} else {								sound=false;				if (oSound) { brain.sys.audio.stp (2) }								//reset color				if (dif<rng+50) {										fgColor(1);					brain.sky.cc.cChange ([0,0,0,1,1,1,1]);					brain.worldBG.cc.cChange ([0,0,0,1,1,1,1]);									}							}			oSound=sound;						//fade music vol on win			if (win&&!brain.S.BC) {								var winCI=brain.S.difNum/2;				if (winCI<1) { winCI=1 }				winC+=winCI;								if (brain.S.lvl!=8&&!brain.sys.audio.ff) {										var musicVol2=musicV-(winC/300);					if (musicVol2<0) { musicVol2=0 } else { brain.sys.audio.vol (1,musicVol2) }									}							}		}				private function rand(min:int, max:int):int {			return (Math.round(Math.random()*(max-min))+min);		}				private function rand2(min:Number, max:Number):Number {			return (Math.random()*(max-min))+min;		}	}	}