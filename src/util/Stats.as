package util {		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.SharedObject;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.setTimeout;		import base.Brain;
		public class Stats {				//abilities		public var SPD:int;						////////////// SAVED		public var ACL:int;						////////////// SAVED		public var JMP:int;						////////////// SAVED		public var STR:int;						////////////// SAVED		public var DNA:int;						////////////// SAVED		public var GP:int;						////////////// SAVED		public var DNALVL:int;		public var GPLVL:int;				//main		public var nam:String;					////////////// SAVED		public var cont:int;		public var time:Number;		public var par:Number;		public var eggs:int;		public var eggsGame:int;		public var dudeGame:Boolean=false;		//public var eggsTotal:int;		//public var eggsTotalGame:int;		public var brLvl:int;		public var dsLvl:int;		public var dcLvl:int;		public var eggsPL:int;					////////////// SAVED		public var superEggs:int;		public var superEggsGame:int;		public var superEggsTotal:int;		public var superEggsTotalGame:int;		public var superEggsLVL:Array;		public var superEggsPL:Array;			////////////// SAVED		public var superEggsPLNum:int;				public var score:Number;		public var highScorePL:Number;			////////////// SAVED		public var playerScore:Number;			////////////// SAVED		public var dinosSaved:int;				////////////// SAVED		public var prestige:Boolean;			////////////// SAVE		public var speedRuns:Array;				////////////// SAVED		public var mods:Array;					////////////// SAVED		public var actMods:Array;		public var dls:Array;					////////////// SAVED		public var clr:String;					////////////// SAVED		public var hat:String;					////////////// SAVED		public var cd:Number;		public var addP:Boolean=true;		public var friends:Array;				////////////// SAVED		public var blocked:Array;				////////////// SAVED		public var exempt:Array;		public var bonus:Array;					////////////// SAVED		public var lastPS:int;					////////////// SAVED		public var bestChallenge:int;			 ////////////// SAVED		public var matchHat:Boolean = false;			 ////////////// SAVED		public var skip10:Boolean = false;			 ////////////// SAVED		public var dxMsg:Boolean = false;			 ////////////// SAVED				//eats		public var eatLiz:int;		public var eatBir:int;		public var eatRun:int;		public var eatWor:int;		public var eatFis:int;		public var eatLizPL:int;				////////////// SAVED		public var eatBirPL:int;				////////////// SAVED		public var eatRunPL:int;				////////////// SAVED		public var eatWorPL:int;				////////////// SAVED		public var eatFisPL:int;				////////////// SAVED		public var eatTotal:int;				////////////// SAVED				//combos		public var eggVal:*;		public var foodVal:Number;		private var eggTimer:int;		private var foodTimer:Object;				static public var hasPrestige:Boolean = false;								// all colors go here		public var dinoColors:Array = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E",			"F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","aa","bb","cc","dd","ee","ff","gg","hh","ii","jj","kk","ll","mm",			"nn","oo","pp","qq","rr","ss","tt","uu","vv","ww","xx","yy","zz","AA","BB","DD","EE","GG","LL","KK","MM","NN","OO","PP","QQ","RR","SS","TT","UU","VV",			"WW","XX","YY",			"pra","prb",		//prestige			"hhb","hha","hhc",	//halloween				"csa","csb","csc","csd","cse","csf","csg",		//custom			"ic_01_","ic_02_","ic_03_","ic_04_","ic_05_","ic_06_","ic_07_","ic_08_","ic_09_","ic_10_","ic_11_","ic_12_","ic_13_","ic_14_","ic_15_","ic_16_","ic_17_","ic_18_","ic_19_","ic_20_","ic_21_","ic_22_","ic_23_","ic_24_","ic_25_","ic_26_","ic_27_","ic_28_","ic_29_","ic_30_","ic_31_","ic_32_","ic_33_","ic_34_","ic_35_","ic_36_","ic_37_","ic_38_","ic_39_","ic_40_","ic_41_","ic_42_","ic_43_","ic_44_","ic_45_","ic_46_","ic_47_","ic_48_","ic_49_","ic_50_","ic_51_","ic_52_","ic_53_","ic_54_","ic_55_","ic_56_","ic_57_","ic_58_","ic_59_","ic_60_","ic_61_","ic_62_","ic_63_","ic_64_","ic_65_","ic_66_","ic_67_","ic_68_","ic_69_","ic_70_","ic_71_","ic_72_","ic_73_","ic_74_","ic_75_","ic_76_","ic_77_","ic_78_","ic_79_", //indie			"hhe","hhf","hhg","hhh","hhi","hhj","hhk","hhl","hhm","hhn","hho","hhp","hhq","hhr","hhs","hht","hhu","hhv","hhw","hhx",			"vaultA","vaultB","vaultC","vaultD","vaultE","vaultF","vaultG","vaultH","vaultI","vaultJ","vaultK","vaultL","vaultM","vaultN","vaultO","vaultP","vaultQ","vaultR","vaultS","vaultT","vaultU","vaultV","vaultW","vaultX","vaultY","vaultZ","vaultAA","vaultBB","vaultCC","vaultDD","vaultEE","vaultFF","vaultGG","vaultHH","vaultII","vaultJJ","vaultKK","vaultLL","vaultMM","vaultNN","vaultOO","vaultPP","vaultQQ","vaultRR","vaultSS","vaultTT","vaultUU","vaultVV","vaultWW","vaultXX","vaultYY","vaultZZ","vaultAAA","vaultBBB","vaultCCC","vaultDDD","vaultEEE","vaultFFF","vaultGGG","vaultHHH","vaultIII","vaultJJJ","vaultLLL","vaultMMM","vaultNNN","ASa","ASb","ASc","ASd","ASe","ASf","ASg","ASh","ASi","ASj","ASk","ASl","ASm","ASn","ASo","ASp","ASq","ASr","ASs"		]						private var conts:Array = [0,2,1,0,0];		private var costs:Object = { SPD2:50, SPD3:100, SPD4:150, SPD5:200, ACL2:10, ACL3:20, ACL4:40, ACL5:80, JMP2:20, JMP3:40, JMP4:80, JMP5:120, STR2:30, STR3:60, STR4:90, STR5:120 } // 1210		private var eggConts:Array;		private var milestones:Object;		public var superEggPTS:Object;		//		public var doomSurf:int;			////////////// SAVED		public var boulderRide:int;			////////////// SAVED		public var dactylRides:int;			////////////// SAVED		public var trophies:Object;			////////////// SAVED		private var muted:Boolean;			////////////// SAVED		public var screenBonus:Array;		////////////// SAVED		public var lvlsWon:Array;			////////////// SAVED		public var submittedAchsSteam4:Array = []; ///SAVED				public var privateID:String; ///SAVED				public var newsIDShown:int = 0;		///SAVED		public var MPNewsIDShown:int = 0;	///SAVED						public var lastBoot:Number=0;			////////////// SAVED		public var lastTO:int=0;			////////////// SAVED						private var brain:Brain;		public var savedGames:SharedObjectAlt;		public var gameNum:int;		public var openSlots:Array=[];		public var lvlMS:Array;				private var MP:Boolean=false;		private var MPeggs2:int=0;				public var MPeggs:int;						public var MPracesWon:int;					public var MPcrittersEaten:int;				public var MPdoomSurf:int;					public var MPboulderRide:int;						public var MPeggsGame:int;						public var MPcrittersEatenGame:int;			public var MPdoomSurfGame:int;					public var MPboulderRideGame:int;						var loader:URLLoader;				//MP SCORES		public var MPScores:Array;			////////////// SAVED				//mods		public var moders:Array;				public function adjustDinoColors () {						//dinoColors=dinoColorsOrig.slice();			//var l:int=brain.S.hats?0:(dinoColorsOrig.length-1)-dinosSaved;			//for (var i:int=0; i<l; i++) { dinoColors.pop() }					}				function initBlocked (ev) {						moders=[];			var blockedList = new XML(loader.data);			for each (var nam in blockedList.children()) {				var pnam:String = nam.toString();				var modName:Array = pnam.split("@");				if (blocked.indexOf(pnam)==-1 && modName.length==1) blocked.push(nam.toString())				if (modName.length==2) moders.push (modName[1]);			}			for (var i:int=0; i<blocked.length; i++) { 							var bnam:String=blocked[i];				for (var ii:int=i+1; ii<blocked.length; ii++) { if (blocked[ii]==bnam) { blocked.splice(ii,1); ii-- } }							}			trace (blocked);			trace ("//");			trace (moders);						//init exempt			/*loader = new URLLoader();			loader.addEventListener(Event.COMPLETE, initExempt);			loader.load(new URLRequest("http://www.pixeljam.com/dinorun/ex.xml"));*/					}				/*function initExempt (ev) {						exempt=[];			var exList = new XML(loader.data);			for each (var nam in exList.children()) { exempt.push(nam.toString()) }			trace (exempt);					}*/				public function addMPScore (nam,score) {						if (MPScores.indexOf(nam)==-1) {								MPScores.push(nam,score);				trace ("MPSCore added ",nam,score);							} else {								for (var i:int=0; i<MPScores.length; i+=2) {										if (nam==MPScores[i]) {												MPScores.splice(i+1,1,score);						trace ("MPScore replaced",nam,score);											}									}							}			savedGames.data.MPScores=MPScores.slice();			flushSave();					}				public function checkMPScore (nam,score) {						nam=nam.toLowerCase();			//if (exempt.indexOf(nam)!=-1) { trace ("EXEMPT"); return score }			trace ("check mp score ",nam,score);			trace (MPScores)			var correctScore:int=MPScores[MPScores.indexOf(nam)+1];			if (score<correctScore) {								trace ("lower score loaded. replacing with ",correctScore);				return correctScore;							} else if (score>correctScore+250000||score>500000) {								trace ("much higher score loaded. replacing with ",correctScore);				return correctScore;							} else { return score }			return;					}				public function Stats (br) {						this.brain=br;			lvlMS=[];			//savedGames = SharedObject.getLocal("dinoRunSESavedGame","/");			savedGames = SharedObjectAlt.getLocal("dinoRunDXSavedGame");			//savedGames.clear();						//Brain.log(1);						if (true) {							//init friends				if (savedGames.data.friends==undefined) { savedGames.data.friends=[] }				friends=savedGames.data.friends.slice();				if (savedGames.data.blocked==undefined) { savedGames.data.blocked=[] }				blocked=savedGames.data.blocked.slice();				Brain.log(2);				//								//mp scores				if (savedGames.data.MPScores==undefined) { savedGames.data.MPScores=[] }				MPScores=savedGames.data.MPScores.slice();				trace ("MPSscore ",MPScores);				//savedGames.data.MPScores.splice(1,1,4751);															}			//Brain.log(3);						//init bonuses			if (savedGames.data.bonus==undefined) { savedGames.data.bonus=[] }			bonus=savedGames.data.bonus.slice();			//Brain.log(String(bonus));						//DX			//message			//if (savedGames.data.dxMsg==undefined) { savedGames.data.dxMsg=false }			//dxMsg=savedGames.data.dxMsg;						//Brain.log(4);						//init prestige			if (savedGames.data.prestige==undefined) { savedGames.data.prestige=false }			prestige=savedGames.data.prestige;						if (prestige) {				Stats.hasPrestige = true;			}						//init privateID			if (savedGames.data.privateID==undefined) { savedGames.data.privateID=null }			privateID=savedGames.data.privateID;									//news shown			if (savedGames.data.newsIDShown==undefined) { savedGames.data.newsIDShown=0 }			if (savedGames.data.MPNewsIDShown==undefined) { savedGames.data.MPNewsIDShown=0 }			newsIDShown = savedGames.data.newsIDShown;			//newsIDShown = 0;			MPNewsIDShown = savedGames.data.MPNewsIDShown;			//Brain.log(6);									///update			//if (savedGames.data.updateShown==undefined) { savedGames.data.updateShown=Brain.updateShown }			//Brain.updateShown = savedGames.data.updateShown;						//match hats + skip 10			if (savedGames.data.matchHat==undefined) { savedGames.data.matchHat=false }			matchHat = savedGames.data.matchHat;			if (savedGames.data.skip10==undefined) { savedGames.data.skip10=false }			skip10 = savedGames.data.skip10;						//Brain.log(7);			//init			init("");						//Brain.log(mods);						//Brain.log(8);			//acheevos			if (savedGames.data.submittedAchsSteam4 == undefined) {				savedGames.data.submittedAchsSteam4 = [];			}			submittedAchsSteam4 = savedGames.data.submittedAchsSteam4.slice();						//errors			if (savedGames.data.errors == undefined) {				savedGames.data.errors = [];			}			Brain.ERROR_LOG = savedGames.data.errors.slice();						//login			if (savedGames.data.loginU == undefined) {				savedGames.data.loginU = "";				savedGames.data.loginP = "";				savedGames.data.saveLogin = true;			}			Brain.loginU = savedGames.data.loginU;			Brain.loginP = savedGames.data.loginP;			Brain.saveLogin = savedGames.data.saveLogin;												//Brain.log(9);						if (savedGames.data.g1==undefined) {								//init saved games				savedGames.data.g1={};				savedGames.data.g2={};				savedGames.data.g3={};								openSlots=[1,2,3];				createNewPlayer("Dino1");							} else {								//define open slots				if (savedGames.data.g1.nam==undefined) { openSlots.push (1) }				if (savedGames.data.g2.nam==undefined) { openSlots.push (2) }				if (savedGames.data.g3.nam==undefined) { openSlots.push (3) }								//load stats of current saved game if there is one				if (savedGames.data.currentNum!=undefined) { initSaved(savedGames.data.currentNum) }							}						//Brain.log(10);						//prestige hats			if (prestige) {				awardPrestigeHats();			}						//Brain.log(11);						//fullscreen			if (savedGames.data.fullscreen == undefined)				savedGames.data.fullscreen = false;			if (savedGames.data.fullscreen)				Brain.goFS = true;									//Brain.log(12);		}				public function saveErrors():void		{			//errors			savedGames.data.errors = Brain.ERROR_LOG.slice();			flushSave();		}				public function saveLogin(u:String,p:String):void		{			//errors			savedGames.data.loginU = u;			savedGames.data.loginP = p;			Brain.loginU = u;			Brain.loginP = p;			flushSave();		}				public function saveLoginPref(p:Boolean):void		{			//errors			savedGames.data.saveLogin = p;			if (p == false) {				savedGames.data.loginU = "";				savedGames.data.loginP = "";			}			flushSave();		}				public function awardPrestige():void		{			prestige = true;			savedGames.data.prestige = prestige;			awardPrestigeHats();			flushSave();		}				//private hats		public var privateHats:Object = {			samtunder:["csa"],			imaginaut:["csf", "csg"],			matthew0275:["csc"]		};				public function savePrivateID(val:String):void		{			if (privateID == val) {				return;			}			privateID = val;			savedGames.data.privateID = privateID;			flushSave();		}		public function checkPrivateID(selfNam:String) {			trace ("checkPrivate",selfNam);			for (var nam:String in privateHats) {				trace (nam);				if (selfNam.toLowerCase() == nam) {					savePrivateID(nam);					awardHats(privateHats[nam]);				}			}		}				public function updateNewsIDShown(val:int):void		{			trace (val);			newsIDShown = val;			savedGames.data.newsIDShown=newsIDShown;			flushSave();		}				public function updateMPNewsIDShown(val:int):void		{			MPNewsIDShown = val;			savedGames.data.MPNewsIDShown=MPNewsIDShown;			flushSave();		}				public function initNews():void		{					}				public function awardPrestigeHats():void		{			//awardHats(["pra","prb","prc","hhb"]); //oldHat			awardHats(["vaultR_","vaultCC_","vaultP_","vaultO_","vaultPPP_","vaultC_","vaultU_","pra","vaultKK_","vaultL_","vaultFF_","vaultZ_","vaultII_","vaultX_","vaultIII_","vaultEEE_","vaultCCC_","vaultBBB_","prb","prc","vaultMMM_","hhb"]);		}				public function awardHats(hats:Array):void		{			for (var i:int=0; i<hats.length; i++) {				if (brain.interF.hats.indexOf(hats[i])==-1) {					brain.interF.hats.push (hats[i]);					trace ("hat awarded:",hats[i]);				}			}		}				public function clearCheevos():void		{			submittedAchsSteam4 = [];			checkAchs();			savedGames.data.submittedAchsSteam4=submittedAchsSteam4;			flushSave();		}				public function loadBlocked ():void		{			//add blocked from xml			loader = new URLLoader();			loader.addEventListener(Event.COMPLETE, initBlocked, false, 0, true);			loader.addEventListener(IOErrorEvent.IO_ERROR, loadError, false, 0, true);			loader.load(new URLRequest("http://www.pixeljam.com/dinorun/blocked.xml"));		}				private function loadError (e:IOErrorEvent) {			brain.interF.loadError();		}				public function createNewPlayer (dinoName) {						savedGames.data.currentNum=gameNum=openSlots[0];			openSlots.shift();			init(dinoName);			brain.S.dif="Medium";			brain.S.mod="Challenge";			saveGame();					}		public function clearSaved (num) {					trace (num,gameNum,openSlots.length);			savedGames.data["g"+num]={};			openSlots.push(num);			openSlots.sort();			flushSave();						if (num==gameNum) {								//load next available slot				if (openSlots.length!=3) {										var takenSlots:Array=[];					for (var i=1; i<4; i++) { if (openSlots.indexOf(i)==-1) { takenSlots.push (i) } }					takenSlots.sort();					initSaved(takenSlots[0])									} else {										createNewPlayer("Dino"+openSlots[0]);				}			}		}								private function initHats():void		{						trace ("///",brain.interF.hats);			if (Config.WEB) {				brain.interF.hats.push ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p");			} else {				//oldHat				/*brain.interF.hats.push ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","bb","cc","dd","ee","ff","gg","hh","ii","uu","vv","ww","xxx","yy","zz","ab","cb","db","eb","fb","gb","hb","ib","jb","kb","lb","mb","nb","ob","pb","qb","rb","sb","tb","ub","vb","wb","xb","yb","zb","ac","bc","dc","ec","fc","gc","hc","ic","jc","kc","lc","mc","nc","oc","pc","qc","rc","sc","tc","uc","vc","wc","xc","yc","zc","ad","bd","cd","fd","ed","hd","gd","id","jd","csb","csd","cse","ic_02_","ic_03_","ic_04_","ic_05_","ic_60_","ic_61_","ic_50_","ic_51_","ic_52_","ic_53_","ic_49_","ic_10_","ic_11_","ic_12_","ic_13_","ic_14_","ic_15_","ic_16_","ic_17_","ic_18_","ic_19_","ic_20_","ic_21_","ic_22_","ic_23_","ic_25_","ic_24_","ic_74_","ic_26_","ic_27_","ic_28_","ic_29_","ic_32_","ic_33_","ic_35_","ic_34_","ic_36_","ic_37_","ic_39_","ic_40_","ic_41_","ic_42_","ic_43_","ic_75_","ic_38_","ic_76_","ic_44_","ic_45_","ic_46_","ic_47_","ic_48_","ic_54_","ic_55_","ic_58_","ic_59_","ic_62_","ic_63_","ic_64_","ic_65_","ic_06_","ic_08_","ic_68_","ic_09_","ic_77_","ic_78_","ic_79_","hhe_","hhf_","hhg_","hhh_","hhi_","hhj_","hhk_","hhl_","hhm_","hhn_","hho_","hhp_","hhq_","hhr_","hhs_","hht_","hhu_","hhv_","hhw_","hhx_","vaultA_","vaultB_","vaultC_","vaultD_","vaultE_","vaultF_","vaultG_","vaultH_","vaultI_","vaultJ_","vaultK_","vaultL_","vaultM_","vaultN_","vaultO_",					"vaultP_","vaultQ_","vaultR_","vaultS_","vaultT_","vaultU_","vaultV_","vaultW_","vaultX_","vaultY_","vaultZ_","vaultAA_","vaultBB_","vaultCC_","vaultDD_",					"vaultEE_","vaultFF_","vaultGG_","vaultHH_","vaultII_","vaultJJ_","vaultKK_","vaultLL_","vaultMM_","vaultNN_","vaultOO_","vaultPP_","vaultQQ_","vaultRR_",					"vaultSS_","vaultTT_","vaultUU_","vaultVV_","vaultWW_","vaultXX_","vaultYY_","vaultZZ_","vaultAAA_","vaultBBB_","vaultCCC_","vaultDDD_","vaultEEE_","vaultFFF_",					"vaultGGG_","vaultHHH_","vaultIII_","vaultJJJ_","vaultLLL_","vaultMMM_","vaultNNN_",					//Adult Swim					"ASa_", "ASb_", "ASc_", "ASd_", "ASe_", "ASf_", "ASg_", "ASh_", "ASi_", "ASj_", "ASk_", "ASl_", "ASm_", "ASn_", "ASo_", "ASp_", "ASq_", "ASr_", "ASs_")*/								brain.interF.hats.push ("A","B","vaultQ_","vaultR_","vaultP_","vaultT_","pra","vaultU_","vaultS_","vaultD_","vaultC_","q","bd","vaultB_","N","G","csa","vaultCC_","E","vaultE_","vaultKK_","vaultJJ_","gc","h","T","vaultG_","vaultF_","c","b","vaultI_","dc","ic","ec","d","W","S","vaultPPP_","vaultV_","Y","vaultO_","a","vaultY_","vaultAA_","vaultZ_","i","vaultEE_","vaultDD_","H","vaultFF_","vaultJ_","vaultK_","vaultL_","vaultGG_","vaultHH_","vaultII_","vaultW_","X","vaultN_","ll","mm","p","vaultX_","vaultBB_","csc","cse","M","L","vaultM_","F","D","C","bc","nn","tt","R","J","m","O","Q","P","Z","ed","prc","hd","f","g","l","ob","gd","prb","vaultA_","e","qc","cc","n","fd","cd","ii","hh","mc","vv","jd","zz","yy","vaultYY_","vaultXX_","jb","vaultWW_","vaultNNN_","pc","nc","oc","cb","z","aa","ee","ff","gg","lc","dd","zb","vaultLL_","vaultMM_","csg","sc","tc","vaultOOO_","rb","bb","mb","vaultPP_","kb","vaultOO_","vaultQQ_","vaultRR_","ad","uc","hht_","hhq_","hhr_","hhs_","vaultNN_","csd","zc","vaultSS_","vaultVV_","vaultUU_","V","xc","t","uu","u","v","w","ww","s","pb","r","hc","eb","db","qb","fb","lb","fc","jc","ab","kc","ib","vaultZZ_","xxx","vc","wc","id","yc","gb","hb","xb","wb","yb","x","y","nb","sb","tb","csf","ic_02_","ic_03_","ic_04_","ic_05_","ic_41_","ic_42_","ic_43_","ic_40_","ic_39_","ic_38_","ic_75_","ic_25_","ic_24_","ic_74_","ic_16_","ic_21_","ic_22_","ic_23_","ic_18_","ic_19_","ic_20_","vaultTT_","ic_64_","ic_63_","ic_50_","ic_51_","ic_52_","ic_53_","ic_61_","ic_60_","ic_54_","ic_29_","ic_37_","ic_26_","ic_27_","ic_48_","ic_47_","ic_46_","ic_45_","ic_44_","ic_76_","ic_49_","ic_32_","ic_15_","ic_59_","ic_65_","ic_28_","ic_14_","ic_12_","ic_13_","ic_11_","ic_10_","ic_08_","ic_06_","ic_17_","ic_68_","ic_36_","ic_62_","ic_55_","ic_58_","ic_33_","ic_35_","ic_34_","ic_09_","ic_77_","ic_78_","ic_79_","jd","zz","yy","ASd_","ASb_","ASc_","ASe_","ASf_","ASg_","ASh_","ASi_","ASj_","ASk_","ASl_","ASm_","ASn_","ASo_","ASp_","ASq_","ASr_","ASs_","ASa_","hhe_","hhf_","hhd","hhg_","ss","hhh_","hhi_","hhb","hhc","k","hha","o","hhl_","hhu_","hhv_","hhw_","hhx_","hho_","hhp_","hhn_","hhm_","j","rc","vb","ac","K","ub","oo","pp","od","rr","qq","pd","nd","qd","vaultGGG_","vaultIII_","vaultHHH_","vaultLLL_","vaultMMM_","ld","td","vaultAAA_","sd","vaultCCC_","kd","vaultBBB_","vaultDDD_","rd","md","vaultEEE_","vaultFFF_","csb","cov1_","cov2_","cov3_","cov4_","cov5_","cov6_","cov7_");								var remove:Array = ["nn","tt","mc","pra","prb","prc","hhb","dc","ac","vb","ub","lb","db","mb","kb","ww","nb","pb","bc","xb","yb","wb","mc","jb","yy","zz","vv","jd","vaultR_","vaultCC_","vaultP_","vaultO_","vaultPPP_","vaultC_","vaultU_","vaultKK_","vaultL_","vaultFF_","vaultZ_","vaultII_","vaultX_","vaultIII_","vaultEEE_","vaultCCC_","vaultBBB_","vaultMMM_"];				for each ( var id:String in remove) {					brain.interF.hats.splice(brain.interF.hats.indexOf(id),1);				}			}					}								public function init (dinoName) {						//player name			nam=dinoName;			brain.S.gold=false;			brain.interF.hats=[];			////donator hats			if (true) { brain.S.hats=true; initHats(); }			//destructoid			if (true) { brain.interF.hats.push ("jj") }			//no hat space			if (brain.interF.hats.length>0) { brain.interF.hats.unshift ("xx") }						//dino abilities			SPD=1;			ACL=1;			JMP=1;			STR=1;			DNA=Config.GIFT?1000:0;//0			GP=Config.GIFT?10000:00;//0						//misc			cont=0;						//eggs			eggs=0;			eggsGame=0;			eggsPL=0;			//eggsTotal=0;			//eggsTotalGame=0;			//			superEggs=0;			superEggsTotal=0;			superEggsGame=0;			superEggsTotalGame=0;			superEggsLVL=[];			superEggsPL=[];//"T","G","M","A","S","O","I","R","D","B"			superEggsPLNum=0;			//speedRuns=["A",1,"B",4,"C",4,"D",4,"E",4,"F",4,"G",4,"H",4,"I",4,"J",4,"K",4,"L",4,"M",4,"N",4,"O",4,"P",4,"Q",4,"R",4,"S",4,"T",4];			speedRuns=["A",0];//,"V",0,"W",0,"X",0,"Y",0,"Z",0,"AA",0			mods=[];			actMods=[];			dls=[];			clr="a";			hat="xx";			lastPS=0;			bestChallenge=0;						//misc			doomSurf=0;			boulderRide=0;			dactylRides=0;			muted = false;			brain.S.showProg=false;			brain.S.auto=false;			par=0;			score=0;			highScorePL=0;			playerScore=0;			dinosSaved=0;			screenBonus=[];			lvlsWon=[];						trophies = {								eggsPL:"",				superEggsPLNum:"",				eatLizPL:"",				eatBirPL:"",				eatRunPL:"",				eatWorPL:"",				eatFisPL:"",				dinosSaved:"",				boulderRide:"",				dactylRides:"",				doomSurf:"",				buddyFound:""							}						/*trophies = {								eggsPL:"Silver_a",				superEggsPLNum:"Gold_a",				eatLizPL:"Gold_a",				eatBirPL:"Gold_a",				eatRunPL:"Gold_a",				eatWorPL:"Gold_a",				eatFisPL:"Gold_a",				dinosSaved:"DNA5_a",				boulderRide:"Gold_a",				dactylRides:"Gold_a",				doomSurf:"Gold_a",				buddyFound:"Gold_a"							}*/						//combos			eggVal=0;			eggTimer=0;			foodTimer={};						//eats			eatLiz=0;			eatBir=0;			eatRun=0;			eatWor=0;			eatFis=0;			eatLizPL=0;			eatBirPL=0;			eatRunPL=0;			eatWorPL=0;			eatFisPL=0;			eatTotal=0;						MPeggs=0;			MPracesWon=0;			MPcrittersEaten=0;			MPdoomSurf=0;			MPboulderRide=0;						//superEggPTS (DNA, GP)			superEggPTS = { A:[30,100], B:[100,2000], T:[15,80], M:[100,300], S:[10,50], D:[80,200], G:[25,50], O:[30,80], I:[25,100], R:[75,150] }						//milestones data			milestones={								m1: { 										stat:"eggsPL",					val:[0,15,100,250,1000,2000],					pts:[0,500,1000,2000,5000,20000],					prize:["",["DNA_10","25"],["DNA_20","GP_50","MS_D"],["TR_Bronze","GP_100"],["TR_Silver","GP_250","MS_H"],["TR_Gold","GP_500"]],					nam:["","15 Eggs Saved","100 Eggs Saved","250 Eggs Saved","1000 Eggs Saved","2000 Eggs Saved"],					ACH:0									},								m2: { 									stat:"superEggsPLNum",					val:[0,10], 					pts:[0,25000],					prize:["",["TR_Gold","GP_2500","MS_C"]],					nam:["","All Super Eggs Saved!"],					ACH:0									},								m3: { 									stat:"eatLizPL",					val:[0,50,100,250,500],					pts:[0,2500,5000,10000,25000],					prize:["",["DNA_20","GP_50"],["TR_Bronze","GP_100"],["TR_Silver","GP_200","MS_H"],["TR_Gold","GP_300"]],					nam:["","50 Lizards Chomped","100 Lizards Chomped","250 Lizards Chomped","500 Lizards Chomped"],					ACH:0									},								m4: { 									stat:"eatRunPL",					val:[0,50,100,250,500],					pts:[0,2500,5000,10000,25000],					prize:["",["DNA_20","GP_50"],["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","50 Runners Munched","100 Runners Munched","250 Runners Munched","500 Runners Munched"],					ACH:0									},								m5: { 									stat:"eatWorPL",					val:[0,3,10,25,50], 					pts:[0,2500,5000,10000,25000],					prize:["",["DNA_30","GP_50"],["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","3 Worms Slurped","10 Worms Slurped","25 Worms Slurped","50 Worms Slurped"],					ACH:0									},								m6: { 									stat:"eatBirPL",					val:[0,5,10,25,50],					pts:[0,2500,5000,10000,25000],					prize:["",["DNA_30","GP_50"],["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","5 Birds Devoured","10 Birds Devoured","25 Birds Devoured","50 Birds Devoured"],					ACH:0									},								m7: { 									stat:"eatFisPL",					val:[0,10,25,50,100],					pts:[0,2500,5000,10000,25000],					prize:["",["DNA_20","GP_50"],["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","10 Fish Gobbled","25 Fish Gobbled","50 Fish Gobbled","100 Fish Gobbled"],					ACH:0									},								m8: { 									stat:"dinosSaved",					val:[0,1,5,10,25,50],					pts:[0,1000,5000,10000,25000,50000],					prize:["",["TR_DNA1","GP_100"],["TR_DNA2","GP_200"],["TR_DNA3","GP_300"],["TR_DNA4","GP_400","MS_K"],["TR_DNA5","GP_500"]],					nam:["", "1 Dino Saved", "5 Dinos Saved", "10 Dinos Saved", "25 Dinos Saved", "50 Dinos Saved"],					ACH:0 									},								m9: { 									stat:"playerScore", 					val:[0,100000,250000,500000,1000000],					pts:[0,0,0,0,0,0,0,0],					prize:["",["GP_100","MS_B"],["GP_500","MS_G"],["GP_1000"],["GP_2500","MS_I"]],					nam:["","100000+ Player Score","250000+ Player Score","500000+ Player Score","1000000+ Player Score"],					ACH:0 									},								m10: { 									stat:"boulderRide", 					val:[0,150,300,500],					pts:[0,0,0,0,0,0,0,0],					prize:["",["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","3 Second Boulder Ride","6 Second Boulder Ride","10 Second Boulder Ride"],					ACH:0 									},								m11: { 									stat:"dactylRides", 					val:[0,2,3,4],					pts:[0,1000,2500,5000],					prize:["",["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","2X Dactyl Chain","3X Dactyl Chain","4X Dactyl Chain"],					ACH:0 									},								m12: { 									stat:"doomSurf", 					val:[0,500,1500,3000],					pts:[0,0,0,0],					prize:["",["TR_Bronze","GP_100"],["TR_Silver","GP_200", "MS_J"],["TR_Gold","GP_500"]],					nam:["","10 Second Doom SurF","30 Second Doom SurF","60 Second Doom SurF"],					ACH:0 									}							}											}				public function boot (TO:int) {						var d = new Date();			savedGames.data.lastBoot=Math.round(d.time/1000);			trace ("BOOTED AT "+savedGames.data.lastBoot)			savedGames.data.lastTO=TO;			flushSave();					}				public function initSaved(num) {									lastBoot = (savedGames.data.lastBoot!=undefined)?savedGames.data.lastBoot:0;			lastTO = (savedGames.data.lastTO!=undefined)?savedGames.data.lastTO:0;						//trace ("LAST BOOT "+lastBoot);						//banned?			//var d:Date = new Date();			//var t:Number = Math.round(d.time/1000);			//trace ("CURRENT "+t);			//trace ("lastTo "+lastTO);			//var hours:Number= (Math.abs(t-lastBoot))/(60*60);			//trace ("hours last "+hours);			//if (hours<lastTO) brain.sys.MP.banned=true;						savedGames.data.currentNum=gameNum=num;			var sData=savedGames.data["g"+gameNum];			brain.S.gold=false;			brain.interF.hats=[];			actMods=[];						nam=(sData.nam!=undefined)?sData.nam:"Dino1";			brain.S.dif=(sData.dif!=undefined)?sData.dif:"Medium";			brain.S.mod=(sData.mod=="MP")?"Challenge":sData.mod;			/*if (brain.S.mod == "PlanetD") {				brain.S.mod = "Challenge";				brain.S.mod=="PlanetD" = true;			} else {				brain.S.mod=="PlanetD" = false;			}*/			speedRuns=(sData.speedRuns!=undefined)?sData.speedRuns.slice():[];			//speedRuns=["A",4,"B",4,"C",4,"D",4,"E",4,"F",4,"G",4,"H",4,"I",4,"J",4,"K",4,"L",4,"M",4,"N",4,"O",4,"P",4,"Q",4,"R",4,"S",4,"T",4];//TEMP!			mods=(sData.mods!=undefined)?sData.mods.slice():[];			dls=(sData.dls!=undefined)?sData.dls.slice():[];			clr=(sData.clr!=undefined)?sData.clr:"A";			hat=(sData.hat!=undefined)?sData.hat:"xx";			lastPS=(sData.lastPS!=undefined)?sData.lastPS:0;			bestChallenge=(sData.bestChallenge!=undefined)?sData.bestChallenge:0;													SPD=(sData.SPD!=undefined)?sData.SPD:1;			ACL=(sData.ACL!=undefined)?sData.ACL:1;			JMP=(sData.JMP!=undefined)?sData.JMP:1;			STR=(sData.STR!=undefined)?sData.STR:1;			DNA=(sData.DNA!=undefined)?sData.DNA:0;			GP=(sData.GP!=undefined)?sData.GP:0;						eggsPL=(sData.eggsPL!=undefined)?sData.eggsPL:0;			superEggsPL=(sData.superEggsPL!=undefined)?sData.superEggsPL.slice():[];			superEggsPLNum=superEggsPL.length;						highScorePL=(sData.highScorePL!=undefined)?sData.highScorePL:0;			playerScore=(sData.playerScore!=undefined)?sData.playerScore:0;			dinosSaved=(sData.dinosSaved!=undefined)?sData.dinosSaved:0;			adjustDinoColors();						trophies = {								eggsPL:(sData.TR_eggsPL!=undefined)?sData.TR_eggsPL:"",				superEggsPLNum:(sData.TR_superEggsPLNum!=undefined)?sData.TR_superEggsPLNum:"",				eatLizPL:(sData.TR_eatLizPL!=undefined)?sData.TR_eatLizPL:"",				eatRunPL:(sData.TR_eatRunPL!=undefined)?sData.TR_eatRunPL:"",				eatBirPL:(sData.TR_eatBirPL!=undefined)?sData.TR_eatBirPL:"",				eatFisPL:(sData.TR_eatFisPL!=undefined)?sData.TR_eatFisPL:"",				eatWorPL:(sData.TR_eatWorPL!=undefined)?sData.TR_eatWorPL:"",				dinosSaved:(sData.TR_dinosSaved!=undefined)?sData.TR_dinosSaved:"",				boulderRide:(sData.TR_boulderRide!=undefined)?sData.TR_boulderRide:"",				dactylRides:(sData.TR_dactylRides!=undefined)?sData.TR_dactylRides:"",				doomSurf:(sData.TR_doomSurf!=undefined)?sData.TR_doomSurf:"",				buddyFound:(sData.TR_buddyFound!=undefined)?sData.TR_buddyFound:""										}									//remove old crap			/*delete sData.TR_eatLiz;			delete sData.TR_eatRun;			delete sData.TR_eatFis;			delete sData.TR_eatBir;			delete sData.TR_eatWor;			delete trophies.eatLiz;			delete trophies.eatRun;			delete trophies.eatFis;			delete trophies.eatBir;			delete trophies.eatWor;*/			muted=(sData.muted!=undefined)?sData.muted:false;			brain.sys.audio.muted=muted;			brain.S.showProg=(sData.showProg!=undefined)?sData.showProg:false;			brain.S.auto=(sData.auto!=undefined)?sData.auto:false;			screenBonus=(sData.screenBonus!=undefined)?sData.screenBonus.slice():[];			lvlsWon=(sData.lvlsWon!=undefined)?sData.lvlsWon.slice():[];									eatLizPL=(sData.eatLizPL!=undefined)?sData.eatLizPL:0;			eatBirPL=(sData.eatBirPL!=undefined)?sData.eatBirPL:0;			eatRunPL=(sData.eatRunPL!=undefined)?sData.eatRunPL:0;			eatWorPL=(sData.eatWorPL!=undefined)?sData.eatWorPL:0;			eatFisPL=(sData.eatFisPL!=undefined)?sData.eatFisPL:0;			eatTotal=(sData.eatTotal!=undefined)?sData.eatTotal:0;						/*MPeggs=(sData.MPeggs!=undefined)?sData.MPeggs:0;			MPracesWon=(sData.MPracesWon!=undefined)?sData.MPracesWon:0;			MPcrittersEaten=(sData.MPcrittersEaten!=undefined)?sData.MPcrittersEaten:0;			MPdoomSurf=(sData.MPdoomSurf!=undefined)?sData.MPdoomSurf:0;			MPboulderRide=(sData.MPboulderRide!=undefined)?sData.MPboulderRide:0;*/						boulderRide=(sData.boulderRide!=undefined)?sData.boulderRide:0;			dactylRides=(sData.dactylRides!=undefined)?sData.dactylRides:0;			doomSurf=(sData.doomSurf!=undefined)?sData.doomSurf:0;			var boof = (sData.boof!=undefined)?sData.boof:"flump";						//set milestones			for each (var ms in milestones) {								ms.ACH=0;				var stat=ms.stat;				do {					//ms.ACH++;					//break;					if (this[stat]>=ms.val[ms.ACH+1]) { 						ms.ACH++ 					} else { break }				} while (true);				//give trophy if not given before				for each (var prize:String in ms.prize[ms.ACH]) {											var prizeA:Array=prize.split("_");					if (prizeA[0]=="TR") { trophies[stat]=prizeA[1]+"_"+ms.nam[ms.ACH] }									}						}									//donator hats ENABLED FOR DELUXE			//if (bonus.indexOf("ht")!=-1) { brain.S.hats=true; brain.interF.hats.push ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","bb","cc","dd","ee","ff","gg","hh","ii") }			if (true) { brain.S.hats=true; initHats(); }			//destructoid			if (true) { brain.interF.hats.push ("jj") }			//crowns			if (mods.indexOf("bs")!=-1 || Brain.DEBUG) { brain.interF.hats.push ("kk") }			if (mods.indexOf("ss")!=-1 || Brain.DEBUG) { brain.interF.hats.push ("ll") }			if (mods.indexOf("gs")!=-1 || Brain.DEBUG) { brain.interF.hats.push ("mm") }						//challenge hats			if (mods.indexOf("pm")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("ww");			if (mods.indexOf("ph")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("nb");			if (mods.indexOf("pi")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("pb");						if (mods.indexOf("cm")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("lb");			if (mods.indexOf("ch")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("db");			if (mods.indexOf("ci")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("mb","kb");						//HH TODO			if (mods.indexOf("hm")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("hhc");//pumpkin			if (mods.indexOf("hh")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("hha");//witch hat			if (mods.indexOf("hi")!=-1 || Brain.DEBUG)				brain.interF.hats.push ("hhd");//black cat						//pj hats			if (trophies.buddyFound=="Gold_You Found Him!" || Brain.DEBUG)				brain.interF.hats.push ("jb","yy","zz","vv","jd");										//warrior helmets			checkTrophs();						//no hat space			if (brain.interF.hats.length>0) { brain.interF.hats.unshift ("xx") }			//trace (bonus,mods,hat,brain.interF.hats);						removeDuplicate(brain.interF.hats);										if (Config.SAVE_OVERRIDE) {				overrideSaveGame();			}								}				public function removeDuplicate(arr:Array) : void{			var i:int;			var j: int;			for (i = 0; i < arr.length - 1; i++){				for (j = i + 1; j < arr.length; j++){					if (arr[i] === arr[j]){						arr.splice(j, 1);					}				}			}		}				public function overrideSaveGame () {							savedGames.data.bonus=bonus.slice();				//savedGames.data.updateShown = Brain.updateShown;				savedGames.data.matchHat = matchHat;				savedGames.data.skip10 = skip10;								//acheevos				savedGames.data.submittedAchsSteam4 = submittedAchsSteam4.slice();								var sData=savedGames.data["g"+gameNum];								sData.nam=nam;				sData.dif=brain.S.dif;				sData.mod=brain.S.mod;								sData.SPD=SPD;				sData.ACL=ACL;				sData.JMP=JMP;				sData.STR=STR;				sData.DNA=SaveOverride.DNA;				sData.GP=SaveOverride.BONES;								sData.eggsPL=SaveOverride.EGGS;				sData.superEggsPL=SaveOverride.SUPER_EGGS.slice();				sData.superEggsPLNum=SaveOverride.SUPER_EGGS_NUM;								sData.highScorePL=highScorePL;				sData.playerScore=SaveOverride.PLAYER_SCORE;				sData.dinosSaved=SaveOverride.DINOS_SAVED;				sData.speedRuns=SaveOverride.SPEED_RUNS.slice();				sData.mods=SaveOverride.MODS.slice();				sData.dls=dls.slice();				sData.clr=clr;				sData.hat=hat;				sData.lastPS=lastPS;				sData.bestChallenge=bestChallenge;								sData.TR_eggsPL=trophies.eggsPL;				sData.TR_superEggsPLNum=trophies.superEggsPLNum;				sData.TR_eatLizPL=trophies.eatLizPL;				sData.TR_eatRunPL=trophies.eatRunPL;				sData.TR_eatWorPL=trophies.eatWorPL;				sData.TR_eatFisPL=trophies.eatFisPL;				sData.TR_eatBirPL=trophies.eatBirPL;				sData.TR_dinosSaved=trophies.dinosSaved;				sData.TR_boulderRide=trophies.boulderRide;				sData.TR_dactylRides=trophies.dactylRides;				sData.TR_doomSurf=trophies.doomSurf;				sData.TR_buddyFound=trophies.buddyFound;								sData.muted=brain.sys.audio.muted;				sData.showProg=brain.S.showProg;				sData.auto=brain.S.auto;				sData.screenBonus=screenBonus.slice();				sData.lvlsWon=lvlsWon.slice();								sData.eatLizPL=SaveOverride.LIZARDS;				sData.eatBirPL=SaveOverride.BIRDS;				sData.eatRunPL=SaveOverride.RUNNERS;				sData.eatWorPL=SaveOverride.WORMS;				sData.eatFisPL=SaveOverride.FISH;				sData.eatTotal=eatTotal;								/*sData.MPeggs=MPeggs;				sData.MPracesWon=MPracesWon;				sData.MPcrittersEaten=MPcrittersEaten;				sData.MPdoomSurf=MPdoomSurf;				sData.MPboulderRide=MPboulderRide;*/								sData.boulderRide=SaveOverride.BOULDER_RIDE;				sData.dactylRides=SaveOverride.DACTYL_RIDE;				sData.doomSurf=SaveOverride.DOOMSURF;								//checkMS();												savedGames.data.fullscreen = brain.fullScreen;								flushSave();									}				public function saveGame () {						if (!MP) {								//control hats x				if (brain.interF.hats.length>0) { if (brain.interF.hats.indexOf("xx")==-1) { brain.interF.hats.unshift("xx") } }								savedGames.data.bonus=bonus.slice();				//savedGames.data.updateShown = Brain.updateShown;				savedGames.data.matchHat = matchHat;				savedGames.data.skip10 = skip10;								//acheevos				savedGames.data.submittedAchsSteam4 = submittedAchsSteam4.slice();								var sData=savedGames.data["g"+gameNum];				sData.nam=nam;				sData.dif=brain.S.dif;				sData.mod=brain.S.mod;								sData.SPD=SPD;				sData.ACL=ACL;				sData.JMP=JMP;				sData.STR=STR;				sData.DNA=DNA;				sData.GP=GP;												sData.eggsPL=eggsPL;				sData.superEggsPL=superEggsPL.slice();				sData.superEggsPLNum=superEggsPLNum;								sData.highScorePL=highScorePL;				sData.playerScore=playerScore;				sData.dinosSaved=dinosSaved;				sData.speedRuns=speedRuns.slice();				sData.mods=mods.slice();				sData.dls=dls.slice();				sData.clr=clr;				sData.hat=hat;				sData.lastPS=lastPS;				sData.bestChallenge=bestChallenge;								sData.TR_eggsPL=trophies.eggsPL;				sData.TR_superEggsPLNum=trophies.superEggsPLNum;				sData.TR_eatLizPL=trophies.eatLizPL;				sData.TR_eatRunPL=trophies.eatRunPL;				sData.TR_eatWorPL=trophies.eatWorPL;				sData.TR_eatFisPL=trophies.eatFisPL;				sData.TR_eatBirPL=trophies.eatBirPL;				sData.TR_dinosSaved=trophies.dinosSaved;				sData.TR_boulderRide=trophies.boulderRide;				sData.TR_dactylRides=trophies.dactylRides;				sData.TR_doomSurf=trophies.doomSurf;				sData.TR_buddyFound=trophies.buddyFound;												sData.muted=brain.sys.audio.muted;				sData.showProg=brain.S.showProg;				sData.auto=brain.S.auto;				sData.screenBonus=screenBonus.slice();				sData.lvlsWon=lvlsWon.slice();								sData.eatLizPL=eatLizPL;				sData.eatBirPL=eatBirPL;				sData.eatRunPL=eatRunPL;				sData.eatWorPL=eatWorPL;				sData.eatFisPL=eatFisPL;				sData.eatTotal=eatTotal;								/*sData.MPeggs=MPeggs;				sData.MPracesWon=MPracesWon;				sData.MPcrittersEaten=MPcrittersEaten;				sData.MPdoomSurf=MPdoomSurf;				sData.MPboulderRide=MPboulderRide;*/								sData.boulderRide=boulderRide;				sData.dactylRides=dactylRides;				sData.doomSurf=doomSurf;								savedGames.data.fullscreen = brain.fullScreen;								flushSave();							}					}				public function flushSave () {						try { savedGames.flush() } catch (e:Error) {}											/*brain.interF.showInterX ("NoSave");							}*/						}				public function flushSaveBackup () {						try { savedGames.flushBackup() } catch (e:Error) {}					}						public function newGame (difNum) {						//continues			MP=false;			cont=conts[difNum];			if (brain.S.mod=="SpeedRun") { cont=0 }			eggConts = [30,75,150,300,500];			addP=true;						//reset vars			superEggsGame=superEggsTotalGame=eggsGame=score=cd=dcLvl=brLvl=dsLvl=0;					}				public function newMPGame () {						//reset vars			MP=true;			cont=MPeggs2=0;			eggConts = [100000000];			superEggsGame=superEggsTotalGame=eggsGame=score=0;						MPeggsGame=0;							MPcrittersEatenGame=0;				MPdoomSurfGame=0;						MPboulderRideGame=0;							}						public function newLevel () {						eggs=superEggs=superEggsTotal=0;//eggsTotal			eatLiz=eatBir=eatRun=eatWor=eatFis=0;			superEggsLVL=[];			DNALVL=GPLVL=0;			lvlMS=[];					}				public function addCD () {						cd+=(Math.round((par-brain.c)/400));					}				public function endLevel () {						trace ("ENDLEVEL")			addCD();									//eggs			eggsGame+=eggs;			superEggsGame+=superEggs;			superEggsTotalGame+=superEggsTotal;						if (!brain.S.cheat) {								//tricks				if (dcLvl>dactylRides) { dactylRides=dcLvl }				if (dsLvl>doomSurf) { doomSurf=dsLvl }				if (brLvl>boulderRide) { boulderRide=brLvl }								//dude				if (dudeGame) { 					if (trophies.buddyFound!="Gold_You Found Him!") {						brain.interF.hats.push ("jb","yy","zz","vv","jd");						lvlMS.push(["You Found Him!","New Pixeljam Hats Unlocked",[]]);						trophies.buddyFound="Gold_You Found Him!";					}				}								//save new player stats				var oldEggs:int=eggsPL;				eggsPL+=eggs;				boostDNA (oldEggs,eggsPL);								//super eggs				for each(var se:Array in superEggsLVL) {										if (superEggsPL.indexOf(se[0])==-1) {												superEggsPL.push (se[0]);						addPLScore (se[1]);						//addScore (se[1]);						DNALVL+=superEggPTS[se[0]][0];						GPLVL+=superEggPTS[se[0]][1];												//milestone						lvlMS.push(new Array(se[2]+" Saved","+"+se[1]+" Player Score, +"+superEggPTS[se[0]][0]+" DNA, +"+superEggPTS[se[0]][1]+" Bones",[]));											}									}				superEggsPLNum=superEggsPL.length;								var oldTotal:int=eatTotal;				eatLizPL+=eatLiz;				eatBirPL+=eatBir;				eatRunPL+=eatRun;				eatWorPL+=eatWor;				eatFisPL+=eatFis;				eatTotal+=(eatLiz+eatBir+eatRun+eatWor+eatFis);				boostDNA(oldTotal,eatTotal)																//adjust player score				playerScore-=highScorePL;							if (score>highScorePL) { highScorePL=score }				playerScore+=highScorePL;								trace ("PL",playerScore,score,highScorePL);																//check milestones				checkMS();								//check trophs				checkTrophs();					}						//save game			saveGame();					}				public function checkTrophs() {						//also check super eggs			if (superEggsPLNum==10) {								if (brain.interF.hats.indexOf("bc") == -1)					brain.interF.hats.push ("bc");								if (trophies.superEggsPLNum=="") {					trophies.superEggsPLNum="Gold_All Super Eggs Saved!"					lvlMS.push(["All Super Eggs Found!","Chief Headdress, +100000 Player Score",[]]);					addPLScore (100000);				}			}						if (!brain.S.gold) {								var trophs:Array = ["eggsPL","superEggsPLNum","eatRunPL","eatLizPL","eatFisPL","eatBirPL","eatWorPL","dinosSaved","dactylRides","boulderRide","doomSurf","buddyFound"];								//all bronze trophies?				var bronzeCount:int=0;				for each (var tr in trophs) { if (trophies[tr].substr(0,4)=="Bronze"||trophies[tr].substr(0,4)=="DNA3") { bronzeCount++ } }				if (bronzeCount>=10) {										brain.S.bronze=true;					brain.interF.hats.push ("wb","xb","yb");										if (mods.indexOf("bt")==-1) {												mods.push ("bt");						lvlMS.push(["All Bronze Trophies!","Schtroumpf Masks, +50000 Player Score",[]]);						dinoSaved ();						addPLScore (50000);											}									}								//all silver trophies?				var silverCount:int=0;				for each (var tr in trophs) { if (trophies[tr].substr(0,4)=="Silver"||trophies[tr].substr(0,4)=="DNA4") { silverCount++ } }				if (silverCount>=10) {										brain.S.silver=true;					brain.interF.hats.push ("mc");					brain.S.bronze=true;					brain.interF.hats.push ("wb","xb","yb");										if (mods.indexOf("st")==-1) {												mods.push ("st");						lvlMS.push(["All Silver Trophies!","Death Head helmet, +100000 Player Score",[]]);						dinoSaved ();						addPLScore (100000);											}											}								//all gold trophies?				var goldCount:int=0;				for each (var tr in trophs) { if (trophies[tr].substr(0,4)=="Gold"||trophies[tr].substr(0,4)=="DNA5") { goldCount++ } }				if (goldCount>=12) {															brain.S.gold=true;					brain.interF.hats.push ("nn");					brain.interF.hats.push ("tt");					brain.S.silver=true;					brain.interF.hats.push ("mc");					brain.S.bronze=true;					brain.interF.hats.push ("wb","xb","yb");										if (mods.indexOf("gt")==-1) {												mods.push ("gt");						lvlMS.push(["All Gold Trophies!","Warrior Helmets, +250000 Player Score",[]]);						dinoSaved ();						addPLScore (250000);											}									}							}						flash.utils.setTimeout(checkAchs,1000);			}				public function checkSubmittedAch(achID:String):void		{			Brain.log ("check "+achID);			if (submittedAchsSteam4.indexOf(achID) == -1 ) {				Brain.log ("was not submitted");				if (Brain.GSSubmitAch(achID,100)) {					submittedAchsSteam4.push(achID);					Brain.log (1);				} else {					Brain.log (0);				}			}						//retroactives			if (achID == "allGold") { checkSubmittedAch("allSilver"); return };			if (achID == "allSilver") {checkSubmittedAch("allBronze"); return };						if (achID == "boulderRide_Gold") { checkSubmittedAch("boulderRide_Silver"); return };			if (achID == "boulderRide_Silver") { checkSubmittedAch("boulderRide_Bronze"); return };						if (achID == "dactylRides_Gold") { checkSubmittedAch("dactylRides_Silver"); return };			if (achID == "dactylRides_Silver") { checkSubmittedAch("dactylRides_Bronze"); return };						if (achID == "doomSurf_Gold") { checkSubmittedAch("doomSurf_Silver"); return };			if (achID == "doomSurf_Silver") { checkSubmittedAch("doomSurf_Bronze"); return };						if (achID == "eggsPL_Gold") { checkSubmittedAch("eggsPL_Silver"); return };			if (achID == "eggsPL_Silver") { checkSubmittedAch("eggsPL_Bronze"); return };						if (achID == "eatLizPL_Gold") { checkSubmittedAch("eatLizPL_Silver"); return };			if (achID == "eatLizPL_Silver") { checkSubmittedAch("eatLizPL_Bronze"); return };						if (achID == "eatBirPL_Gold") { checkSubmittedAch("eatBirPL_Silver"); return };			if (achID == "eatBirPL_Silver") { checkSubmittedAch("eatBirPL_Bronze"); return };						if (achID == "eatRunPL_Gold") { checkSubmittedAch("eatRunPL_Silver"); return };			if (achID == "eatRunPL_Silver") { checkSubmittedAch("eatRunPL_Bronze"); return };						if (achID == "eatWorPL_Gold") { checkSubmittedAch("eatWorPL_Silver"); return };			if (achID == "eatWorPL_Silver") { checkSubmittedAch("eatWorPL_Bronze"); return };						if (achID == "eatFisPL_Gold") { checkSubmittedAch("eatFisPL_Silver"); return };			if (achID == "eatFisPL_Silver") { checkSubmittedAch("eatFisPL_Bronze"); return };						if (achID == "dinosSaved_DNA5") { checkSubmittedAch("dinosSaved_DNA4"); return };			if (achID == "dinosSaved_DNA4") { checkSubmittedAch("dinosSaved_DNA3"); return };			if (achID == "dinosSaved_DNA3") { checkSubmittedAch("dinosSaved_DNA2"); return };			if (achID == "dinosSaved_DNA2") { checkSubmittedAch("dinosSaved_DNA1"); return };		}							public function checkAchs():void {			Brain.log ("//////////////// acheevos");			for (var id:String in trophies) {				var val:String = trophies[id];				if (val != "") {					var achID:String = id+"_"+val.split("_")[0];					checkSubmittedAch(achID);				}			}						//now check brain.S.gold / silver / bronze			if (brain.S.bronze) {				checkSubmittedAch("allBronze");			}			if (brain.S.silver) {				checkSubmittedAch("allSilver");			}			if (brain.S.gold) {				checkSubmittedAch("allGold");			}						//and... check speedruns			if (mods.indexOf("bs")!=-1) {				checkSubmittedAch("speedrunBronze");			}			if (mods.indexOf("ss")!=-1) {				checkSubmittedAch("speedrunSilver");			}			if (mods.indexOf("gs")!=-1) {				checkSubmittedAch("speedrunGold");			}						//and...  check planet d			if (mods.indexOf("pm")!=-1) {				checkSubmittedAch("planetDMedium");			}			if (mods.indexOf("ph")!=-1) {				checkSubmittedAch("planetDHard");			}			if (mods.indexOf("pi")!=-1) {				checkSubmittedAch("planetDInsane");  			}						//and...  check challenge			if (mods.indexOf("cm")!=-1) {				checkSubmittedAch("challengeMedium");			}			if (mods.indexOf("ch")!=-1) {				checkSubmittedAch("challengeHard");			}			if (mods.indexOf("ci")!=-1) {				checkSubmittedAch("challengeInsane");			}						//and...  check halloween			//HH TODO			if (mods.indexOf("hm")!=-1) {				checkSubmittedAch("HHMedium");			}			if (mods.indexOf("hh")!=-1) {				checkSubmittedAch("HHHard");			}			if (mods.indexOf("hi")!=-1) {				checkSubmittedAch("HHInsane");			}					}								private function boostDNA (v1,v2) {						var factor:int=12-(brain.S.difNum*2);			for ( var i:int=v1; i<=v2; i++) { if (Math.round(i/factor)==i/factor) { DNA++;  } }			if (v1==0) { DNA-- }					}				public function checkMS () {						trace ("checkMS")			for each (var ms in milestones) {								var stat=ms.stat;				var targVal=ms.val[ms.ACH+1];				if (this[stat]>=targVal) {										/*					m11: { 										stat:"dactylRides", 					val:[0,2,3,4],					pts:[0,1000,2500,5000],					prize:["",["TR_Bronze","GP_100"],["TR_Silver","GP_200"],["TR_Gold","GP_300"]],					nam:["","2X Dactyl Chain","3X Dactyl Chain","4X Dactyl Chain"],					ACH:0 										},*/										//milestone acheived!					var achAdd:int=1;					if (this[stat]>=ms.val[ms.ACH+2]) { achAdd=2 };					if (this[stat]>=ms.val[ms.ACH+3]) { achAdd=3 };					ms.ACH+=achAdd;					var MSInfo:Array = new Array(ms.nam[ms.ACH],[],[])					//addScore (ms.pts[ms.ACH]);					addPLScore (ms.pts[ms.ACH]);					if (ms.pts[ms.ACH]!=0) { MSInfo[1].push("+"+ms.pts[ms.ACH]+" Player Score ") }					for each (var prize:String in ms.prize[ms.ACH]) {												var prizeA:Array=prize.split("_");						switch (prizeA[0]) {														case "DNA":							DNALVL+=Number(prizeA[1]);							MSInfo[1].push(" +"+Number(prizeA[1])+" DNA");							break;														case "GP":							GPLVL+=Number(prizeA[1]);							MSInfo[1].push(" +"+Number(prizeA[1])+" Bones");							break;														case "TR":							trophies[stat]=prizeA[1]+"_"+ms.nam[ms.ACH];							MSInfo[2].push(stat+"_"+prizeA[1]);							//brain.awardTrophy (stat+"_"+prizeA[1]);							break;														case "MS":							screenBonus.push(prizeA[1]);							break;													}											}										lvlMS.push(MSInfo);									}						}						DNA+=DNALVL;			GP+=GPLVL;						//show MS?			if (lvlMS.length!=0&&(brain.gState!="win"||brain.S.mod=="SpeedRun")) { brain.interF.showMS() } else { checkUpgrade() }					}						public function checkUpgrade () {			var lowCost:Array=[];			var abs:Array = ["STR","SPD","ACL","JMP"];			for each (var ab in abs) { lowCost.push ((this[ab]!=5)?costs[ab+(this[ab]+1)]:100000) }			lowCost.sort (Array.NUMERIC);			if (DNA>lowCost[0]&&brain.gState!="win") { brain.interF.upgrade() } else if (brain.interF.graphic.msg2!=null) { brain.interF.graphic.msg2.visible=true; brain.resetFocus(); }					}										private function unlockSpeedRun(ID) {											}		public function addEgg (d) {						if (MP && brain.gState != "extinct") {								MPeggs2++;				if (Math.round(MPeggs2/10)==(MPeggs2/10)) { brain.sys.MP.Self.score++; eggVal=1 } else { eggVal="" }								MPeggsGame++;							} else if (addP && brain.gState != "extinct") {							eggs+=(d?10:1);				if (eggTimer==0) { eggVal=(d?500:(brain.S.pk?50:20)); eggTimer=40 } else { eggVal*=2; if (eggVal>500) { eggVal=500 } }				addScore (eggVal);				brain.interF.interX.eggsBones.gotoAndPlay ("eggs");				brain.interF.initEggs1();								//add continue?				if (eggsGame+eggs>=eggConts[0]&&brain.S.mod!="SpeedRun") {										cont++;					eggConts.shift();					brain.interF.showMessage ((eggsGame+eggs)+" Eggs: Extra Time ShiFt Earned!");									}							}					}				public function addBones (num) {						if (!MP && addP && brain.gState != "extinct") {							GPLVL+=num;				brain.interF.interX.eggsBones.gotoAndPlay ("bones");				brain.interF.initBones1();											}					}							public function addSuperEgg (typ, score, txt) {						if (MP) {				brain.sys.MP.Self.score+=(4+Math.round(brain.interF.newRace.lvl/3));							} else {							superEggs++;				superEggsLVL.push ([typ,score,txt]);				//addScore (score);							}			brain.interF.showMessage (txt+" Saved!");					}				public function addFood (typ,score) {						if (!MP&&addP) {							if (typ!="Stego"&&typ!="Cera"&&typ!="Para") { this["eat"+typ.substring(0,3)]++ }				if (foodTimer[typ]==undefined) { foodVal=score; foodTimer[typ]=50 } else { foodVal*=2; if (foodVal>1000) { foodVal=1000 } }				addScore (foodVal);				addBones (1);							}						if (MP) { MPcrittersEatenGame++ }					}				public function addScore (num) {						if (!MP) { score+=num }					}				public function addPLScore (num) {						trace ("PL add",num);			if (!MP&&!brain.S.cheat) { playerScore+=num }					}				public function win () {						if (!brain.S.cheat) {				if (brain.S.mod=="PlanetD") {					switch (brain.S.difNum) {						case 1: break;						case 2:							if (mods.indexOf("pm")==-1) {								mods.push ("pm");								lvlMS.push(["Medium PlanetD Completed","Lion Head Unlocked",[]]);								brain.interF.hats.push ("ww");								saveGame();								//hat="ww";							}							break;						case 3:							if (mods.indexOf("ph")==-1) {								mods.push ("ph");								lvlMS.push(["Hard PlanetD Completed","Luke's Father Head Unlocked",[]]);								brain.interF.hats.push ("nb");								saveGame();								//hat="nb";							}							break;						case 4:							if (mods.indexOf("pi")==-1) {								mods.push ("pi");								lvlMS.push(["Insane PlanetD Completed","Queenomorph Head Unlocked",[]]);								brain.interF.hats.push ("pb");								saveGame();								//hat="pb";							}							break;					}										} else if (brain.S.mod=="Challenge") {					switch (brain.S.difNum) {						case 1: break;						case 2:							if (mods.indexOf("cm")==-1) {								mods.push ("cm");								lvlMS.push(["Medium Challenge Completed","Speedy Head Unlocked",[]]);								brain.interF.hats.push ("lb");								saveGame();									//hat="lb";							}							break;						case 3:							if (mods.indexOf("ch")==-1) {								mods.push ("ch");								lvlMS.push(["Hard Challenge Completed","Poison Spider Head Unlocked",[]]);								brain.interF.hats.push ("db");								saveGame();								//hat="db";							}							break;						case 4:							if (mods.indexOf("ci")==-1) {								mods.push ("ci");								lvlMS.push(["Insane Challenge Completed","Yellow Muncher Heads Unlocked",[]]);								brain.interF.hats.push ("mb","kb");								saveGame();									//hat="xx";							}							break;					}				} else if (brain.S.mod=="Halloween") {					switch (brain.S.difNum) {						case 1: break;						case 2:							if (mods.indexOf("hm")==-1) {								mods.push ("hm");								lvlMS.push(["Medium Halloween Completed","Glowing Pumpkin Head Unlocked",[]]);								brain.interF.hats.push ("hhc");								saveGame();								//hat="lb";							}							break;						case 3:							if (mods.indexOf("hh")==-1) {								mods.push ("hh");								lvlMS.push(["Hard Halloween Completed","Witch Hat #2 Unlocked",[]]);								brain.interF.hats.push ("hha");								saveGame();								//hat="db";							}							break;						case 4:							if (mods.indexOf("hi")==-1) {								mods.push ("hi");								lvlMS.push(["Insane Halloween Completed","Black Cat Head Unlocked",[]]);								brain.interF.hats.push ("hhd");								saveGame();								//hat="xx";							}							break;											}				}							if (brain.S.mod=="SpeedRun") {										var indx:int=speedRuns.indexOf(brain.S.lvl);					var sid:int=brain.S.difNum;					if (speedRuns[indx+1]<sid||sid==4) { dinoSaved(); speedRuns.splice (indx+1,1,sid) }										//check for speedrun bonuses					var unlockedSR:Array=speedRuns.slice();					if (unlockedSR.indexOf("U") != -1)						unlockedSR.splice(unlockedSR.indexOf("U"),1);					//if (speedRuns.length>=(srs2.length*2)) {					var thresh:int = Config.WEB? 17 : 23;					if (unlockedSR.length >= thresh*2) {//TOTAL SPEEDRUNS CHECK																		var srlv:int=1;						for (var lv:int=2; lv<5; lv++) {														var pass:Boolean=true;							for (var i=1; i<speedRuns.length; i+=2) { trace (speedRuns[i-1],speedRuns[i],lv); if (speedRuns[i]<lv) { pass=false; break } }							if (pass) { srlv=lv }													}																		switch (srlv) {														case 2:							if (mods.indexOf("bs")==-1) {																mods.push ("bs");								brain.interF.hats.push ("kk");								hat="kk";								saveGame();								lvlMS.push(["All Medium SpeedRuns","Bronze Crown, +100000 Player Score",[]]);								addPLScore (100000);															}							break;														case 3: 							if (mods.indexOf("ss")==-1) {																mods.push ("ss");								if (mods.indexOf("bs")==-1) {									mods.push ("bs");									brain.interF.hats.push ("kk");								}								brain.interF.hats.push ("ll");								hat="ll";								saveGame();								lvlMS.push(["All Hard SpeedRuns","Silver Crown, +250000 Player Score",[]]);								addPLScore (250000);															}							break;														case 4: 							if (mods.indexOf("gs")==-1) {																mods.push ("gs");								if (mods.indexOf("bs")==-1) {									mods.push ("bs");									brain.interF.hats.push ("kk");								}								if (mods.indexOf("ss")==-1) {									mods.push ("ss");									brain.interF.hats.push ("ll");								}								brain.interF.hats.push ("mm");								hat="mm";								saveGame();								lvlMS.push(["All Insane SpeedRuns!","Gold Crown, +500000 Player Score",[]]);								addPLScore (500000);															}							break;													}											}									} else if (!MP) {										if (brain.S.mod=="Challenge"&&brain.VAR=="KG") { 											if (bestChallenge<brain.S.difNum) { bestChallenge=brain.S.difNum }											}					dinoSaved();									}								//checkAchs();						}																		  		}				public function overrideGS():void		{			if (mods.indexOf("gs")==-1) {				mods.push ("gs");				addPLScore (500000);				if (mods.indexOf("bs")==-1) {					mods.push ("bs");					brain.interF.hats.push ("kk");				}				if (mods.indexOf("ss")==-1) {					mods.push ("ss");					brain.interF.hats.push ("ll");				}				brain.interF.hats.push ("mm");				hat="mm";				saveGame();			}		}				public function updateMP(raceWon) {						if (raceWon) { MPracesWon++ }						MPeggs+=MPeggsGame;			MPcrittersEaten+=MPcrittersEatenGame;						if (MPdoomSurfGame>MPdoomSurf) { MPdoomSurf=MPdoomSurfGame }			if (MPboulderRideGame>MPboulderRide) { MPboulderRide=MPboulderRideGame }						}				public function dinoSaved () {						dinosSaved++;			adjustDinoColors();			if (!brain.S.hats) { clr=dinoColors[dinoColors.length-1] }					}				public function main () {						//combo multipliers			if (eggTimer>0) { eggTimer-- }						for (var typ in foodTimer) {								foodTimer[typ]--;				if (foodTimer[typ]==0) { delete foodTimer[typ] }							}					}				public function remove() {}	}	}