package supers {		import flash.display.MovieClip;	import flash.geom.Point;		import base.Brain;		import gfx.DinoClip;
		public class Clip extends DinoClip {				public var pos:Point;   			// position		public var o:Object;   	   	 		// data object		public var ph:Object;				// physics data		public var brain:Brain; 			// ref to brain		public var roomA:Array;				// current room array		public var roomID:String;			// current room		public var inter:Boolean			// currently interactive?		public var sys:Object;				// external systems		public var master:Object;			// ref to top level master class (runner, boulder, etc)		public var hasExtra:Boolean=false;	// contains extra objects (feelers, etc);		public var ride:Boolean=false;		public var big:Boolean=false; 		//circle check (for big circles)		public var NN:Boolean=false;		//near near var?		public var body:MovieClip;				public var bounced:Boolean = false;		public var soft:Boolean = false;				// shortcuts		public var rnd;		private var randm;				//////////////////////////////////////////////////		//////////////////////////////////////////////////				// constructor		public function Clip () {						// init shortcuts			rnd = Math.round;			randm = Math.random;					}				//////////////////////////////////////////////////		//////////////////////////////////////////////////				// initialize		public function init(obj,br,ms):void {						//init vars			o = obj;			sys = {};			inter=true;			brain = br;			master=ms;			if (graphic)				if (graphic.body)					body = graphic.body;						//position			pos = new Point (o.px,o.py);			x=pos.x;			y=pos.y;						//current room			roomA = new Array (Math.ceil(o.px/brain.sDim.w),Math.ceil(o.py/brain.sDim.h));			roomID = "r"+roomA[0]+"_"+roomA[1];						//physics data			ph = {								w : width,				h : height,				r : width/2							}					}				// delete this object reference in the brain lib   	    public function deleteObj():void {						o.ex=false;			inter=false;			if (hasExtra) { master.removeExtras() }			for each (var s in sys) { s.remove() }			brain.deleteObj(this);								}				public function nulls() {						pos=null;			roomA=null;			for (var p in ph) { delete ph[p] }			ph=null;			sys=null;			brain=null;			master=null;			if (!o.rData&&!o.addToRD)  { for (var oo in o) { delete o[oo] } }			o=null;					}		// remove the clip from the display list		public function deleteClip():void {						//brain.deleteClip(this);		}				// add the clip to the display list		public function addClip():void {						brain.addClip(this);		}				// remove the roomData that contains this object		public function deleteData():void {						brain.deleteData(roomID,o.id);					}				// delete all		public function deleteAll() {						//brain.deleteClip(this);			//trace (this,o.rData,roomID,o.id)			if (o.rData) { brain.deleteData(roomID,o.id) }			deleteObj();					}				// this item's room has been deleted		public function roomDeleted():void {						//deleteClip();			deleteObj();					}				public function roomAdded ():void {}				//final actions		public function finalActions():void {}				public var gt:Boolean = false;		public function ghostTouched():void		{			gt = true;		}						//functions common to all Clips		//external systems		public function mainC () {			if (gt) {				alpha-=.01;				if (alpha < 0) {					deleteAll();				}			}						for each (var s in sys) {								s.main();							}					}				//remove a system		public function removeSYS (nam) {						delete sys[nam];					}				////////////////////////////////////////////////////////////				// give a rounded random number		public function rand(min:int, max:int):int {						return (rnd(randm()*(max-min))+min);					}		// give an unrounded random number		public function rand2(min:Number, max:Number):Number {						return (rnd(((randm()*(max-min))+min)*100))/100;					}			}			}