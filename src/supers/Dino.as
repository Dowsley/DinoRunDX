package supers {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.text.TextField;	import flash.utils.Timer;		import fx.ColorFlash;	import fx.FeetSpark;	import fx.HotFoot;	import fx.NoRide;	import fx.Skid;	import fx.SpeedBoost;	import fx.Squash;	import fx.Squash2;	import fx.Strength;	import fx.Stun;	import fx.StunHot;	import fx.SuperJump;		import gfx.Raptor;		import supers.MovingClip;
		public class Dino extends MovingClip {				public var keys:Object;		//		public var accelL:Number=-.2;		public var accelR:Number=.2;		public var accelMax:Number;		public var accelMaxBase:Number;		public var accelMaxOrig:Number;		public var accelF:Number;		public var accelFBase:Number;		public var accelFOrig:Number;		public var ang:Number=0;		public var jumpPowOrig:Number;		public var jumpPow:Number;		public var rVel:Point;		public var riding=null;		private var rName:String="";		public var slow:Boolean=false;		public var swiping:Boolean=false;		private var ugs:Array = ["spD7_3","spD8_3","spD6_4","spD7_4","spD5_5","spD6_5","spD4_6","spD5_6","spJ4_3","spJ5_3","spJ6_3","spJ4_4","spJ5_4","spJ6_4","spJ7_4","spJ8_4","spJ10_4",								 "spJ2_5","spJ3_5","spJ4_5","spJ5_5","spJ6_5","spJ7_5","spJ8_5","spJ9_5","spJ10_5","spJ11_5","spJ4_6","spJ5_6","spJ6_6","spJ7_6","spJ9_6","spJ10_6","spJ11_6",								 "spN16_3","spN17_3","spN7_4","spN8_4","spN9_4","spN13_4","spN14_4","spN15_4","spN16_4","spN5_5","spN6_5","spN7_5","spN8_5","spN9_5","spN10_5","spN11_5",								 "spN12_5","spN13_5","spN14_5","spN15_5","spN16_5","spN17_5","spN18_5","spN19_5","spL1_2","spL2_2","spL3_2","spL4_2","spX2_2","spX3_2",								 "spS4_1","spS5_1","spS3_2","spS4_2","spS5_2","spS2_3","spS3_3","spT3_2",								 "spCC4_2","spCC2_3","spCC3_3","spCC4_3","spCC5_3","spDD3_1","spDD2_2","spDD3_2","spDD4_2",								 "spEE6_2","spEE7_2","spEE8_2","spEE5_4B","spEE9_4B","spEE6_4B","spEE7_4B","spEE8_4B","spEE10_4",								 "spEE4_5","spEE4_5B","spEE5_5B","spEE5_5","spEE6_5","spEE6_5B","spEE7_5B","spEE7_5","spEE8_5B","spEE8_5","spEE9_5B","spEE9_5","spEE8_6B","spEE9_6B","spEE10_6B","spEE11_6B","spEE12_6B",								 "spXC1_1","spXC1_1B","spXC2_1","spXC1_2","spXC2_2","spXC2_3","spXC3_3","spXC3_4",								 "spXB1_3","spXB2_3"];				public var ug:Boolean=false;		public var screen:String;		var d1:Boolean=false;		var d2:Boolean=false;		var slowC:int=0;				public var par:int=0;		public var lastC:int=0;		//public var adP:Number=1;	//adrenaline rush percent		public var adren:int;		public var brc:int=0;		//boulder ride counter		public var bri:Boolean=false;//boulder ride init		public var brx:int;			//boulder ride start x		public var str:Boolean=false;		public var end:Boolean=false;		public var dch:int=0;		public var oNearG:Boolean=false;		public var hitG:Boolean=false;		public var oHitG:Boolean=false;				//MP		private var MP:Object;		private var bc:Boolean=false;		public var fps:Array=[];		public var fpsID:Array=[];		private var bTimer:Timer;		private var rmk:Array=["D","L","R","J","S","E1","E2","E3"]		private var keyHist:Array=[];		private var keyHistR:Array=["00000"];		private var keyAVG:String="000000";		public var aPos:Point;		private var sv:Number=10;		var fpsC:int;						// appearance		private var specialApps:Array = ["dckD", "dckU", "skid","fire", "squa", "land"]		public var dir:String; 		public var oDir:String;		public var app:String="";		public var baseApp:String;		public var gait:String;		public var oApp:String;		public var oGait:String;		private var deg:Number=180/Math.PI;		private var dirA:int=1;		public var mov:Boolean=true;		private var feeler:Object;		public var ridePara:Boolean=false;		private var vel2:Point;						override public function init (o,br,ms):void {						//set type and clip			o.typ="Dino";						//init from MovingClip			super.init (o,br,ms);			NN=true;						//misc			keys={oD:false,oJ:false};			rVel=new Point (0,0);			adren=1000;						//MP info			if (o.MP) {								MP=brain.sys.MP;				noMov();				if (!o.remote) {										bc=true;					bTimer = new Timer (50,0);					bTimer.addEventListener(TimerEvent.TIMER, sendMPInfo,false,0,true);					bTimer.start();									} else {										aPos = pos.clone();									}							}						//colors			master.body.clr=o.clr						//initial physics properties			ph.sh = "circ"		//shape			vel2=new Point (0,0);						//rampage?			if (brain.S.RM)				strength (10000000000);					}				override public function nulls () {						super.nulls();						rVel=null;			vel2=null;			ugs=null;			bTimer=null;			feeler=null;			master=null;			keys=null;			ugs=null;			fps=null;					}				public function removeList () {						if (o.MP&&!o.remote) {								bTimer.stop();				bTimer.removeEventListener(TimerEvent.TIMER, sendMPInfo);							}					}				//MP funcs		public function addFPS (id,r,ours) {						trace ("///////ADDFPS",r,ours);			trace (fps,MP.Players.length)						if (ours) { fps.unshift(r) } else if (fpsID.indexOf(id)==-1&&brain.S.curP.indexOf(id)!=-1) { fps.push (r); fpsID.push (id) }			if (fps.length>=MP.Players.length) {								//our fps				var ourFPS:Number=fps[0];				//highest fps				fps.sort (Array.NUMERIC | Array.DESCENDING);				var highFPS:Number=fps[0];				//average fps				var avFPS:Number=0;				for each (var f:Number in fps) {avFPS+=f}				avFPS/=fps.length;				//apply handicap to all dinos on our end				brain.hc=avFPS/ourFPS;				trace ("///////////////////////HC",brain.hc);				if (brain.hc>2.25) { slowC++; if (slowC>2) { brain.slow=true; brain.keyU_R() } } else { slowC=0 }				fps=[];				fpsID=[];			}					}				public function raptorHit (rap) {						var pn:Boolean=(app.substring(0,4)=="poun")?true:false;			var rpn:Boolean=(rap.app.substring(0,4)=="poun")?true:false;						if (pn) {								if (rpn) {										if (x<rap.x) { rap.stunned(vel) } else { stunned(rap.vel) }									} else { rap.stunned(vel) }							} else {				if (rpn) { stunned(rap.vel) }							}					}				public function stunned (v) {						if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,1,1,1],[0,0,0,1,1,1,1],30]],"") }						if (v.y>7) {							if (sys.squash2==undefined) { sys.squash2=new Squash2(this) }						} else {								if (sys.stun==undefined) { sys.stun=new Stun(this) }							}					}				public function stunHot (obj) {						if (sys.stunHot==undefined&&!str) {								if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,.2,.2,1],[0,0,0,1,1,1,1],50]],"") }				app="skid";				sys.stunHot=new StunHot(this);				if (sys.grabbed!=undefined) {					jumpC=0; sys.grabbed.letGo();				}				 							}					}				public function hitEgg (obj) {			if (brain.S.ED || brain.S.NL) {				hurt2();			}		}				public function hurt2():void		{			if (sys.colorFlash==undefined) 				sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,.2,.2,1],[0,0,0,1,1,1,1],50]],"");			if (sys.stunHot==undefined) 				sys.stunHot=new StunHot(this,true);		}				public var stegoTouch:Boolean =false;				private var dfTries:int = -10;		private var dtAllowedTimer:int = 1;				public function dfCheck():void		{			if (brain.gState=="win" || o.remote)				return;			dtAllowedTimer = 100;			if (dfTries == -10) {				dfTries = 5 - brain.S.difNum;				if (brain.S.mod == "MP") {					dfTries = 3;				}			}			dfTries--;			if (dfTries <= 0) {				stegoTouch = true;			} else {				brain.interF.showMessage (dfTries + (dfTries == 1 ? " Try" : " Tries") + " LeFt!");			}		}				public function hurt (obj) {						if (obj.o.nam == "StegoA" && brain.S.df && dtAllowedTimer <= 0) {				dfCheck();				return;			}			if (!brain.S.NL || brain.dino.str)				return;			if (sys.colorFlash==undefined) 				sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,.2,.2,1],[0,0,0,1,1,1,1],50]],"");			if (sys.stunHot==undefined)				sys.stunHot=new StunHot(this,true) 		}				public function hotFoot (obj) {						if (sys.hotFoot==undefined) {								if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,.2,.2,1],[0,0,0,1,1,1,1],50]],"") }				app="skid";				sys.hotFoot=new HotFoot(this,obj.o.lvl=="X"?true:false) 							}					}						// MAIN LOOP				public function mainDino () {						//bypass if we are null			if (o==null) { trace ("onull"); return }												if (brain.S.df && dtAllowedTimer <= 0 && dir == "L") {				//dfCheck();			}						if (dtAllowedTimer > 0) {				dtAllowedTimer--;				if (dtAllowedTimer == 0) {					graphic.alpha = 1;				} else {					graphic.alpha = dtAllowedTimer % 2 == 0 ? 1 : 0;				}			}									//debug			//if (rand(0,40)==1) { keyD_J () }			//if (rand(0,10)==1) { keyU_J () }			//keys.R=true;			//accelMax=3;			//if (brain.S.lvl!="A") { for (var ii:uint=1; ii<=50; ii++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) } }						//key input			checkKeys(near?1:2);						if (bc) {								//auto pilot				//if (Number(MP.Self.id)>100) { keys.R=true }				if (brain.S.testRun) { keys.R=true }								var keyA:Array=[];				for (var i in rmk) { 									var k:String=rmk[i]; 					keyA.push(keys[k]?1:0);								}				keyHist.push(keyA);						}						//jumping			if (jumpC>0) {								jumpC++;								 if (jumpC<11) {					vel.x+=(jumpPow+((11-jumpC)*.01))*Math.sin(ang);					vel.y-=(jumpPow+((11-jumpC)*.02))*Math.cos(ang)+0//(vel.y>0?Math.bUp(vel.y)/10:0);				}								//cap air speed				if (vel.x>12) { vel.x=12 }				if (vel.x<-12) { vel.x=-12 }				if (vel.y>12) { vel.y=12 }				if (vel.y<-12) { vel.y=-12 }							}						//end temp app?			if (master.body.ends) { app="" }						//base app			baseApp = (app!="")?app.substring (0,4):"";						//slow?			if (slow) { vel.x*=.5; vel.y*=.5 }									//air and ground appearance			var avx:Number = Math.abs(vel.x);						//debugger			if (riding!=null) { if (riding.vel==null) {							ridePara=false;				riding=null;				brain.world.ya2=0;				rName="";						} }						//riding			if (riding!=null) { 								riding.RR=true;				if (!bri) { bri=true; brx=riding.pos.x }				if (riding.o.typ!="Dino") { brc++ }				//name				var newName:String=riding.o.nam.substring(0,2);				if (newName!=rName) { 									//para					if (newName=="Pa") { riding.newRide (this); ridePara=true; brain.sys.audio.ply ("ridePara",1,false) } else if (rName=="Pa") { ridePara=false }										//boulder					if (newName=="Bo") { riding.dinoR=this }										//audio					switch (newName) {												case "Ce": brain.sys.audio.ply ("ceraMoan"+rand(1,2),.4,false); break;						case "St": brain.sys.audio.ply ("stegoMoan"+rand(1,2),.4,false); break;											}									}				rName=newName;								//cam adjust				brain.world.ya2=((rName=="Bo"||rName=="Me"||rName=="Pa")?-2:-1)*riding.ph.r;								//are we close enough to the thing to continue riding?				var rads:uint=ph.r+riding.ph.r;				var len:uint=Point.distance(pos.add(riding.vel),riding.pos);				if (len-rads>((rName=="Bo"||rName=="Me"||rName=="Pa")?20:3)) { endRide() } else { avx*=((rName=="Bo"||rName=="Me"||rName=="Pa")?getVV(riding.vel):1) }								if (rName=="Pa") {										//control para					pos.x=x=riding.pos.x;					riding.keys.R=keys.R;					riding.keys.L=keys.L;								}							}						/*if (!hitG) {								//take off				if (oHitG) { velXMax=(avx<7)?7:avx }							} else {								if (!oHitG) {										brain.sys.audio.ply ("hitGround"+rand(1,2),.25,false);					swiping=false;					velXMax=ph.r;									}							}*/						if (!near) {								//take off				if (oNear) { velXMax=(avx<7)?7:avx }								//air				if (baseApp!="poun"||vel.y>19) {									app=baseApp=(vel.y>19)?"fall":"jump";					gait="Runs";					ang=(vel.y<4)?ang:0;									}			} else {								//landing?				if (!oNear) {										brain.sys.audio.ply ("hitGround"+rand(1,2),.25,false);					swiping=false;					//trace ("hit ground");					//flyingPower = 0;					//.9,.96,1.03,1.1,1.18					velXMax=14*accelMax;					//squash?					if (baseApp=="fall"&&Math.abs(ang)<.6) { 											keys.D=false; 						sys.squash=new Squash(this);											} else if (vel.y>13&&Math.abs(ang*deg)<15) {												app=baseApp="land";						brain.sys.audio.ply ("hitGround"+rand(1,2),.5,false);											}									}								//stick to downhill slopes more, run faster up hills				if (vel.y>-.8&&vel.y<2&&avx>2&&nearG&&ang>0) {										var np:Point = Point.polar(.6,(ang+(Math.PI/2)-.5));					vel.offset(np.x,np.y);									} else if (nearG&&vel.y<0) { vel.offset (0,-.45) }								//ground gait				if (avx<.3) { gait="Still"; } else {										if (avx>=.3&&avx<=1) { gait="Stroll" } else {											if (avx>1&&avx<=5) { gait="Walk" } else {														gait="Runs";													}											}										}												//if special app, strip angle. if not, make app the gait				if (specialApps.indexOf(baseApp)>-1) { app=baseApp } else { app=gait }							}			oNear=near;			oHitG=hitG;			//trace (vel.x,velXMax);			//land on ground?			if (nearG) { if (!oNearG) { dch=0 } }			oNearG=nearG;						//face left or right			var da:Number=0;			if (riding!=null) { if (rName=="Bo"||rName=="Me") { da=avx } }			if (vel.x-da<-.2) { dir="L"; dirA=1 }			if (vel.x-da>.2) { dir="R"; dirA=-1 }			if (ridePara) {dir=riding.dir}			if (!mov) { dir="R" }			if (oDir!=dir) { graphic.gotoAndStop (dir) }			oDir=dir;						//exceptions for ducking and jumping			if (baseApp=="dckD"||baseApp=="dckU"||baseApp=="jump") { app+=gait }						//add angle			var ang2=ang*deg*dirA;			if (ang2>180) { ang2-=360 }			if (ang2<-180) { ang2+=360 }			var num:int=(Math.round((ang2)/30))*30;			if (num>60) { num = 60 }			if (num<-60) { num = -30 }			if (num<0) { num=Math.abs(num)+1 }						//exceptions			if (ridePara) { num=riding.num; baseApp=app="ride"; app+=((riding.gait=="Still")?"Still":"") }			if (sys.stunHot!=undefined||sys.stun!=undefined) { baseApp=app="skid" }			app+=num;						//final appearance			if (sys.grabbed!=undefined) { if (sys.grabbed.grab) { app="grab0" } }			if (oApp!=app) {				try {				master.body.gotoAndPlay (app); master.body.ends=false				} catch(e){}			}			//			oApp=app;			oGait=gait;												//riding?			if (riding!=null) { vel.offset (riding.vel.x,riding.vel.y); velXMax=riding.vel.x+6 }						//end?			if (end) { ph.g=vel.x=vel.y=0 }			//run functions common to all MovingClips						mainMC ();			if (!inter) { return }						//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			//adjust projected pos for remote dinos and smooth			if (o.remote) {								aPos.offset (vel.x*brain.hc,vel.y*((vel.y>0)?brain.hc:1));				//aPos.offset (vel.x,vel.y);								//snap or smooth				var dist:Number=Point.distance(aPos,pos);				//var dist2:Number=aPos.x-pos.x;				//trace ("//dist2: ",dist2);				//trace ("act,pred",aPos,pos);				//var sv:int=(dist>75)?2:10				if (dist>299) { pos=aPos.clone() } else {										var svn:Number=10-(dist/30);					sv=Math.round(sv+((svn-sv)/5));					//trace (dist,sv)					pos.x+=(aPos.x-pos.x)/sv;					pos.y+=(aPos.y-pos.y)/sv;									}							}						//reset riding vel			if (riding!=null) { vel.offset (riding.vel.x*-1,riding.vel.y*-1); velXMax=ph.r }						//reset slow			if (slow) { vel.x/=.5; vel.y/=.5 }			slow=false;						//end level			var endX:int = Config.WEB ? 760 : 800;			if (x>(brain.world.xMax*-1)+760) { if (!end) {					brain.endLevel=true;				endLevel();									} }						//room events			if (!o.remote) {								screen=brain.world.sArr[roomID];				switch (screen) {										//lots of meteors					case "spH1_1": if (Math.random()<.04) { brain.createMeteor() }; break;					case "spP1_1B": if (Math.random()<.04) { brain.createMeteor() }; break;					case "spR1_1B": if (Math.random()<.05) { brain.createMeteor() }; break;					case "spAA1_1B": if (Math.random()<.05) { brain.createMeteor() }; break;					case "spAA2_1B": if (Math.random()<.05) { brain.createMeteor() }; break;					case "spBB3_1B": if (Math.random()<.04) { brain.createMeteor() }; break;					case "spBB4_1B": if (Math.random()<.04) { brain.createMeteor() }; break;										case "spXB1_3": if (Math.random()<.1) { brain.createMeteor() }; break;					case "spXC1_1": if (Math.random()<.1) { brain.createMeteor() }; break;					case "spX1_2": if (Math.random()<.1) { brain.createMeteor() }; break;										case "spI3_1": if (!d1) { d1=true; brain.sys.audio.ply ("diploMoan1",.75,false) }					case "spL1_1": if (!d2) { d2=true; brain.sys.audio.ply ("diploMoan2",.75,false) }										//paras cant goto sanctuary					case "spCC4_2": if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;					case "spCC8_3": if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;					case "spEE6_5": if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;					case "spXB1_3": if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;					case "spXC1_1": if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;					case "spX1_2":						if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } };						break;					case "spXD1_3":  if (riding!=null) { if (riding.o.nam=="Para") { riding.drc=-1 } }; break;										//red dactyl swarm					case "spEE9_6B": if (Math.random()<.02) { brain.create ( {nam:"DactylRed", px:x+800, py:y+rand(-150,-100), depth:["world","main"] } )}; break;					case "spEE10_6B": if (Math.random()<.02) { brain.create ( {nam:"DactylRed", px:x+800, py:y+rand(-150,-100), depth:["world","main"] } )}; break;					case "spEE11_6B": if (Math.random()<.02) { brain.create ( {nam:"DactylRed", px:800, py:y+rand(-150,-100), depth:["world","main"] } )}; break;										case "spXE3_1": if (brain.gState!="win") { brain.win() }; break;										//slow down doom wall for uphills					brain.doom.spA=1;					if (screen.substring(0,2)!="sp"&&screen!="blank"&&screen!="fill") {												var sa:Array=screen.split("_");						var l1=Number(sa[0].charAt(1));						var l2=Number(sa[1].charAt(0));						switch (l2-l1) {														case 2: brain.doom.spA=.92; break;							case 3: brain.doom.spA=.85; break;							case 4: brain.doom.spA=.78; break;													}											}									}										}						//adren regain			adren+=1;			if (adren==1000 && !o.remote) {				sys.feetSpark=new FeetSpark(this);				brain.sys.audio.ply ("feetSpark",.9,false)			}						//eye			if (master.body.eye!=null) { if (master.body.head.currentFrame>2) { master.body.eye.visible=false } else { master.body.eye.visible=true } }		}				private var win:Boolean = false;				private var flyingPower:Number = 0;				//key functions		public function keyD_D () { keys.D=true }		public function keyU_D () { keys.D=false }		public function keyD_L () { keys.L=true; if (keys.R) {keys.RH=true; keys.R=false} }		public function keyU_L () { keys.L=keys.LH=false; if (keys.RH) {keys.RH=false; keys.R=true} }		public function keyD_R () { keys.R=true; if (keys.L) {keys.LH=true; keys.L=false} }		public function keyU_R () { keys.R=keys.RH=false; if (keys.LH) {keys.LH=false; keys.L=true} }		public function keyD_J () { keys.J=true }		public function keyU_J () { keys.J=false }		public function keyD_S () { keys.S=true }		public function keyU_S () { keys.S=false }						public function keyD_1 () { keys.E1=true }		public function keyU_1 () { master.body.head.emo.gotoAndStop (1); keys.E1=false }		public function keyD_2 () { keys.E2=true }		public function keyU_2 () { master.body.head.emo.gotoAndStop (1); keys.E2=false }		public function keyD_3 () { keys.E3=true }		public function keyU_3 () { 					master.body.head.emo.gotoAndStop (1);			keys.E3=false;			master.ccE.cChange ([master.eyeC[0],master.eyeC[1],master.eyeC[2],1,1,1,1]);					}				//send key + pos info		public function sendMPInfo (ev) {						//create string to broadcast keys states and position			var mpstr:String="";			for each (var ka:Array in keyHist) { mpstr+=(ka.join("")+"_") }			MP.sendToRoom ("RD"+mpstr.substr(0,mpstr.length-1)+";"+Math.round(pos.x)+"_"+Math.round(pos.y));			keyHist=[];						}				//remote keys + pos info		public function act_rmData (mpstr) {						//trace (mpstr);			var strA:Array = mpstr.split(";")			keyHistR=strA[0].split("_");			//create average			var keyAVGA:Array=[0,0,0,0,0,0,0,0];			for each (var kh:String in keyHistR) { for (var i:int=0; i<8; i++) { if (kh.charAt(i)=="1") { keyAVGA.splice (i,1,"1") } } }			keyAVG=keyAVGA.join("");			//actual position			var posA:Array=strA[1].split("_");			aPos.x=posA[0];			aPos.y=posA[1];					}		// KEY INPUT		private function checkKeys(f) {						if (o.remote) {								var keystr:String=(keyHistR.length==0)?keyAVG:keyHistR[0];				for (var i:int=0; i<8; i++) { keys[rmk[i]]=(keystr.charAt(i)=="1")?true:false }				keyHistR.shift();											}						if (keys.E1) { if (!keys.o1) { master.body.head.emo.gotoAndStop (2) } }			if (keys.E2) { if (!keys.o2) { master.body.head.emo.gotoAndStop (3) } }			if (keys.E3) {								master.ccE.cChange ([rand(0,255),0,0,1,1,1,1])				if (!keys.o3) { master.body.head.emo.gotoAndStop (4) } 							}									if ((!keys.E1 && !keys.E2 && !keys.E3)) {				master.body.head.emo.gotoAndStop (1)			}						//trace (accelMax)						if (mov) {				if (keys.L) {										accelL-=accelF;					if (accelL<-1*accelMax) { accelL=-1*accelMax }					vel.x+=accelL/f;										//skid?					if (vel.x>7&&baseApp!="jump") { app="skid"; sys.skid=new Skid(this) }									} else {										accelL+=accelF;					if (accelL>-.4) { accelL=-.4 }									}								if (keys.R) {										accelR+=accelF;					if (accelR>accelMax) { accelR=accelMax }					vel.x+=accelR/f;										//skid?					if (vel.x<-7&&baseApp!="jump") { app="skid"; sys.skid=new Skid(this) }									} else {										accelR-=accelF;					if (accelR<.4) { accelR=.4 }									}								if (keys.D) {										dckD();					if (!near&&vel.y>-8&&vel.y<=19) {												vel.y+=.4;						ang=0;						baseApp=app="poun";											}									} else if (keys.oD) { dckU() } 								if (keys.J) { jumpD() } else if (keys.oJ) { jumpU() }								if (keys.S) { adrenRush() }					keys.oD=keys.D;				keys.oJ=keys.J;				keys.o1=keys.E1;				keys.o2=keys.E2;				keys.o3=keys.E3;							}					}		//adren rush		public function adrenRush() {						if (adren>1000&&near) {							adren=0;				var w:int=1;				if (brain.sys2.stats.DNA>249&&brain.S.mod!="MP") { w=2 }				if (brain.sys2.stats.DNA>499&&brain.S.mod!="MP") { w=3 }								switch (w) {										case 1:					brain.sys.audio.ply ("speedBoost1",.9,false)					if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[0,255,0,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }					speedBoost (1.3,150);					break;										case 2:					if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,255,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }					brain.sys.audio.ply ("speedJump",.9,false)					superJump (1.4,300);					speedBoost (1.3,150);					break;										case 3:					brain.sys.audio.ply ("strength",.6,false)					if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,0,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }					strength (300);					superJump (1.4,300);					speedBoost (1.3,150);					break;									}							}					}									/*override public function applyVel (v:Point) {						if (!nearG) {							//velocity vector cannot exceed radius				var vv:Number=getVV(vel)+.1;				if (vv>ph.r) { v.x*=(ph.r/vv); v.y*=(ph.r/vv)  }				//				pos.offset (v.x,v.y);							}					}*/				//duck		private function dckD () {						if (baseApp!="jump"&&baseApp!="dckD"&&baseApp!="fall"&&baseApp!="poun") {								app="dckD";				//accelMax=accelMaxBase*.92;				ph.r=12;				var np:Point = Point.polar(6,(ang+(Math.PI/2)));				vel.offset(np.x,np.y);							} 					}				private function dckU () {						app="dckU";			//accelMax=accelMaxBase;			ph.r=21;			if (nearG) { 							velXMax=ph.r;				var np:Point = Point.polar(6,(ang-(Math.PI/2)));				vel.offset(np.x,np.y);							}					}				//jump		private function jumpD () {						if (ridePara) { 				if (!riding.near && riding.jumpC==0) {					riding.keys.R=riding.keys.L=false;					paraToss() ;					return;				}				riding.jumpD();			} else {				if (jumpC==0&&near&&sys.grabbed==undefined) {										var rd:Boolean=false;					if (riding!=null) { if (riding.vel!=null) { rd=true } }										if (rName!="") { jumpPow*=1.3 };					vel.x+=(ang*dirA<0)?((jumpPow+.2)*Math.sin(ang)+(vel.y>0?Math.abs(vel.y)/2:0)):0;					vel.x+=(!rd)?0:riding.vel.x;					if (vel.y>0) { vel.y*=.5 }					vel.y-=(jumpPow+.5)*Math.cos(ang)+(!rd?(vel.y>0?(ang*dirA)*-5:(ang*dirA)*5):-1*riding.vel.y)					//vel.y is 29 on a stego?					jumpC=1;					if (rName!=""&&rd) { 											jumpPow/=1.3;						var avx=Math.abs(vel.x+riding.vel.x);						velXMax=(avx<7)?7:avx;						endRide();											}										//audio					brain.sys.audio.ply ("j"+rand(1,4),.7,false);										//flying					if (brain.S.fl) {						flyingPower = vel.x;					}								}							}						if (sys.grabbed!=undefined) {				if (sys.grabbed.c > 20) { 					jumpC=0; sys.grabbed.letGo();				}			}						//flying			if ((jumpC > 11 || jumpC == 0) && flyingPower > 0 ) {//&& x<(brain.world.xMax*-1)-1600								jumpC = 0;												var flyFactor:Number = jumpC > 0 ? Math.min(1,(jumpC-11)*.01) : 1;				if (jumpC == 0 && vel.y < -5) {					flyFactor /= Math.abs(vel.y);				}								trace (jumpC, flyFactor);				//trace (flyFactor);				vel.y-=flyFactor;				vel.x*=1.02;				flyingPower -= flyFactor*.33;				//trace (flyingPower);			}					}				private function jumpU () {						if (ridePara) { riding.jumpU() } else {							//if (brain.S.fl != true)					jumpC=0;				if (sys.grabbed!=undefined) { sys.grabbed.ju=true }							}					}				////misc				public function paraToss () {						endRide();			vel.x+=((dir=="R")?rand(8,12):rand(-12,-8));			vel.y-=rand(6,10);					}				public function endRide() {						//show ride score?			if (riding!=null) {								riding.RR=false;				if (riding.o.nam=="Bo") { riding.dinoR=null }								if (riding.o.typ!="Dino"&&brc>26) {										var finalX=riding.pos.x-brx;					if (finalX>150) {												var rideScore=(Math.round(((finalX/10)+brc)/5))*10;												if (brain.S.mod=="MP") {														if (brc>brain.sys2.stats.MPboulderRide&&brc>brain.sys2.stats.MPboulderRideGame&&!brain.S.cheat) { brain.sys2.stats.MPboulderRideGame=brc; brain.interF.showMessage (Math.round(brc/50)+ " Second Boulder Ride!") }													} else {													brain.create ( {nam:"ScoreFloat", px:x, py:y-24, val:rideScore, depth:["world","main"]} )							brain.sys2.stats.addScore (rideScore);							brain.interF.showMessage (Math.round(brc/50)+ " Second Boulder Ride!")							if (brc>brain.sys2.stats.boulderRide&&brc>brain.sys2.stats.brLvl&&!brain.S.cheat) { brain.sys2.stats.brLvl=brc }													}					}									}							}			ridePara=false;			riding=null;			bri=false;			brain.world.ya2=0;			rName="";			brc=0;		}				override public function roomChange () {						if (ugs.indexOf(brain.world.sArr[roomID])!=-1) { ug=true } else { ug=false }					}				public function isUG (id) {						if (ugs.indexOf(brain.world.sArr[id])!=-1) { return true } else { return false }					}				public function endLevel () {						end=true;			ph.g=vel.x=vel.y=0;			if (sys.str!=undefined) { sys.str.remove() }			inter=false;			alpha=0;			noMov();			endRide();			rName="";			//bonus for riding something? exit in style bonus : if (riding!=null)...					}								//misc		public function foodClose () {						if (baseApp=="poun") { if (!swiping) { swiping=true; master.body.gotoAndPlay ("swipe"); brain.sys.audio.ply ("swat",.5,false); } }					}						public function switchNear (val) {						near=val;					}									// REACTIONS				public function bounce (v) {						if (!v)				return;						if (nearG) { if (ridePara) { endRide(); sys.noRide=new NoRide(this)  } }			if (sys.grabbed!=undefined) { if (sys.grabbed.grab) { sys.grabbed.letGo() } }						vel2.x=vel.x;			vel2.y=vel.y;			vel.x=v.x;			vel.y=v.y;								}				public function gHit (v) {											}				public function smoke (obj) {						if (obj.smc<25) {								for (var i:int=0; i<3; i++) { brain.create ({nam:"Smoke", px:ip.x+rand(-9,9), py:ip.y+rand(-9,9), v:rand(-4,-2), sz:rand(8,14), dur:2, depth:["world","main"]})  }						}					}				public function collectPumpkin():void		{			speedBoost (1.25,100);			//brain.create ( {nam:"ScoreFloat", px:x, py:y-24, val:100, depth:["world","main"]} )			//brain.sys2.stats.addScore (100);						brain.sys.audio.ply ("egg"+rand(1,3),.8,false);						brain.sys2.stats.addEgg(false);			brain.create ( {nam:"EggCollect", px:x, py:y, depth:["world","main"]} )		}				public function bHit (obj) {						if (obj.o.pumpkin) {				if (obj.o.lvl == 2 ) {					//hurt2();				} else {					collectPumpkin();					obj.collected();				}			}						//manuevering			if (obj.o.lvl<4&&near) {								pos.offset (vel.x<0?-3:3,-3);				vel.offset (vel.x<0?-1:1,-1); ////////////////////							} else if (pos.y<obj.pos.y) {								vel.offset (0,-1);							}						if (!obj.bal) {								//reaction - head bonk or squash				if (Math.atan2 (obj.pos.y-pos.y,obj.pos.x-pos.x)<0) {										var vv:Number=getVV(obj.vel);					var dvv:Number=getVV(vel2);					if (vv>4||dvv>4) { if (obj.o.lvl<4||!nearG||(obj.o.lvl>3&&dvv>4&&vv<10)) { master.body.head.gotoAndPlay ("bonk") } else if (sys.squash2==undefined) { sys.squash2=new Squash2(this) } }									}							}					}		public function slowDown (obj) {						slow=true;					}				public function noMov () {						mov=false;			keys.L=false;			keys.R=false;					}					public function createBones():void		{					}				public var gore:Boolean = false;				public function touchFood (obj) {						var pData=obj.pData;			var allow:Boolean=false;			if (near&&obj.near) { 				if (keys.D) {					if (obj.o.nam=="Worm") { 						if (!obj.ug) { 							allow=true 						}					} else {						allow=true 					}				} 			} else { allow=true }						if (allow) {								swiping=false;				speedBoost (pData.rFactor,pData.rTime);				superJump (pData.jPow,pData.jTime);				if (!o.remote) { 									obj.eaten(this);					master.body.head.gotoAndPlay (obj.o.nam+rand(1,3));										if (brain.S.sl || gore) {						brain.dino.bdc = .25;					}									//extra FX					switch (obj.o.nam) {												case "Runner":												var l=rand(2,4);						for (var i:uint=1; i<=l; i++) { brain.create ({nam:"RunnerBit", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-4,0), depth:["world","main"]}) }						var ll=rand(0,2);						if (brain.S.sl || gore) {							ll=rand(20,50);						}						for (var ii:uint=1; ii<=ll; ii++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) }						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-6,6), vy:rand(-12,-2), depth:["world","main"]})						brain.sys.audio.ply ("eatRun"+rand(1,3),.5,false);						break;												case "LizG":						var p=rand(0,2);						if (brain.S.sl || gore) {							p=rand(20,50);						}						for (var j:uint=0; j<p; j++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) }						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-6,6), vy:rand(-12,-2), depth:["world","main"]})						brain.sys.audio.ply ("eatLiz1",.6,false);						break;												case "LizO":						var q=rand(0,2);						if (brain.S.sl || gore) {							q=rand(20,50);						}						for (var k:uint=0; k<q; k++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) }						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-6,6), vy:rand(-12,-2), depth:["world","main"]})						brain.sys.audio.ply ("eatLiz2",.6,false);						break;												case "LizP":						var r=rand(0,2);						if (brain.S.sl || gore) {							r=rand(20,50);						}						for (var m:uint=0; m<r; m++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) }						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-6,6), vy:rand(-12,-2), depth:["world","main"]})						brain.sys.audio.ply ("eatLiz3",.6,false);						break;												case "BirdFG":						var s=rand(0,2);						if (brain.S.sl || gore) {							s=rand(20,50);						}						for (var n:uint=1; n<=s; n++) { brain.create ({nam:"Blood", px:x+rand(15,30), py:y+rand(-12,3), vx:obj.vel.x+rand(-4,4), vy:rand(-6,0), depth:["world","main"]}) }						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-6,6), vy:rand(-12,-2), depth:["world","main"]})						brain.sys.audio.ply ("eatBird"+rand(1,3),.4,false);						break;												case "Fish":						brain.create ( {nam:"Bone", px:obj.x+rand(-9,9), py:obj.y+rand(-6,3), vx:obj.vel.x+rand(-3,3), vy:rand(-6,-1), depth:["world","main"]})						brain.sys.audio.ply ("slurp"+rand(1,3),.95,false);						break;												case "Worm":						brain.sys.audio.ply ("slurp"+rand(1,3),.95,false);						break;											}										//score					if (brain.sys2.stats.addP) {												brain.sys2.stats.addFood(obj.o.nam,pData.score);						if (brain.S.mod!="MP") { brain.create ( {nam:"FoodScore", px:x, py:y, foodTyp:obj.o.nam, depth:["world","main"]} ) }											}									}							}		}							public function pup (obj) {						var pData = obj.pData;			switch (pData.id) {								case "speedBoost":				if (keys.D) {										if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[0,255,0,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }					speedBoost (1.4,pData.val*300);									}				break;								case "superJump":				if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,0,255,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }				superJump (1.3,pData.val*500);				break;								case "strength":				if (sys.colorFlash==undefined) { sys.colorFlash = new ColorFlash (this,[[[255,255,255,1,1,1,1],[0,0,0,1,1,1,1],50]],"") }				speedBoost (1.2,pData.val*200);				strength (600);				break;							}					}				//final actions		override public function finalActions():void {						if (sys.grabbed!=undefined) {								if (sys.grabbed.grab) {									pos.x=sys.grabbed.grabber.x-6;					pos.y=sys.grabbed.grabber.y+15;									}							}						if (rName=="Pa") {									//control para				pos.x=x=riding.pos.x;				//pos.y=y=riding.pos.y-45;							}						newPos();					}				// delete all		override public function deleteAll() {						if (o!=null) {							//brain.deleteClip(this);				if (o.rData) { brain.deleteData(roomID,o.id) }				deleteObj();							}					}						public function speedBoost (factor,time) {						if (brain.S.mod=="MP"&&!o.remote&&!keys.S) { brain.sys.MP.sendToRoom ("SB"+factor+";"+time) } 			if (sys.speedBoost!=undefined) { sys.speedBoost.addOn(factor,time) } else { sys.speedBoost = new SpeedBoost (this,factor,time) }					}				public function superJump (pow,time) {						if (sys.superJump!=undefined) { sys.superJump.addOn(pow,time) } else { sys.superJump = new SuperJump (this,pow,time) }					}				public function strength (time) {						if (sys.str!=undefined) { sys.str.addOn(time) } else { sys.str = new Strength (this,time) }					}			}	}