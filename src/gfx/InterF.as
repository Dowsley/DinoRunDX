package gfx {		import com.miniclip.MiniclipAPI;		import flash.desktop.NativeApplication;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.geom.ColorTransform;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.fscommand;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Mouse;	import flash.utils.Timer;	import flash.utils.setTimeout;		import base.Brain;	import base.Leaderboard;	import base.MPManager;		import fx.ColorChange;		import gfx.PlayerClip;		import hatsui.view.HUIV_Main;		import mdm.Application;		import org.osmf.events.TimeEvent;		import util.MD5Hash;	import util.Rndm;	import util.Stats;
			public class InterF extends DinoClip {				public var brain:Brain;		private var gfx:MovieClip;				public var bootMSG:String = "";				public var warn:Boolean=false;				private var timer:Timer;		public var lvlName:String;		public var lvlDesc:String;		public var flsh:Boolean=false;		public var interBTS:Object;		public var current:String;		public var current2:String="lobby";		private var abs:Array = ["SPD","ACL","JMP","STR"];		private var costs:Object = { SPD2:50, SPD3:100, SPD4:150, SPD5:200, ACL2:10, ACL3:20, ACL4:40, ACL5:80, JMP2:20, JMP3:40, JMP4:80, JMP5:120, STR2:30, STR3:60, STR4:90, STR5:120 } // 1210		public var stats:Stats;		private var sEggs:Array = ["A","T","B","M","S","D","G","O","I","R"];		public var msg:String;		private var drc:String="";		private var saveStats:Boolean;		private var cSR:String="";		public var srs:Array=["A","B","C","D","E","F","G","I","K","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AA"];//"BB"  // removed j l h				public var interX:MovieClip;				public var mods:Object={A:["Super Speed","DINORACER"],B:["Mega Jump","LEAPINLIZ"],C:["Super Strength","CALCIUM"],D:["Goodbye Doom","EXPLORE"],E:["Low Gravity","ASTROSAUR"],F:["Boulders = Balloons","GOOFBALLS"],								G:["Lights Out","GOODBYESUN"],H:["Meteor Storm","SMOKEY"]}//,J:["xxx","XXX"],K:["xxx","XXX"],L:["xxx","XXX"]		public var shopItems:Object={A:["Hills Desktop","DR_Hills.zip",300],B:["Sky Desktop","DR_Sky.zip",500],C:["Doom Desktop","DR_Doom.zip",750],D:["Lava Desktop","DR_Lava.zip",1000],E:["Concept Art","DR_Art.zip",1000],F:["Dino Demos","DR_Demos.zip",1000],								J:["Gold Desktops","DR_Gold.zip","?"],K:["Mac Icons","DR_IconsMac.zip",250],L:["PC Icons","DR_IconsPC.zip",250],M:["Soundtrack","DinoRunSoundtrack.zip",0]}		//public var shopItems:Object={A:["Dino Icons","DR_Icons.zip",250],B:["Desktop 1","DR_Desktop1.zip",500],C:["Desktop 2","DR_Desktop2.zip",500],D:["Desktop 3","DR_Desktop3.zip",500],E:["Concept Art","DR_Concept.zip",1000],F:["In the Beginning","DR_EarlyDemos.zip",1000],								//G:["Volcano Theme MP3","DR_VolcanoDemo.zip",2500],H:["Monkey Mountain","DR_MM.zip",2500],I:["xxx","DR_xxx.zip",100],J:["xxx","DR_xxx.zip",100],K:["xxx","DR_xxx.zip",100],L:["xxx","DR_xxx.zip",100]}				public var dColors:Object={ a:{body:[254, 255, 14],dot:[],stripe:[],eye:[217,114,39],text:"body"}, //yellow			b:{body:[180,255,40],dot:[],stripe:[],eye:[168,85,52],text:"body"}, //green			c:{body:[249,209,255],dot:[],stripe:[],eye:[312,92,231],text:"body"}, //pink			d:{body:[112, 65, 17],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //brown			e:{body:[255,106,22],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //orange			f:{body:[255,0,0],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //red			g:{body:[134,81,255],dot:[],stripe:[],eye:[0, 0, 0],text:"body"}, //purp			h:{body:[0,176,255],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //blue			i:{body:[105,192,0],dot:[],stripe:[],eye:[0,0,0],text:"body"}, //green			j:{body:[255,236,95],dot:[],stripe:[],eye:[0,176,	255],text:"body"}, //l			k:{body:[255,255,255],dot:[],stripe:[],eye:[255,20,20],text:"body"}, //albino			l:{body:[127,127,127],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //grey			m:{body:[0,0,0],dot:[],stripe:[],eye:[255,255,255],text:"body"}, //black			n:{body:[255,242,0],dot:[255,205,0],stripe:[],eye:[217,114,39],text:"body"}, //yellow orange			o:{body:[255, 203, 37],dot:[],stripe:[255, 107, 53],eye:[255,	255,	255],text:"stripe"}, //orange dk orange			p:{body:[180,255,40],dot:[130,220,10],stripe:[],eye:[168,	85,	52],text:"eye"}, //			q:{body:[108, 70, 42],dot:[],stripe:[108, 70, 42],eye:[213,	92,	231],text:"eye"}, // tan brown			r:{body:[66, 190, 255],dot:[66, 190, 255],stripe:[],eye:[255,255,255],text:"dot"}, //			s:{body:[164,123,71],dot:[130,100,60],stripe:[],eye:[130,	100,	60],text:"dot"}, //			t:{body:[255,227,161],dot:[255,190,130],stripe:[],eye:[148,	108,	39],text:"eye"}, //			u:{body:[255,194,0],dot:[245,136,0],stripe:[],eye:[207,	95,	0],text:"dot"}, //			v:{body:[183,183,183],dot:[143,141,126],stripe:[],eye:[255,255,255],text:"dot"}, //			w:{body:[255,196,249],dot:[215,184,255],stripe:[],eye:[255,255,255],text:"eye"}, //			x:{body:[255,242,0],dot:[219,207,5],stripe:[],eye:[217,	114,	39],text:"eye"}, //			y:{body:[255,255,255],dot:[230,230,230],stripe:[],eye:[255,20,20],text:"dot"}, //			z:{body:[65,65,65],dot:[0,0,0],stripe:[],eye:[255, 229, 20],text:"dot"}, //			A:{body:[255,	242,	20],dot:[],stripe:[255,	200	,20],eye:[217,	114,	39],text:"body"}, //			B:{body:[151,	156,	0],dot:[],stripe:[91,	124	,0],eye:[255,	244,	0],text:"stripe"}, //			C:{body:[249,	209,	255],dot:[],stripe:[210,	146,	244],eye:[255,255,255],text:"eye"}, //			D:{body:[236,	191,	13],dot:[],stripe:[225,	131,	61],eye:[255,	241	,172],text:"stripe"}, //			E:{body:[104,	218,	111],dot:[],stripe:[40,	154,	180],eye:[255,255,255],text:"stripe"}, //			F:{body:[255,	227,	161],dot:[],stripe:[255,	190,	130],eye:[148,	108,	39],text:"eye"}, //			G:{body:[168,	94	,165],dot:[],stripe:[213,	127	,210],eye:[249,	183,	246],text:"stripe"}, //			H:{body:[194,	182	,146],dot:[],stripe:[126,	113,	82],eye:[253,	247,	189],text:"stripe"}, //			I:{body:[122,	219	,85],dot:[],stripe:[162	,158,	66],eye:[255,255,255],text:"stripe"}, //			J:{body:[164,	123	,71],dot:[],stripe:[140	,100,	60],eye:[253	,247,	189],text:"stripe"}, //			K:{body:[0,0,0],dot:[],stripe:[115	,72,	30],eye:[255,255,255],text:"stripe"}, //			L:{body:[151,	124,	0],dot:[],stripe:[117	,83,	0],eye:[255,255,255],text:"stripe"}, //									M:{body:[235,	235,	235],dot:[],stripe:[172,	172,	172],eye:[16,	17,	7],text:"body"}, //			N:{body:[242,	101,	34],dot:[0,0,0],stripe:[],eye:[255,255,255],text:"body"}, //			O:{body:[255,0,0],dot:[255,255,255],stripe:[],eye:[255,255,255],text:"body"}, //			P:{body:[0,	212,	53],dot:[],stripe:[0,	194,	49],eye:[255,255,255],text:"stripe"}, //			Q:{body:[242,	0,	0],dot:[],stripe:[202,	0,	0],eye:[0,0,0],text:"stripe"}, //			R:{body:[58,	182,	0],dot:[],stripe:[41,	123,	2],eye:[255,255,255],text:"stripe"}, //			S:{body:[0,	138,	255],dot:[240,	59,	48],stripe:[],eye:[255,255,255],text:"dot"}, //			T:{body:[0,	138,	255],dot:[37,	215	,0],stripe:[],eye:[255,255,255],text:"dot"}, //			U:{body:[242,	150,	175],dot:[],stripe:[244,	83,	148],eye:[255,255,255],text:"stripe"}, //			V:{body:[255,	255,	255],dot:[],stripe:[255,	204,	153],eye:[217,	114,	39],text:"body"}, //			W:{body:[255,	255,	255],dot:[],stripe:[67, 207, 65],eye:[32, 33, 24],text:"stripe"}, //			X:{body:[255,	249,	46],dot:[],stripe:[213,	127	,210],eye:[0,0,0],text:"stripe"}, //			Y:{body:[112,	199,	52],dot:[155,	96,	26],stripe:[],eye:[255,255,255],text:"dot"}, //			Z:{body:[255, 203, 37],dot:[],stripe:[255, 107, 53],eye:[255,255,255],text:"stripe"}, //			aa:{body:[51,	186,	255],dot:[],stripe:[34,	115,	245],eye:[255,255,255],text:"stripe"}, //			bb:{body:[126,	144,	75],dot:[],stripe:[86,	107,	67],eye:[255,255,255],text:"stripe"}, //			cc:{body:[251, 177, 94],dot:[],stripe:[87, 152, 255],eye:[255,255,255],text:"stripe"}, //			dd:{body:[255,	210,	0],dot:[],stripe:[78,	193,	82],eye:[217,	52,	39],text:"stripe"}, //			ee:{body:[66, 190, 255],dot:[],stripe:[10, 104, 252],eye:[255,255,255],text:"stripe"}, //			ff:{body:[240,	59,	48],dot:[],stripe:[41,	92,	170],eye:[255,255,255],text:"stripe"}, //			gg:{body:[166,	166,	166],dot:[],stripe:[42,	42,	42],eye:[255,255,255],text:"stripe"}, //			hh:{body:[235,	235,	235],dot:[],stripe:[205,	23,	29],eye:[16, 151, 255],text:"stripe"}, //			ii:{body:[149,	167,	163],dot:[],stripe:[97,	129,,18],eye:[0,	0,	0],text:"stripe"}, //			jj:{body:[231,	234,	241],dot:[],stripe:[45,	135,	188],eye:[0,0,0],text:"stripe"}, //			kk:{body:[105, 114, 123],dot:[],stripe:[0,0,0],eye:[255, 255, 255],text:"stripe"}, //			ll:{body:[255,	255,	255],dot:[],stripe:[16,	17	,7],eye:[240,	39,	0],text:"stripe"}, //			mm:{body:[214,	54,	44],dot:[],stripe:[30,	34	,37],eye:[255,255,255],text:"body"}, //			nn:{body:[40,	40,	40],dot:[],stripe:[0,	0,	0],eye:[255,255,255],text:"body"}, //			oo:{body:[194,	182,	146],dot:[],stripe:[126,	113,	82],eye:[255,255,255],text:"stripe"}, //			pp:{body:[19,	23,	25],dot:[],stripe:[183,	202,	214],eye:[255,255,255],text:"body"}, //			qq:{body:[240,	175,	51],dot:[],stripe:[186,	136,	40],eye:[255,255,255],text:"stripe"}, //			rr:{body:[20, 195, 255],dot:[79, 254, 255],stripe:[],eye:[255,255,255],text:"dot"}, //			ss:{body:[255, 66, 16],dot:[255, 229, 14],stripe:[],eye:[255,255,255],text:"dot"}, //			tt:{body:[255,	255,	255],dot:[],stripe:[228	,228,	228],eye:[255,0,0],text:"body"}, //			uu:{body:[124,	124,	124],dot:[],stripe:[188, 188, 188],eye:[255,255,255],text:"body"}, //												vv:{body:[202,	0,	0],dot:[],stripe:[242,	0,	0],eye:[255,255,255],text:"stripe"}, //			ww:{body:[255,	183,	9],dot:[],stripe:[179,	52,	1],eye:[255,255,255],text:"stripe"}, //			xx:{body:[94,	104,	114],dot:[],stripe:[6,	22,	35],eye:[255,255,255],text:"stripe"}, //			yy:{body:[111,	0,	220],dot:[],stripe:[159,	57,	255],eye:[255,255,255],text:"body"}, //			zz:{body:[1,	82,	182],dot:[],stripe:[238,	0,	0],eye:[255,255,255],text:"stripe"}, //			AA:{body:[0,	0,	0],dot:[],stripe:[88, 18, 161],eye:[255,255,255],text:"stripe"}, //			BB:{body:[255,	229,	108],dot:[],stripe:[217,	32,	62],eye:[255,255,255],text:"stripe"}, //						DD:{body:[255,	255,	255],dot:[],stripe:[232,	232,	232],eye:[255,0,0],text:"body"}, //			EE:{body:[59,	246,	70],dot:[],stripe:[8,	203,	30],eye:[255,255,255],text:"stripe"}, //			GG:{body:[18,	181,	245],dot:[255,242,0],stripe:[],eye:[255,255,255],text:"body"}, //			LL:{body:[84, 110, 39],dot:[55, 72, 29],stripe:[],eye:[255,255,255],text:"dot"}, //			KK:{body:[255,	204,	153],dot:[189,132,69],stripe:[],eye:[189,132,69],text:"dot"}, //						MM:{body:[66,	104,	8],dot:[],stripe:[106,	149,	41],eye:[106,	149,	41],text:"body"},			NN:{body:[139,	34,	0],dot:[],stripe:[0,	24,	45],eye:[255,255,255],text:"body"},			OO:{body:[255,255,255],dot:[],stripe:[243,	139,	222],eye:[138,	48,	137],text:"eye"},			PP:{body:[49,	65,	180],dot:[],stripe:[0,	198,	199],eye:[255,255,255],text:"body"},			QQ:{body:[139,	192,	87],dot:[],stripe:[240,	202,	0],eye:[255,255,255],text:"body"},			RR:{body:[90,	149,	179],dot:[152,	55,	21],stripe:[],eye:[255,255,255],text:"body"},			SS:{body:[255,255,255],dot:[],stripe:[0,0,0],eye:[255,0,0],text:"stripe"},			TT:{body:[106, 58, 22],dot:[],stripe:[200, 35, 16],eye:[255,255,255],text:"stripe"},			UU:{body:[70, 63, 26],dot:[],stripe:[85, 77, 29],eye:[255,255,255],text:"stripe"},			VV:{body:[0,0,0],dot:[255,	125,	198],stripe:[],eye:[255,255,255],text:"dot"},			WW:{body:[255,	125,	198],dot:[],stripe:[0,	0,	0],eye:[208, 98, 14],text:"body"},			XX:{body:[200,	124,	90],dot:[],stripe:[70,	116,	139],eye:[255,255,255],text:"stripe"},			YY:{body:[223,	173,	86],dot:[],stripe:[142,	33,	18],eye:[255,255,255],text:"stripe"},												// Added June 30 2016						aaa:{body:[112, 112, 112],dot:[],stripe:[0, 0, 0],eye:[255,	255,	255],text:"stripe"}, //			bbb:{body:[241, 182, 72],dot:[229, 123, 44],stripe:[],eye:[255,255,255],text:"dot"},			ccc:{body:[237, 195, 28],dot:[],stripe:[227, 139, 74],eye:[255,	255, 255],text:"stripe"}, //			ddd:{body:[43, 128, 255],dot:[],stripe:[6, 90, 219],eye:[255,	255, 255],text:"stripe"}, //			eee:{body:[117, 187, 15],dot:[],stripe:[94, 148, 16],eye:[255,	255, 255],text:"stripe"}, //			fff:{body:[237, 195, 28],dot:[227, 139, 74],stripe:[],eye:[255,255,255],text:"dot"},			ggg:{body:[112, 125, 252],dot:[255, 89, 221],stripe:[],eye:[255,255,255],text:"dot"},			hhh:{body:[255, 242, 14],dot:[],stripe:[255, 199, 0],eye:[172, 79, 76],text:"stripe"},			iii:{body:[198, 117, 253],dot:[],stripe:[149, 66, 230],eye:[255, 255, 255],text:"stripe"},			jjj:{body:[153, 125, 16],dot:[120, 85, 16],stripe:[],eye:[255,255,255],text:"dot"},			lll:{body:[89, 190, 16],dot:[],stripe:[16, 137, 234],eye:[255, 255, 255],text:"stripe"},			mmm:{body:[227, 161, 15],dot:[],stripe:[211, 74, 16],eye:[255, 255, 255],text:"stripe"},			nnn:{body:[169, 169, 169],dot:[133, 133, 131],stripe:[],eye:[255,255,255],text:"dot"},			ooo:{body:[255, 228, 14],dot:[],stripe:[255, 165, 15],eye:[255, 255, 255],text:"stripe"},			ppp:{body:[0, 0, 0],dot:[],stripe:[124, 84, 45],eye:[255, 255, 255],text:"stripe"},			qqq:{body:[198, 170, 15],dot:[170, 129, 16],stripe:[],eye:[0, 0, 0],text:"dot"},			rrr:{body:[158, 176, 6],dot:[],stripe:[91, 124, 0],eye:[255, 255, 255],text:"stripe"},			sss:{body:[255, 255, 255],dot:[],stripe:[72, 72, 72],eye:[49, 161, 255],text:"stripe"},			ttt:{body:[106, 106, 106],dot:[],stripe:[161, 161, 161],eye:[255, 255, 255],text:"stripe"},			uuu:{body:[255, 255, 255],dot:[],stripe:[234, 234, 234],eye:[18, 150, 208],text:"stripe"},			vvv:{body:[112, 62, 163],dot:[214, 0, 15],stripe:[],eye:[255, 255, 255],text:"dot"},			www:{body:[56, 132, 19],dot:[],stripe:[95, 57, 17],eye:[255, 255, 255],text:"stripe"},			xxx:{body:[18, 141, 201],dot:[],stripe:[17, 70, 126],eye:[255, 255, 255],text:"stripe"},			yyy:{body:[30, 242, 48],dot:[24, 191, 15],stripe:[],eye:[255, 255, 255],text:"dot"},			zzz:{body:[52, 136, 220],dot:[],stripe:[52, 136, 220],eye:[255, 255, 255],text:"stripe"},			AAA:{body:[17, 17, 17],dot:[],stripe:[74, 90, 107],eye:[255, 255, 255],text:"stripe"},        //Devo Hat			BBB:{body:[236, 236, 236],dot:[],stripe:[178, 178, 178],eye:[32, 33, 24],text:"stripe"},      //Shark			CCC:{body:[255, 255, 255],dot:[230, 230, 230],stripe:[],eye:[1, 171, 255],text:"dot"},        //Angel Halo			DDD:{body:[255, 255, 255],dot:[],stripe:[165, 164, 176],eye:[0, 0, 0],text:"stripe"},         //Black Eyemask			EEE:{body:[39, 74, 106],dot:[105, 70, 48],stripe:[],eye:[255, 255, 255],text:"dot"},          //Jason Mask			FFF:{body:[126, 158, 16],dot:[101, 115, 16],stripe:[],eye:[255, 255, 255],text:"dot"},        //Ninja Turtle Bandana			GGG:{body:[217, 178, 129],dot:[],stripe:[108, 70, 42],eye:[255, 255, 255],text:"stripe"},     //Indiana Jones Brown Fedora			HHH:{body:[157, 132, 34],dot:[],stripe:[125, 93, 27],eye:[255, 255, 255],text:"stripe"},      //Bronze Crown			III:{body:[37, 183, 233],dot:[],stripe:[27, 120, 169],eye:[255, 255, 255],text:"stripe"},     //Silver Crown			JJJ:{body:[254, 222, 54],dot:[],stripe:[253, 142, 43],eye:[255, 255, 255],text:"stripe"},     //Gold Crown			LLL:{body:[186, 146, 255],dot:[],stripe:[124, 103, 255],eye:[255, 255, 255],text:"stripe"},   //Elvis Pompadour			MMM:{body:[112, 65, 17],dot:[154, 85, 16],stripe:[],eye:[255, 255, 255],text:"dot"},          //Black Afro			NNN:{body:[189, 111, 0],dot:[],stripe:[207, 175, 18],eye:[255, 255, 255],text:"stripe"},      //Hippie Dreads			OOO:{body:[232, 173, 62],dot:[],stripe:[179, 112, 0],eye:[255, 255, 255],text:"stripe"},      //Rasta Dreads			PPP:{body:[241, 241, 241],dot:[],stripe:[255, 255, 255],eye:[0, 0, 0],text:"stripe"},			QQQ:{body:[146, 153, 147],dot:[],stripe:[114, 114, 114],eye:[0, 0, 0],text:"stripe"},         //Centurion Helm			RRR:{body:[112, 112, 112],dot:[],stripe:[17, 17, 17],eye:[255, 255, 255],text:"stripe"},      //Morpheus Helm			SSS:{body:[238, 238, 238],dot:[],stripe:[],eye:[0, 0, 0],text:"body"},                        //light grey			TTT:{body:[255, 160, 207],dot:[255, 112, 206],stripe:[],eye:[163, 54, 242],text:"dot"},       //Yellow Girls Hair 			UUU:{body:[186, 186, 186],dot:[],stripe:[131, 131, 131],eye:[255, 255, 255],text:"stripe"},   //Short Black Male Hair			VVV:{body:[255, 197, 15],dot:[246, 143, 15],stripe:[],eye:[220, 93, 53],text:"dot"},          //Blue Girls Hair 			WWW:{body:[243, 141, 15],dot:[],stripe:[246, 143, 15],eye:[150, 47, 202],text:"stripe"},      //Indian Chief			XXX:{body:[132, 167, 190],dot:[],stripe:[172, 197, 217],eye:[32, 33, 24],text:"stripe"},      //Bender			YYY:{body:[245, 204, 232],dot:[],stripe:[255, 152, 255],eye:[255, 255, 255],text:"stripe"},   //Blonde Spikey Ponytail Girl Hair			ZZZ:{body:[16, 24, 94],dot:[],stripe:[22, 63, 180],eye:[255, 255, 255],text:"stripe"},        //Brown Anime Hair			aaaa:{body:[189, 142, 88],dot:[150, 83, 54],stripe:[],eye:[255, 255, 255],text:"dot"},        //Hipster Beard Brown			bbbb:{body:[255, 218, 233],dot:[255, 181, 238],stripe:[],eye:[255, 255, 255],text:"dot"},     //Purple girls hair puff			cccc:{body:[154, 85, 16],dot:[],stripe:[112, 65, 17],eye:[255, 255, 255],text:"stripe"},      //Tall Afro			dddd:{body:[254, 180, 253],dot:[],stripe:[209, 124, 252],eye:[255, 255, 255],text:"stripe"},  //Brown Messy Pony Tail hair			eeee:{body:[247, 201, 71],dot:[235, 114, 83],stripe:[],eye:[255, 255, 255],text:"dot"},       //Poindexter Hair			ffff:{body:[204, 143, 77],dot:[165, 77, 44],stripe:[],eye:[255, 255, 255],text:"dot"},        //Hipster Afro Brown			gggg:{body:[253, 164, 46],dot:[],stripe:[254, 226, 55],eye:[27, 127, 166],text:"stripe"},     //Saiyan White			hhhh:{body:[60, 60, 60],dot:[],stripe:[117, 117, 117],eye:[255, 255, 255],text:"stripe"},     //Buzz			iiii:{body:[53, 159, 234],dot:[],stripe:[49, 115, 216],eye:[0,0,0],text:"stripe"},            //Zap																		//prestige									pra:{body:[102,	102,	102],dot:[],stripe:[0,	0,	0],eye:[255,255,255],text:"stripe"},			//bowler									prb:{body:[193,	119,	72],dot:[255,255,255],stripe:[],eye:[0,0,0],text:"dot"},					//ginuea pig									prc:{body:[255,  0,  0],dot:[],stripe:[],eye:[0,0,0],text:"body"}, //red ninja									hhb:{body:[13,	13,	13],dot:[],stripe:[230,83,54],eye:[255,255,255],text:"stripe"},		//halloween																			hhc:{body:[255,	110,	23],dot:[],stripe:[230,83,54],eye:[255,255,255],text:"stripe"},		//glow pumpkin											hha:{body:[86,	0,	199],dot:[],stripe:[0,0,0],eye:[255,255,255],text:"body"},	//witch 2										hhd:{body:[0,  0,  0],dot:[],stripe:[],eye:[255,255,255],text:"body"},	//back cat										//custom public									csb:{body:[255,	179,	255],		dot:[243,124,165],			stripe:[],		eye:[255,255,255],		text:"dot"},	//beehive											csd:{body:[113,	50,	21],		dot:[],			stripe:[230,196,149],		eye:[255,255,255],			text:"body"},	//pyramid													cse:{body:[237,	245,	170],		dot:[],			stripe:[159,232],		eye:[255,255,255],		text:"stripe"},	//red scarf																		//custom private									csa:{body:[73,	73,	73],		dot:[],			stripe:[0,0,0],		eye:[192,69,253],		text:"eye"},	//fedora											csc:{body:[142,	142,142],		dot:[],			stripe:[61,61,61],		eye:[255,240,149],			text:"dot"},	// long headband													csf:{body:[82,	249,	134],		dot:[],			stripe:[117,48,181],		eye:[17,151,255],		text:"stripe"},	//imag dragon									csg:{body:[53,	53,	53],		dot:[],			stripe:[0,0,0],		eye:[255,0,0],		text:"eye"}, // shadow link																		//indie									ic_01_:{body:[209, 112, 57], dot:[], stripe:[253, 184, 65], eye:[255,255,255], text:"body"},									ic_02_:{body:[30, 27, 29], dot:[], stripe:[234, 52, 53], eye:[255,255,255], text:"stripe"},									ic_03_:{body:[129, 115, 116], dot:[], stripe:[230, 199, 168], eye:[255,255,255], text:"body"},									ic_04_:{body:[44, 21, 44], dot:[], stripe:[42, 137, 99], eye:[255,255,255], text:"stripe"},									ic_05_:{body:[1, 4, 74], dot:[], stripe:[27, 101, 167], eye:[255,255,255], text:"stripe"},									ic_06_:{body:[61, 99, 136], dot:[], stripe:[239, 179, 134], eye:[255,255,255], text:"body"},									ic_07_:{body:[9, 81, 152], dot:[], stripe:[0, 0, 0], eye:[255,255,255], text:"body"},									ic_08_:{body:[9, 81, 152], dot:[], stripe:[0, 0, 0], eye:[255,255,255], text:"body"},									ic_09_:{body:[28, 131, 121], dot:[], stripe:[32, 200, 179], eye:[255,255,255], text:"body"},																		ic_10_:{body:[2, 11, 17], dot:[86, 114, 117], stripe:[], eye:[254, 220, 112], text:"dot"},									ic_11_:{body:[2, 11, 17], dot:[34, 55, 88], stripe:[], eye:[254, 214, 102], text:"eye"},									ic_12_:{body:[32, 59, 72], dot:[], stripe:[7, 12, 19], eye:[248, 238, 170], text:"body"},									ic_13_:{body:[12, 16, 16], dot:[], stripe:[30, 53, 4], eye:[255, 246, 172], text:"stripe"},									ic_14_:{body:[25, 25, 26], dot:[], stripe:[133, 49, 11], eye:[255, 246, 172], text:"stripe"},									ic_15_:{body:[230, 235, 215], dot:[], stripe:[255, 255, 255], eye:[0, 0, 0], text:"body"},									ic_16_:{body:[98, 47, 31], dot:[], stripe:[198, 121, 53], eye:[255,255,255], text:"stripe"},									ic_17_:{body:[0,0,0], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_18_:{body:[244, 240, 232], dot:[], stripe:[255, 255, 255], eye:[0, 0, 0], text:"body"},									ic_19_:{body:[153, 209, 49], dot:[], stripe:[209, 253, 69], eye:[0,0,0], text:"stripe"},																		ic_20_:{body:[223, 215, 209], dot:[], stripe:[255, 255, 255], eye:[0,0,0], text:"stripe"},									ic_21_:{body:[214, 72, 36], dot:[], stripe:[253, 130, 59], eye:[0,0,0], text:"body"},									ic_22_:{body:[145, 105, 67], dot:[], stripe:[84, 56, 35], eye:[0,0,0], text:"body"},									ic_23_:{body:[75, 141, 30], dot:[], stripe:[118, 167, 53], eye:[0,0,0], text:"body"},									ic_24_:{body:[233, 142, 186], dot:[], stripe:[254, 183, 217], eye:[255,255,255], text:"body"},									ic_25_:{body:[177, 6, 19], dot:[], stripe:[245, 13, 30], eye:[255,255,255], text:"stripe"},									ic_26_:{body:[24, 41, 47], dot:[], stripe:[107, 135, 112], eye:[255,255,255], text:"stripe"},									ic_27_:{body:[137, 19, 10], dot:[], stripe:[171, 44, 16], eye:[255,255,255], text:"eye"},									ic_28_:{body:[255, 255, 253], dot:[], stripe:[0, 0, 0], eye:[252, 54, 59], text:"body"},									ic_29_:{body:[0, 0, 0], dot:[], stripe:[68, 189, 249], eye:[255,255,255], text:"stripe"},																		ic_30_:{body:[0, 0, 0], dot:[], stripe:[68, 189, 249], eye:[255,255,255], text:"stripe"},									ic_31_:{body:[41, 51, 54], dot:[], stripe:[111, 113, 130], eye:[0,0,0], text:"stripe"},									ic_32_:{body:[72, 59, 138], dot:[], stripe:[140, 124, 167], eye:[0,0,0], text:"stripe"},									ic_33_:{body:[72, 1, 13], dot:[], stripe:[153, 38, 56], eye:[255,255,255], text:"stripe"},									ic_34_:{body:[77, 131, 149], dot:[], stripe:[246, 74, 180], eye:[255,255,255], text:"stripe"},									ic_35_:{body:[22, 56, 185], dot:[], stripe:[196, 93, 24], eye:[255,255,255], text:"body"},									ic_36_:{body:[101, 101, 101], dot:[], stripe:[151, 151, 152], eye:[255,255,255], text:"body"},									ic_37_:{body:[141, 129, 106], dot:[], stripe:[185, 184, 167], eye:[0,0,0], text:"eye"},									ic_38_:{body:[131, 131, 80], dot:[], stripe:[135, 80, 41], eye:[255,255,255], text:"eye"},									ic_39_:{body:[255,255,255], dot:[], stripe:[253, 156, 253], eye:[0,0,0], text:"body"},																		ic_40_:{body:[255,255,255], dot:[], stripe:[70, 184, 77], eye:[0,0,0], text:"stripe"},									ic_41_:{body:[255,255,255], dot:[], stripe:[221, 43, 46], eye:[0,0,0], text:"stripe"},									ic_42_:{body:[255,255,255], dot:[], stripe:[247, 154, 70], eye:[0,0,0], text:"stripe"},									ic_43_:{body:[255,255,255], dot:[], stripe:[85, 180, 202], eye:[0,0,0], text:"stripe"},									ic_44_:{body:[232, 232, 232], dot:[], stripe:[255,255,255], eye:[0,0,0], text:"body"},									ic_45_:{body:[232, 232, 232], dot:[], stripe:[255,255,255], eye:[0,0,0], text:"body"},									ic_46_:{body:[232, 232, 232], dot:[], stripe:[255,255,255], eye:[0,0,0], text:"body"},									ic_47_:{body:[232, 232, 232], dot:[], stripe:[255,255,255], eye:[0,0,0], text:"body"},									ic_48_:{body:[254, 203, 46], dot:[], stripe:[252, 232, 52], eye:[0,0,0], text:"stripe"},									ic_49_:{body:[19, 12, 8], dot:[], stripe:[158, 63, 57], eye:[255,255,255], text:"stripe"},																		ic_50_:{body:[59, 56, 46], dot:[], stripe:[86, 80, 56], eye:[255,255,255], text:"stripe"},									ic_51_:{body:[0, 0, 0], dot:[], stripe:[40, 40, 30], eye:[252, 68, 30], text:"stripe"},									ic_52_:{body:[61, 61, 57], dot:[], stripe:[], eye:[252, 68, 30], text:"stripe"},									ic_53_:{body:[27, 13, 45], dot:[], stripe:[118, 100, 114], eye:[252, 68, 30], text:"stripe"},									ic_54_:{body:[106, 99, 81], dot:[], stripe:[186, 178, 139], eye:[0,0,0], text:"body"},									ic_55_:{body:[53, 53, 53], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_56_:{body:[53, 53, 53], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_57_:{body:[53, 53, 53], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_58_:{body:[53, 53, 53], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_59_:{body:[0,0,0], dot:[], stripe:[], eye:[255,255,255], text:"eye"},																		ic_60_:{body:[26, 155, 252], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_61_:{body:[252, 88, 36], dot:[], stripe:[253, 126, 55], eye:[0,0,0], text:"body"},									ic_62_:{body:[150, 199, 209], dot:[], stripe:[], eye:[255,255,255], text:"eye"},									ic_63_:{body:[211, 176, 94], dot:[], stripe:[133, 68, 21], eye:[255,255,255], text:"stripe"},									ic_64_:{body:[140, 140, 140], dot:[], stripe:[41, 58, 98], eye:[255,255,255], text:"stripe"},									ic_65_:{body:[121, 182, 68], dot:[], stripe:[83, 142, 35], eye:[0,0,0], text:"stripe"},									ic_66_:{body:[216, 169, 123], dot:[], stripe:[45, 112, 184], eye:[0,0,0], text:"stripe"},									ic_67_:{body:[32, 110, 208], dot:[], stripe:[251, 224, 50], eye:[255,255,255], text:"body"},									ic_68_:{body:[250, 21, 122], dot:[], stripe:[164, 16, 127], eye:[255,255,255], text:"stripe"},									ic_69_:{body:[253, 223, 50], dot:[], stripe:[252, 170, 57], eye:[255,255,255], text:"stripe"},																											ic_70_:{body:[252, 170, 57], dot:[], stripe:[250, 82, 78], eye:[255,255,255], text:"stripe"},									ic_71_:{body:[0, 0, 0], dot:[], stripe:[], eye:[255,255,255], text:"body"},									ic_72_:{body:[249, 48, 44], dot:[], stripe:[0, 0, 0], eye:[255,255,255], text:"body"},									ic_73_:{body:[249, 48, 44], dot:[], stripe:[0, 0, 0], eye:[255,255,255], text:"body"},																		ic_74_:{body:[47, 48, 40], dot:[], stripe:[68, 69, 60], eye:[255,255,255], text:"body"},  //Dr Fetus									ic_75_:{body:[118, 129, 156], dot:[], stripe:[109, 53, 176], eye:[255,255,255], text:"body"}, //Castle Crashers King									ic_76_:{body:[123, 133, 159], dot:[], stripe:[124, 80, 59], eye:[255,255,255], text:"body"}, //Battle Block Theatre King									ic_77_:{body:[253, 177, 45], dot:[], stripe:[87, 53, 251], eye:[255,255,255], text:"stripe"}, //Brick Stonewood									ic_78_:{body:[254, 209, 232], dot:[], stripe:[246, 140, 234], eye:[255,255,255], text:"body"}, //Bunny									ic_79_:{body:[61, 143, 184], dot:[], stripe:[73, 230, 252], eye:[255,255,255], text:"body"}, // Slimo																											//halloween Masks Update Oct 2016									hhe:{body:[109,	14, 13],dot:[],stripe:[203,34,42],eye:[255,244,89],text:"stripe"},	 	//Devil									hhf:{body:[61, 61, 61],dot:[],stripe:[11, 8, 10],eye:[252, 244, 36],text:"stripe"},		//Witch Mask									hhg:{body:[248, 252, 252],dot:[],stripe:[255, 255, 255],eye:[0, 0, 0],text:"stripe"},	 	//Ghost									hhh:{body:[255, 65, 0],dot:[],stripe:[139, 33, 101],eye:[255, 255, 255],text:"stripe"},	 	//Pumpkin XL Glow 									hhi:{body:[110, 136, 44],dot:[],stripe:[128, 0, 118],eye:[255, 255, 255],text:"stripe"}, 	//Pumpkin King									hhj:{body:[95, 95, 95],dot:[],stripe:[0, 0, 0],eye:[255, 255, 255],text:"stripe"}, 		//Jackasaur									hhk:{body:[232, 232, 232], dot:[], stripe:[255,255,255], eye:[0,0,0], text:"stripe"}, 		//Zerosaurus Rex									hhl:{body:[13, 39, 70],dot:[],stripe:[42, 81, 121],eye:[255, 255, 255],text:"stripe"}, 		//Dinogorgon									hhm:{body:[70, 26, 0],dot:[],stripe:[194, 0, 0],eye:[255, 255, 255],text:"stripe"}, 		//Velocikrueger										hhn:{body:[87, 0, 0],dot:[],stripe:[237, 170, 165],eye:[255, 255, 255],text:"stripe"}, 		//Cream Raptor										hho:{body:[90, 44, 156],dot:[],stripe:[0, 0, 0],eye:[255, 255, 90],text:"stripe"}, 		//Melifisaurus 									hhp:{body:[62, 52, 48],dot:[],stripe:[55, 111, 183],eye:[255, 255, 255],text:"stripe"}, 	//Bobisaurus									hhq:{body:[17, 133, 17],dot:[],stripe:[82, 200, 66],eye:[0, 0, 0],text:"stripe"}, 		//Creepersaurus									hhr:{body:[168, 168, 168],dot:[],stripe:[237, 237, 237],eye:[82, 82, 82],text:"stripe"}, 	//Skelodon									hhs:{body:[48, 48, 48],dot:[],stripe:[17, 17, 17],eye:[223, 99, 223],text:"stripe"}, 		//Endersaur										hht:{body:[63, 78, 185],dot:[],stripe:[17, 202, 203],eye:[255, 255, 255],text:"stripe"}, 	//Dinobrine									hhu:{body:[180, 116, 44],dot:[],stripe:[115, 70,36],eye:[255, 255, 255],text:"stripe"}, 	//Freddysaurus									hhv:{body:[151, 124, 199],dot:[],stripe:[101, 69, 162],eye:[255, 255, 255],text:"stripe"}, 	//Bonniesaur									hhw:{body:[255, 255, 0],dot:[],stripe:[255, 242, 111],eye:[0, 204, 255],text:"stripe"}, 	//Chicadactyl									hhx:{body:[230, 167, 140],dot:[],stripe:[230, 71, 77],eye:[255, 255, 255],text:"stripe"}, 	//foxydocus																		//Vault									vaultA:{body:[88, 190, 18],dot:[],stripe:[17,137,234],eye:[255,255,255],text:"stripe"},	 	//Garden Gnome									vaultB:{body:[174, 192, 83],dot:[],stripe:[137,121,66],eye:[255,255,255],text:"stripe"},	//Outback Hat									vaultC:{body:[192, 133, 42],dot:[],stripe:[17,17,17],eye:[73,179,255],text:"body"},		//Sun Hat 1									vaultD:{body:[255, 255, 255],dot:[],stripe:[17,17,17],eye:[73,179,255],text:"stripe"},		//Sun Hat 2									vaultE:{body:[168, 186, 84],dot:[],stripe:[135,119,68],eye:[255,255,255],text:"stripe"},	//Hobo Hat									vaultF:{body:[238, 205, 93],dot:[237,114,78],stripe:[],eye:[255,255,255],text:"dot"},		//Welder Mask									vaultG:{body:[255, 127, 52],dot:[255,242,17],stripe:[],eye:[255,255,255],text:"dot"},		//Shades									vaultH:{body:[21, 114, 204],dot:[],stripe:[18,66,150],eye:[255,255,255],text:"body"},		//Mailman									vaultI:{body:[18, 98, 176],dot:[201,255,134],stripe:[],eye:[51,102,152],text:"stripe"},		//Hardhat									vaultJ:{body:[101, 140, 81],dot:[53,96,21],stripe:[],eye:[255,255,255],text:"body"},		//Backwards Baseball Cap blue									vaultK:{body:[0, 180, 255],dot:[0,111,189],stripe:[],eye:[0, 0, 0],text:"dot"},			//Backwards Baseball Cap red									vaultL:{body:[255, 55, 255],dot:[147,0,255],stripe:[],eye:[255,255,255],text:"body"},		//Backwards Baseball Cap black									vaultM:{body:[217, 178, 129],dot:[],stripe:[108,70,42],eye:[255,255,255],text:"stripe"},	//Jayne's Winter Cap									vaultN:{body:[0, 0, 0],dot:[214,0,0],stripe:[],eye:[255,255,255],text:"dot"},			//Racing Helmet									vaultO:{body:[28, 116, 0],dot:[],stripe:[74,31,0],eye:[255,255,255],text:"body"},		//War Pilot Helmet w Goggles									vaultP:{body:[255, 255, 255],dot:[],stripe:[29,106,163],eye:[251, 112, 112],text:"stripe"},	//Uncle Sam									vaultQ:{body:[115, 71, 22],dot:[],stripe:[207, 145, 84],eye:[255, 255, 255],text:"body"},	//Top Hat Large Brown									vaultR:{body:[89, 55, 17],dot:[],stripe:[160, 112, 65],eye:[255, 255, 255],text:"body"},	//Steampunk Top Hat									vaultS:{body:[84, 84, 84],dot:[],stripe:[0, 0, 0],eye:[255, 255, 255],text:"stripe"},		//British Cop									vaultT:{body:[165, 71, 255],dot:[],stripe:[74, 21, 140],eye:[255,255,255],text:"body"},		//Bowler Cap Short									vaultU:{body:[132, 132, 132],dot:[],stripe:[0, 0, 0],eye:[255,255,255],text:"body"},	 	//Bowler Cap Tall									vaultV:{body:[210, 179, 83],dot:[160, 135, 63],stripe:[],eye:[255,255,255],text:"dot"},	 	//Army Desert Camo									vaultW:{body:[56, 119, 179],dot:[0, 78, 119],stripe:[],eye:[255,255,255],text:"dot"},	 	//Football Helmet									vaultX:{body:[181, 38, 234],dot:[108, 0, 229],stripe:[],eye:[255,255,255],text:"eye"},	 	//Black Eyemask									vaultY:{body:[122, 201, 17],dot:[],stripe:[78, 88, 17],eye:[255,255,255],text:"stripe"},	//Baseball Helmet Red									vaultZ:{body:[201, 76, 17],dot:[],stripe:[88, 20, 17],eye:[255,255,255],text:"body"},	 	//Baseball Helmet Gray																		vaultAA:{body:[182, 17, 201],dot:[],stripe:[92, 17, 121],eye:[255,255,255],text:"stripe"},	//Baseball Helmet Blue									vaultBB:{body:[77, 77, 77],dot:[],stripe:[0, 0, 0],eye:[255,255,255],text:"body"},		//Red Eyemask Long									vaultCC:{body:[162, 102, 48],dot:[],stripe:[0, 0, 0],eye:[85, 33,25],text:"stripe"},		//Pimp Feather Hat Brown									vaultDD:{body:[255, 218, 233],dot:[255, 169, 234],stripe:[],eye:[255,255,255],text:"body"},	//Cap Pink									vaultEE:{body:[200, 255, 54],dot:[131, 206, 17],stripe:[],eye:[17,17,17],text:"body"},		//Cap Orange									vaultFF:{body:[255, 255, 9],dot:[123, 234, 0],stripe:[],eye:[0,0,0],text:"body"},		//Cap Green									vaultGG:{body:[200, 255, 122],dot:[144, 229, 126],stripe:[],eye:[95,174,17],text:"body"},	//Bicycle Helmet Blue									vaultHH:{body:[112, 17, 122],dot:[205, 131, 255],stripe:[],eye:[255,255,255],text:"body"},	//Bicycle Helmet Pink									vaultII:{body:[255, 218, 233],dot:[255, 169, 234],stripe:[],eye:[255,255,255],text:"body"},	//Bicycle Helmet Purple									vaultJJ:{body:[0, 153, 227],dot:[],stripe:[0, 193, 238],eye:[255,255,255],text:"body"},		//Heisenberg Blue									vaultKK:{body:[189, 151, 113],dot:[],stripe:[107, 73, 46],eye:[255,255,255],text:"stripe"},	//Heisenberg Fedora									vaultLL:{body:[5, 220, 5],dot:[],stripe:[121, 30, 225],eye:[255,255,255],text:"stripe"},	//Croco Big Red Top Hat									vaultMM:{body:[255,255,255],dot:[],stripe:[62, 169, 59],eye:[130,230,255],text:"stripe"},	//Link Updated									vaultNN:{body:[163,0,214],dot:[],stripe:[56, 200, 1],eye:[255,255,255],text:"body"},		//Prince of All Cosmos									vaultOO:{body:[255,166,220],dot:[],stripe:[],eye:[255,255,255],text:"body"},			//Pinky									vaultPP:{body:[65,255,255],dot:[],stripe:[],eye:[255,255,255],text:"body"},			//Inky									vaultQQ:{body:[255,175,17],dot:[],stripe:[],eye:[255,255,255],text:"body"},			//Clyde									vaultRR:{body:[40,0,255],dot:[],stripe:[],eye:[255,255,255],text:"body"},			//Scared Ghost									vaultSS:{body:[252,45,32],dot:[],stripe:[0, 0, 0],eye:[255,255,255],text:"body"},		//Cave Story									vaultTT:{body:[178,1,1],dot:[],stripe:[255, 0, 0],eye:[255,255,255],text:"body"},		//Super Crate Box Red Skull									vaultUU:{body:[211,112,49],dot:[],stripe:[255, 185, 48],eye:[255,255,255],text:"body"},		//Super Time Force Lumberjack									vaultVV:{body:[96,45,41],dot:[],stripe:[157, 80, 36],eye:[255,255,255],text:"stripe"},		//Psychonauts									vaultWW:{body:[96,45,41],dot:[150, 0, 0],stripe:[],eye:[150, 0, 0],text:"body"},		//Corporate Climber Devil									vaultXX:{body:[255,0,0],dot:[],stripe:[],eye:[255,255,255],text:"body"},			//Captain Commander Alium Red									vaultYY:{body:[0,255,0],dot:[],stripe:[],eye:[255,255,255],text:"eye"},				//Captain Commander Alium Green									vaultZZ:{body:[169, 169, 169],dot:[],stripe:[232, 232, 232],eye:[0,0,0],text:"stripe"},		//Cylon Raider Original																					vaultAAA:{body:[17, 105, 255],dot:[],stripe:[255, 123, 17],eye:[255,255,255],text:"body"},	//Goku Super Saiyan									vaultBBB:{body:[106, 14, 174],dot:[],stripe:[189, 21, 255],eye:[255,255,255],text:"body"},	//Blue Hair Female									vaultCCC:{body:[181, 77, 178],dot:[],stripe:[223, 105, 255],eye:[255,255,255],text:"body"},	//Brown Hair Pony Tail									vaultDDD:{body:[57, 102, 6],dot:[],stripe:[85, 173, 34],eye:[255,255,255],text:"body"},		//AfroHawk									vaultEEE:{body:[185, 188, 150],dot:[141, 137, 96],stripe:[],eye:[255,255,255],text:"dot"},	//Hipster Long Beard Glasses									vaultFFF:{body:[144,149, 88],dot:[88, 80, 17],stripe:[],eye:[255,255,255],text:"dot"},		//Dark Afro Beard									vaultGGG:{body:[163, 120, 72],dot:[],stripe:[226, 181, 127],eye:[0,0,0],text:"body"},		//Kramer style Hair									vaultHHH:{body:[103, 175, 36],dot:[72, 113, 30],stripe:[],eye:[0,0,0],text:"dot"},		//Red Hair Swoosh									vaultIII:{body:[114, 178, 54],dot:[86, 123, 49],stripe:[],eye:[255,255,255],text:"dot"},	//Brown Hair Swoosh									vaultJJJ:{body:[159, 76, 247],dot:[],stripe:[132, 183, 255],eye:[255,255,255],text:"body"},	//Red Long Hair Female									vaultLLL:{body:[114, 125, 55],dot:[85, 71, 0],stripe:[],eye:[255,255,255],text:"body"},		//Viking BlondeBeard									vaultMMM:{body:[125, 133, 58],dot:[],stripe:[53, 85, 1],eye:[255,255,204],text:"stripe"},	//Viking RedBeard									vaultNNN:{body:[255,255,255],dot:[],stripe:[],eye:[39,39,39],text:"body"},			//Retro Unicorn																																				//Adult Swim									ASa:{body:[242, 234, 255],dot:[],stripe:[255, 255, 255],eye:[0, 143, 241],text:"body"},		//Robot Unicorn									ASb:{body:[203, 125, 8],dot:[],stripe:[255, 200, 45],eye:[0, 0, 0],text:"body"},		//Super Puzzle Platformer									ASc:{body:[36, 130, 34],dot:[],stripe:[21, 84, 37],eye:[255, 255, 255],text:"body"},		//Hemp Tycoon									ASd:{body:[243, 130, 47],dot:[],stripe:[207, 73, 17],eye:[255, 255, 255],text:"stripe"},	//Sizzlefist									ASe:{body:[85, 39, 0],dot:[],stripe:[195, 151, 77],eye:[255, 255, 255],text:"body"},		//Volgarr Helmet									ASf:{body:[134, 82, 0],dot:[],stripe:[209, 158, 75],eye:[255, 255, 255],text:"body"},		//Volgarr 									ASg:{body:[0, 131, 200],dot:[],stripe:[181, 119, 182],eye:[255, 255, 255],text:"stripe"},	//Alan Probe Amatuer Surgeon 1									ASh:{body:[160, 158, 155],dot:[],stripe:[255, 255, 255],eye:[24, 24, 24],text:"stripe"},	//Alan Probe Amatuer Surgeon 2									ASi:{body:[108, 108, 108],dot:[],stripe:[217, 168, 118],eye:[0, 0, 0],text:"body"},		//Alan Probe Amatuer Surgeon 3									ASj:{body:[67, 146, 232],dot:[],stripe:[86, 174, 255],eye:[255, 255, 255],text:"body"},		//My Lil Bastard blue									ASk:{body:[239, 129, 199],dot:[],stripe:[255, 151, 217],eye:[255, 255, 255],text:"body"},	//My Lil Bastard pink									ASl:{body:[69, 92, 104],dot:[],stripe:[192, 161, 102],eye:[255, 255, 255],text:"body"},		//Somberobot									ASm:{body:[0, 0, 11],dot:[],stripe:[153, 103, 8],eye:[255, 255, 255],text:"stripe"},		//Sombero									ASn:{body:[109, 18, 18],dot:[],stripe:[226, 18, 18],eye:[255, 255, 255],text:"stripe"},		//SHODN Ninja Ninja									ASo:{body:[135, 93, 27],dot:[],stripe:[246, 172, 41],eye:[255, 255, 255],text:"body"},		//SHODN Ninja Yellow									ASp:{body:[39, 48, 102],dot:[],stripe:[69, 92, 247],eye:[255, 255, 255],text:"stripe"},		//SHODN Ninja Blue									ASq:{body:[76, 0, 32],dot:[],stripe:[126, 0, 161],eye:[255, 255, 255],text:"stripe"},		//SHODN Enemy Purple Ninja									ASr:{body:[51, 91, 127],dot:[],stripe:[51, 161, 127],eye:[255, 255, 255],text:"body"},		//SHODN Enemy Purple Teal									ASs:{body:[84, 17, 84],dot:[],stripe:[219, 84, 151],eye:[255, 255, 255],text:"body"}		//SHODN Enemy Monk											}					public var hatMatcher:Object = {						B:"aaa",D:"bbb",E:"ccc",F:"ee",G:"eee",H:"fff",I:"ggg",J:"hhh",K:"iii",L:"jjj",M:"lll",N:"mmm",O:"nnn",Q:"ooo",			P:"ppp",R:"qqq",S:"rrr",T:"sss",U:"ttt",V:"sss",W:"uuu",X:"vvv",Y:"www",a:"xxx",b:"yyy",c:"zzz",d:"AAA",			g:"CCC",h:"DDD",j:"EEE",m:"hhh",q:"GGG",kk:"HHH",ll:"III",mm:"JJJ",nn:"hhh",oo:"LLL",qq:"NNN",rr:"OOO",			tt:"QQQ",ub:"TTT",vb:"UUU",ac:"VVV",bc:"WWW",dc:"ee",ec:"hhh",ic:"n",kd:"YYY",ld:"ZZZ",md:"aaaa",nd:"bbbb",			od:"cccc",pd:"dddd",qd:"eeee",rd:"ffff",sd:"YYY",td:"gggg",						C:"o", 	A:"ic_28_", e:"BBB", 	f:"Q", 	g:"y", 	Z:"PPP", i:"qq", k:"N", 	l:"O", 	n:"G", 	o:"z", 	p:"FFF", 	r:"H", 				s:"nn", 	t:"ff", 	u:"hh", 	v:"ddd", 	w:"dd", 	x:"ii", 	y:"jj", 	z:"ee", 	aa:"Z", 				bb:"bb", 	cc:"Y", 	dd:"V", 	ee:"S", 	ff:"T", 	gg:"X", 	hh:"iiii", 	ii:"hhhh", 	jj:"EE", 	pp:"MMM", 				ss:"PPP", 	uu:"gg", 	vv:"GG", 	ww:"cc", 	xxx:"uu", 	yy:"g", 	zz:"LL", 	ab:"RRR", 	cb:"SSS", 	db:"AA", 				eb:"zz", 	fb:"BB", 	gb:"rr", 	hb:"ss", 	ib:"pp", 	jb:"KK", 	kb:"f", 	lb:"vv", 	mb:"a", 	nb:"kk", 				ob:"x", 	pb:"nn", 	qb:"Q", 	rb:"aaa", 	sb:"ll", 	tb:"mm", 	wb:"r", 	xb:"r", 	yb:"r", 	zb:"W", 				fc:"kk", 	gc:"EE", 	hc:"ww", 	jc:"yy", 	kc:"M", 	lc:"U", 	mc:"m", 	nc:"a", 	oc:"f", 	pc:"b", 				rc:"MM", 	sc:"NN", 	qc:"OO", 	tc:"mm", 	uc:"PP", 	vc:"k", 	wc:"m", 	xc:"QQ", 	yc:"RR", 				zc:"m", 	ad:"kk", 	bd:"SS", 	id:"SS", 	jd:"TT", 	fd:"ee", 	cd:"rr", 	hd:"k", 	ed:"m", 	gd:"UU", 				//prestige			pra:"pra", 	prb:"prb", 	prc:"f", 	hhb:"hhb", 							//halloween			hhc:"hhc", 	hha:"hha", 	hhd:"m", 							//custom			csa:"csa", 	csb:"csb", 	csc:"csc", 	csd:"csd", 	cse:"cse", 	csf:"csf", 	csg:"csg",						//indie			ic_01_:"ic_01_",ic_02_:"ic_02_",ic_03_:"ic_03_",ic_04_:"ic_04_",ic_05_:"ic_05_",ic_06_:"ic_06_",ic_07_:"ic_07_",ic_08_:"ic_08_",ic_09_:"ic_09_",ic_10_:"ic_10_",			ic_11_:"ic_11_", ic_12_:"ic_12_", ic_13_:"ic_13_", ic_14_:"ic_14_", ic_15_:"ic_15_", ic_16_:"ic_16_", ic_17_:"ic_17_", ic_18_:"ic_18_", ic_19_:"ic_19_",			ic_20_:"ic_20_", ic_21_:"ic_21_", ic_22_:"ic_22_", ic_23_:"ic_23_", ic_24_:"ic_24_", ic_25_:"ic_25_", ic_26_:"ic_26_", ic_27_:"ic_27_", ic_28_:"ic_28_", ic_29_:"ic_29_",			ic_30_:"ic_30_", ic_31_:"ic_31_", ic_32_:"ic_32_", ic_33_:"ic_33_", ic_34_:"ic_34_", ic_35_:"ic_35_", ic_36_:"ic_36_", ic_37_:"ic_37_", ic_38_:"ic_38_", ic_39_:"ic_39_",			ic_40_:"ic_40_", ic_41_:"ic_41_", ic_42_:"ic_42_", ic_43_:"ic_43_", ic_44_:"ic_44_", ic_45_:"ic_45_", ic_46_:"ic_46_", ic_47_:"ic_47_", ic_48_:"ic_48_", ic_49_:"ic_49_",			ic_50_:"ic_50_", ic_51_:"ic_51_", ic_52_:"ic_52_", ic_53_:"ic_53_", ic_54_:"ic_54_", ic_55_:"ic_55_", ic_56_:"ic_56_", ic_57_:"ic_57_", ic_58_:"ic_58_", ic_59_:"ic_59_",			ic_60_:"ic_60_", ic_61_:"ic_61_", ic_62_:"ic_62_", ic_63_:"ic_63_", ic_64_:"ic_64_", ic_65_:"ic_65_", ic_66_:"ic_66_", ic_67_:"ic_67_", ic_68_:"ic_68_", ic_69_:"ic_69_",			ic_70_:"ic_70_", ic_71_:"ic_71_", ic_72_:"ic_72_", ic_73_:"ic_73_",			ic_74_:"ic_74_", ic_75_:"ic_75_", ic_76_:"ic_76_", ic_77_:"ic_77_", ic_78_:"ic_78_", ic_79_:"ic_79_",						a:"XXC",b:"WRT",						//haloween 2			hhc_:"hhc", 	hha_:"hha", 	hhd_:"m",    hhe_:"hhe",	hhf_:"hhf",   hhg_:"hhg",  hhh_:"hhh",  hhi_:"hhi",  hhj_:"hhj",   hhk_:"hhk",   hhl_:"hhl", hhm_:"hhm", 			hhn_:"hhn",  hho_:"hho",  hhp_:"hhp",  hhq_:"hhq",  hhr_:"hhr",  hhs_:"hhs",  hht_:"hht",  hhu_:"hhu",  hhv_:"hhv",  hhw_:"hhw",   hhx_:"hhx",						//vault			vaultA_:"vaultA", vaultB_:"vaultB", vaultC_:"vaultC", vaultD_:"vaultD", vaultE_:"vaultE", vaultF_:"vaultF", vaultG_:"vaultG", vaultH_:"vaultH", vaultI_:"vaultI", vaultJ_:"vaultJ", vaultK_:"vaultK", vaultL_:"vaultL", vaultM_:"vaultM", vaultN_:"vaultN", vaultO_:"vaultO", vaultP_:"vaultP", vaultQ_:"vaultQ", vaultR_:"vaultR", vaultS_:"vaultS", vaultT_:"vaultT", vaultU_:"vaultU", vaultV_:"vaultV", vaultW_:"vaultW", vaultX_:"vaultX", vaultY_:"vaultY", vaultZ_:"vaultZ", 						vaultAA_:"vaultAA", vaultBB_:"vaultBB", vaultCC_:"vaultCC", vaultDD_:"vaultDD", vaultEE_:"vaultEE", vaultFF_:"vaultFF", vaultGG_:"vaultGG", vaultHH_:"vaultHH", vaultII_:"vaultII", vaultJJ_:"vaultJJ", vaultKK_:"vaultKK", vaultLL_:"vaultLL", vaultMM_:"vaultMM", vaultNN_:"vaultNN", vaultOO_:"vaultOO", vaultPP_:"vaultPP", vaultQQ_:"vaultQQ", vaultRR_:"vaultRR", vaultSS_:"vaultSS", vaultTT_:"vaultTT", vaultUU_:"vaultUU", vaultVV_:"vaultVV", vaultWW_:"vaultWW", vaultXX_:"vaultXX", vaultYY_:"vaultYY", vaultZZ_:"vaultZZ", 						vaultAAA_:"vaultAAA", vaultBBB_:"vaultBBB", vaultCCC_:"vaultCCC", vaultDDD_:"vaultDDD", vaultEEE_:"vaultEEE", vaultFFF_:"vaultFFF", vaultGGG_:"vaultGGG", vaultHHH_:"vaultHHH", vaultIII_:"vaultIII", vaultJJJ_:"vaultJJJ", vaultLLL_:"vaultLLL", vaultMMM_:"vaultMMM", vaultNNN_:"vaultNNN", 									//Adult Swim collection - non-pixeljam titles			ASa_:"ASa", ASb_:"ASb", ASc_:"ASc", ASd_:"ASd", ASe_:"ASe", ASf_:"ASf", ASg_:"ASg", ASh_:"ASh", ASi_:"ASi", ASj_:"ASj", ASk_:"ASk", ASl_:"ASl", ASm_:"ASm", ASn_:"ASn", ASo_:"ASo", ASp_:"ASp", ASq_:"ASq", ASr_:"ASr", ASs_:"ASs"		}																						//MP vars		private var MP:MPManager;		public var newRace:Object = { act:false };				//private var MPZones1:Array=["A","B","C","D","V"];		private var MPZones1:Array=["A","B","C","D","V","H1"];//["A","B","C","D","V"];		private var MPZones2:Array=["A","B","C","D","V","E","F","G","Y","H1"];		private var MPZones3:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","H1","H2"];		private var MPZones4:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","H1","H2"];		private var MPZones5:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","H1","H2","H3"];		private var MPZones6:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","H1","H2","H3"];		private var MPZones7:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","H1","H2","H3","H4"];		private var MPZones8:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4"];		private var MPZones9:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones10:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones11:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones12:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones13:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones14:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones15:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones16:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones17:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones18:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones19:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];		private var MPZones20:Array=["A","B","C","D","V","E","F","G","Y","H","I","J","U","K","L","M","N","O","P","X","Q","R","S","T","W","H1","H2","H3","H4","H5"];				// all colors go here		public var dinoColors:Array = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E",			"F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","aa","bb","cc","dd","ee","ff","gg","hh","ii","jj","kk","ll","mm",			"nn","oo","pp","qq","rr","ss","tt","uu","vv","ww","xx","yy","zz","AA","BB","DD","EE","GG","LL","KK","MM","NN","OO","PP","QQ","RR","SS","TT","UU","VV",			"WW","XX","YY",			"pra","prb",		//prestige			"hhb","hha","hhc",	//halloween				"csa","csb","csc","csd","cse","csf","csg",		//custom			"ic_01_","ic_02_","ic_03_","ic_04_","ic_05_","ic_06_","ic_07_","ic_08_","ic_09_","ic_10_","ic_11_","ic_12_","ic_13_","ic_14_","ic_15_","ic_16_","ic_17_","ic_18_","ic_19_","ic_20_","ic_21_","ic_22_","ic_23_","ic_24_","ic_25_","ic_26_","ic_27_","ic_28_","ic_29_","ic_30_","ic_31_","ic_32_","ic_33_","ic_34_","ic_35_","ic_36_","ic_37_","ic_38_","ic_39_","ic_40_","ic_41_","ic_42_","ic_43_","ic_44_","ic_45_","ic_46_","ic_47_","ic_48_","ic_49_","ic_50_","ic_51_","ic_52_","ic_53_","ic_54_","ic_55_","ic_56_","ic_57_","ic_58_","ic_59_","ic_60_","ic_61_","ic_62_","ic_63_","ic_64_","ic_65_","ic_66_","ic_67_","ic_68_","ic_69_","ic_71_","ic_72_","ic_73_","ic_74_","ic_75_","ic_76_","ic_77_","ic_78_","ic_79_", //indie			"hhe","hhf","hhg","hhh","hhi","hhj","hhk","hhl","hhm","hhn","hho","hhp","hhq","hhr","hhs","hht","hhu","hhv","hhw","hhx",			"vaultA","vaultB","vaultC","vaultD","vaultE","vaultF","vaultG","vaultH","vaultI","vaultJ","vaultK","vaultL","vaultM","vaultN","vaultO","vaultP","vaultQ","vaultR","vaultS","vaultT","vaultU","vaultV","vaultW","vaultX","vaultY","vaultZ","vaultAA","vaultBB","vaultCC","vaultDD","vaultEE","vaultFF","vaultGG","vaultHH","vaultII","vaultJJ","vaultKK","vaultLL","vaultMM","vaultNN","vaultOO","vaultPP","vaultQQ","vaultRR","vaultSS","vaultTT","vaultUU","vaultVV","vaultWW","vaultXX","vaultYY","vaultZZ","vaultAAA","vaultBBB","vaultCCC","vaultDDD","vaultEEE","vaultFFF","vaultGGG","vaultHHH","vaultIII","vaultJJJ","vaultLLL","vaultMMM","vaultNNN","ASa","ASb","ASc","ASd","ASe","ASf","ASg","ASh","ASi","ASj","ASk","ASl","ASm","ASn","ASo","ASp","ASq","ASr","ASs"		]				public var hats:Array = [];		//ALL HATS IN THE GAME		public var hatsMP:Array = ["xx","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d",			"e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","bb","cc","dd","ee","ff","gg","hh","ii","jj","kk","ll",			"mm","nn","oo","pp","qq","rr","ss","tt","uu","vv","ww","xxx","yy","zz","ab","cb","db","eb","fb","gb","hb","ib","jb","kb","lb","mb","nb","ob","pb",			"qb","rb","sb","tb","ub","vb","wb","xb","yb","zb","ac","bc","dc","ec","fc","gc","hc","ic","jc","kc","lc","mc","nc","oc","pc","qc","rc","sc","tc",			"uc","vc","wc","xc","yc","zc","ad","bd","cd","fd","ed","hd","gd","id","jd",			"kd","ld","md","nd","od","pd","qd","rd","sd","td",	//level 11-20			"pra","prb","prc","hhb",							//prestige			"hha","hhc","hhd",									//halloween			"csa","csb","csc","csd","cse","csf","csg",			//custom			"ic_02_","ic_03_","ic_04_","ic_05_","ic_60_","ic_61_","ic_50_","ic_51_","ic_52_","ic_53_","ic_49_","ic_10_","ic_11_","ic_12_","ic_13_","ic_14_","ic_15_","ic_16_","ic_17_","ic_18_","ic_19_","ic_20_","ic_21_","ic_22_","ic_23_","ic_25_","ic_24_","ic_74_","ic_26_","ic_27_","ic_28_","ic_29_","ic_32_","ic_33_","ic_35_","ic_34_","ic_36_","ic_37_","ic_39_","ic_40_","ic_41_","ic_42_","ic_43_","ic_75_","ic_38_","ic_76_","ic_44_","ic_45_","ic_46_","ic_47_","ic_48_","ic_54_","ic_55_","ic_58_","ic_59_","ic_62_","ic_63_","ic_64_","ic_65_","ic_06_","ic_08_","ic_68_","ic_09_","ic_77_","ic_78_","ic_79_", //indie			"hhe_","hhf_","hhg_","hhh_","hhi_","hhj_","hhk_","hhl_","hhm_","hhn_","hho_","hhp_","hhq_","hhr_","hhs_","hht_","hhu_","hhv_","hhw_","hhx_", //halloween 2			//vaults			"vaultA_","vaultB_","vaultC_","vaultD_","vaultE_","vaultF_","vaultG_","vaultH_","vaultI_","vaultJ_","vaultK_","vaultL_","vaultM_","vaultN_","vaultO_",			"vaultP_","vaultQ_","vaultR_","vaultS_","vaultT_","vaultU_","vaultV_","vaultW_","vaultX_","vaultY_","vaultZ_","vaultAA_","vaultBB_","vaultCC_","vaultDD_",			"vaultEE_","vaultFF_","vaultGG_","vaultHH_","vaultII_","vaultJJ_","vaultKK_","vaultLL_","vaultMM_","vaultNN_","vaultOO_","vaultPP_","vaultQQ_","vaultRR_",			"vaultSS_","vaultTT_","vaultUU_","vaultVV_","vaultWW_","vaultXX_","vaultYY_","vaultZZ_","vaultAAA_","vaultBBB_","vaultCCC_","vaultDDD_","vaultEEE_","vaultFFF_",			"vaultGGG_","vaultHHH_","vaultIII_","vaultJJJ_","vaultLLL_","vaultMMM_","vaultNNN_","vaultOOO_","vaultPPP_","cov1_","cov2_","cov3_","cov4_","cov5_","cov6_","cov7_",			//Adult Swim			"ASa_", "ASb_", "ASc_", "ASd_", "ASe_", "ASf_", "ASg_", "ASh_", "ASi_", "ASj_", "ASk_", "ASl_", "ASm_", "ASn_", "ASo_", "ASp_", "ASq_", "ASr_", "ASs_"		]				public var mem:Object;				var adTimer:Timer;		var md5:MD5Hash;		public var chatSent:Boolean=false;		public var msgNum:int=0;		public var funcEXE:Function = null;		public var funcDelay:int = 0;		public var funcEXE2:Function = null;		public var funcDelay2:int = 0;		public var dino:MovieClip;		public var updater:MovieClip;		private var lb:Leaderboard;		private var colorTrans:ColorTransform = new ColorTransform;		private var hatMSG:Boolean = false;						public function InterF (br):void {						assignGFX(Config.WEB ? new _InterF() : new _InterFAPP());						hideSpeech();						if (!Config.SHOW_LOG) {				graphic.debug.y = -1000;				graphic.debug.visible = false;			}						brain=br;			mem={ privateMSGNam:"", login:"", pOver:"", opt:false, chat:["",""] };						interBTS = {								Main:["StartNow","CreateNew","LoadSaved","HowTo","Options","Stats","Login","Credits","HighScores","PJ","Quit","FS","update","facebook","twitter","Customize"],//				Credits:["GoHome","RG","MT","MD"],				SubmitScore:["SubmitFinal","CancelScore"],				LoadSaved:["GoHome","Choose1","Choose2","Choose3","Clear1","Clear2","Clear3","Sure1","Sure2","Sure3","No1","No2","No3"],				HowTo:["GoHome","Tips"],				Options:["GoHome","ToggleDif","ToggleMode","ToggleProg","Cheats","Shop","StartRun","clear","freeRun"],				Cheats:["GoHome","Shop","Options","StartRun"],				Shop:["GoHome","Cheats","Options","MarkMusic"],//				Stats:["GoHome","Stats2","ChangeName","SubmitScore"],				Stats2:["GoHome","Stats"],				HighScores:["HSDone"],								//////////////////////////// MP								Warp:[],				Login:["GoHomeL","CreateAcct","Login","PlayAsGuest"],				CreateAcct:["Submit","Cancel"],				MPLobby:["SignOut","colorR","colorL","hatR","hatL","SendPrivate","CreateNewRace","JoinPrivate","MPHow","s1","s2","s3","s4","Match","ScrollLock"], //remove s4 for UPD				Disconnect:["GoHome","Warp"],				CreateNewRace:["CreateRace","CancelRace","zoneR","zoneL","players4","players3","players2","players5","players6","TogglePrivate","ToggleLvl","FreeRun"],				WaitRace:["StartRace","CancelRace","AllRaces"],//				JoinPrivate:["CancelRace","JoinPrivate2"],				Empty:[]							}						md5=new MD5Hash();												}				public function showFreerunMPPoints(addScore:int,txtAdd:String):void		{			graphic.points.gotoAndPlay ("show");			graphic.points.points.points.text = (Brain.MPMulti == 1 ? "" : "Multiplier: X"+Brain.MPMulti+"       ")+"+"+addScore+" score"+txtAdd;			graphic.points.points.points2.text = graphic.points.points.points.text;		}				public function hideSpeech():void		{			Brain.talkVisible = false;			graphic.speech.visible = false;			//graphic.speech.txt.text = "";		}				public function talk():void		{			if (!graphic.speech.visible) {				Brain.talkVisible = true;				graphic.speech.visible = true;				stage.focus = graphic.speech.txt;				flash.utils.setTimeout(function(){graphic.speech.txt.text = "";},10);							}		}				public function talkSubmit():String		{			hideSpeech();			return graphic.speech.txt.text;		}				public function resetFuncs():void		{			funcDelay = funcDelay2 = 0;			funcEXE = null;		}		public function update():void		{			if (funcDelay > 0)				funcDelay--;			if (funcEXE && funcDelay == 0) {				var f2:Function = funcEXE;				funcEXE = null;				f2();			}						if (funcDelay2 > 0)				funcDelay2--;			if (funcEXE2 && funcDelay2 == 0) {				var f22:Function = funcEXE2;				funcEXE2 = null;				f22();			}						if (hatC>0) {				hatC--;				if (hatC == 0) {					removeOtherHats();				}			}						if (indieC>0) {				indieC--;				if (indieC == 0) {					removeHatMenu();				}			}						if (mph > 0) {				mph--;			}		}				public function showLB(lbData:Object=null):void		{			if (Config.STEAM) {				flash.net.navigateToURL(new URLRequest("http://steamcommunity.com//stats/248330/leaderboards/909675"));				return;			}						if (!lbData)				lbData = new Object()			lb = new Leaderboard(lbData,this);			addChild (lb);		}				public function hideLB():void		{			removeChild (lb);			lb = null;		}						public function initNoSave () {						interX.bt_Settings.addEventListener(MouseEvent.CLICK,showSettings,false,0,true);			interX.bt_NoSaveDone.addEventListener(MouseEvent.CLICK,noSaveDone,false,0,true);					}				public function showSettings (ev) {						navigateToURL (new URLRequest ("http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager03.html"),"_blank");					}				public function noSaveDone (ev) {						interX.bt_Settings.removeEventListener(MouseEvent.CLICK,showSettings);			interX.bt_NoSaveDone.removeEventListener(MouseEvent.CLICK,noSaveDone);			showInterX (1);					}									public function keyU_D () {									switch (current) {								case "Main": removeButtons(interBTS.Main); brain.startGame(); break;				case "CreateNew": createDone(0); break;				case "Upgrade": upgradeDone(0); break;				case "MS": MSDone(0); break;				case "Stats": nameChangeDone(0); break;				case "Cheats": submitPassword(); break;				case "Login": act_Login(0); break;				case "CreateAcct": act_Submit(0); break;				case "SubmitScore": act_SubmitFinal(0); break;								case "MPLobby":				switch (interX.lobbyX.currentLabel) {					case "Main": if (stage.focus==(interX.say)) { submitChat() }; break;					case "CreateNewRace": if (stage.focus==(interX.say)) { submitChat() }; break;					case "WaitRace": if (stage.focus==(interX.say)) { submitChat() }; break;					case "JoinPrivate": act_JoinPrivate2(0); break;				}				break;							}						}				///////////////// MAIN SCREEN				public var title2:MovieClip		public var bt_StartNow:SimpleButton		public var bt_Login:SimpleButton				private function drcf(e):void		{			navigateToURL(new URLRequest("http://www.pixeljam.com/dinorun"),"_blank");		}		private function dxback(e):void		{			graphic.dxMsg.visible = false;		}				public function initMain() {									try {												resetFuncs();			hatMSG = false;						//graphic			interX = graphic.interX;			dino = graphic.dino;			updater = graphic.updater;			info = graphic.info;													//version			graphic.version.text = "V "+String(Config.VERSION == 1 ? "1.0" : Config.VERSION) + (Brain.ERROR_LOG.length > 0? " X" : "");						//connection			graphic.bt_HighScores.visible = Brain.connection;												//xgen mods			/*if (brain.xgen) { 							graphic.title2.subTitle.gotoAndStop (2);				graphic.bt_StartNow.y=394;				graphic.bt_Login.y=240;											} else {								graphic.bt_StartNow.y=214;				graphic.bt_Login.y=394;							}*/			initButtons (interBTS.Main);			current="Main";			stats=brain.sys2.stats;			MP=brain.sys.MP;			//initCheckMPTimer();			//updateNews();			showBonus();			updateDino (stats.clr,stats.hat,dino);			dino.gotoAndPlay ("Still0");			if (brain.S.mod=="MP") { if (MP.current=="lobbyCheck") { current="Empty"; MP.checkLobby() } }			if (mem.opt) { showOptions() }			if (mem.mod!=undefined) { brain.S.mod=mem.mod }															//update?			if (Brain.updateNeeded) {				if (!Brain.updateShown)					showInterX ("Update");			} else {				graphic.bt_update.visible = false;			}						if (!Brain.ENABLE_ZINC) {				graphic.bt_update.visible = false;			}										/*if (!Config.WEB) {				if (stats.dxMsg) {					graphic.dxMsg.visible = false;				} else {					graphic.dxMsg.bt_dr.addEventListener (MouseEvent.CLICK,drcf,false,0,true);					graphic.dxMsg.bt_back.addEventListener (MouseEvent.CLICK,dxback,false,0,true);					stats.savedGames.data.dxMsg = true;					stats.dxMsg = true;					stats.flushSave();				}			}*/						} catch (e:Error) {				Brain.log(e.getStackTrace());							}							}								/*public function initCheckMPTimer():void		{			if (brain.S.mod == "MP")				return;			if (current=="Main" || current=="")				MP.checkNumPlayers();			MpCheck = new Timer (5000,1000);			MpCheck.addEventListener(TimerEvent.TIMER,checkNum,false,0,true);			MpCheck.start();		}*/				/*public function checkNum (e:TimerEvent):void		{			if (current=="Main" || current=="") {				MP.checkNumPlayers();			}		}*/				/*public function stopMPCheck():void		{			if (!MpCheck)				return			MpCheck.removeEventListener(TimerEvent.TIMER,checkNum);			MpCheck.stop();;			MpCheck = null		}*/				public function showNews():void		{			showInterX ("Update");		}				private var tickerTimer:Timer;				public function startTicker():void		{			if (tickerTimer || Brain.ticker == "" || !graphic.news)				return;			trace ("startNews");			graphic.news.text = Brain.ticker;			tickerTimer = new Timer (10,100000);			tickerTimer.addEventListener(TimerEvent.TIMER,scrollTicker,false,0,true);			tickerTimer.start();									checkFRInfo(); // dumb place to put it but whatever			hideSpeech();		}				public function stopTicker():void		{			if (!tickerTimer)				return;			trace ("stopNews");			tickerTimer.stop();			tickerTimer.removeEventListener(TimerEvent.TIMER,scrollTicker);			tickerTimer = null;		}				public function scrollTicker(e:TimerEvent):void		{			TextField(graphic.news).scrollH++;			if (TextField(graphic.news).scrollH > TextField(graphic.news).maxScrollH - 20)				TextField(graphic.news).scrollH = 0;		}				private function initUpdate ():void		{			//Brain.updateShown = true;			(interX.txt as TextField).htmlText = Brain.news;			//interX.bt_update.addEventListener (MouseEvent.CLICK,getUpdate,false,0,true);			interX.bt_updateDone.addEventListener (MouseEvent.CLICK,updateDone,false,0,true);			//graphic.bt_update.visible = true;			brain.sys2.stats.updateNewsIDShown(Brain.newsID);			Brain.showNews = false;		}				private function getUpdate (e:Event):void		{			navigateToURL(new URLRequest("http://www.pixeljam.com/dinorunse/update.html"),"_blank");			graphic.bt_update.visible = false;			updateDone(null);		}				private function updateDone (e:Event):void		{			//interX.bt_update.removeEventListener (MouseEvent.CLICK,getUpdate);			interX.bt_updateDone.removeEventListener (MouseEvent.CLICK,updateDone);			showInterX ("main")		}				public function colorR(ev:MouseEvent) {						var indx:int=stats.dinoColors.indexOf(stats.clr);			indx += (ev.shiftKey ? 10 : 1);			if (indx>=stats.dinoColors.length) { indx=0 }			stats.clr=stats.dinoColors[indx];			updateDino (stats.clr,stats.hat,dino);					}				public function colorL(ev:MouseEvent) {						var indx:int=stats.dinoColors.indexOf(stats.clr);			indx -= (ev.shiftKey ? 10 : 1);			if (indx<0) { indx=stats.dinoColors.length-1 }			stats.clr=stats.dinoColors[indx];			updateDino (stats.clr,stats.hat,dino);					}				private var custShown:Boolean = false;				public function checkHatMenu():void		{			//trace (graphic,graphic.hatMenu);			if (graphic.hatMenu && graphic.hatMenu.visible == false && indieC == 0 && hatC ==0 && !custShown) {				graphic.hatMenu.visible = true;				graphic.hatMenu.flasher.gotoAndPlay (1);				custShown = true;				indieC = 240;			}						//if ((graphic.hatMenu.indie as SimpleButton).hasEventListener(MouseEvent.CLICK))				//return;			//(graphic.hatMenu.indie as SimpleButton).addEventListener(MouseEvent.CLICK,indieClick,false,0,true);			//(graphic.hatMenu.classic as SimpleButton).addEventListener(MouseEvent.CLICK,classicClick,false,0,true);		}				public function indieClick(e:Event):void		{			var indx:int=hats.indexOf("ic_02_");			stats.hat=hats[indx];			updater.hat=stats.hat;			showOtherHats();		}				public function classicClick(e:Event):void		{			var indx:int=hats.indexOf("A");			stats.hat=hats[indx];			updater.hat=stats.hat;			showOtherHats();		}				public function removeHatMenu():void		{			if (interX != undefined && interX.hatMenu!=undefined){				interX.hatMenu.visible = false;			} else if (graphic != undefined && graphic.hatMenu!=undefined) {				graphic.hatMenu.visible = false;			}  		}								public function hatR(ev:MouseEvent) {						checkHatMenu();			var indx:int=hats.indexOf(stats.hat);			trace (stats.hat,indx);			//trace (hats);			indx += (ev.shiftKey ? 10 : 1);			if (ev.shiftKey)				stats.skip10 = true;			if (indx>=hats.length) { indx=0 }			trace (hats.length,indx,hats[indx]);			stats.hat=hats[indx];			updater.hat=stats.hat;						showOtherHats();					}				public function hatL(ev:MouseEvent) {						checkHatMenu();			var indx:int=hats.indexOf(stats.hat);			indx -= (ev.shiftKey ? 10 : 1);			if (ev.shiftKey)				stats.skip10 = true;			if (indx<0) { indx=hats.length-1 }			stats.hat=hats[indx];			graphic.updater.hat=stats.hat;						showOtherHats();					}				private var hatC:int = 0;		private var indieC:int = 0;				public function showOtherHats():void		{			//try {			var indx:int=hats.indexOf(stats.hat);			for (var i:int = 1; i < 4; i++) {				var fhi:int = indx+i;				if (fhi>=hats.length) { fhi=fhi-hats.length }				dino["hat"+i].gotoAndStop((hats[fhi] == "xx" ? 1 :hats[fhi]+"1"));				//trace (hats[fhi])				dino["hat"+i].alpha = .6 - (i*.125);				var bhi:int = indx-i;				if (bhi<0) { bhi=hats.length+bhi }				dino["hatm"+i].gotoAndStop((hats[bhi] == "xx" ? 1 :hats[bhi]+"1"));				dino["hatm"+i].alpha = .6 - (i*.125);			}			hatC = 120;						if (hatMatcher[stats.hat] != undefined) {				if (!stats.matchHat) {					graphic.selectorTxt.alert.gotoAndPlay ("match");				}				graphic.bt_Match.visible = true;			} else {				graphic.bt_Match.visible = false;			}							//} catch(e){}		}				public function removeOtherHats():void		{			var indx:int=hats.indexOf(stats.hat);			for (var i:int = 1; i < 4; i++) {				dino["hat"+i].gotoAndStop(1);				dino["hatm"+i].gotoAndStop(1);			}		}				public var bonus:MovieClip;		public var bt_HighScores:SimpleButton;		public var currentPlayer:TextField;		public var currentRun:TextField;		public var playerRun:TextField;		public var singleInfo:TextField;		public var selectorTxt:TextField;		public var info:MovieClip;				public var bt_colorR:SimpleButton;		public var bt_colorL:SimpleButton;		public var bt_hatR:SimpleButton;		public var bt_hatL:SimpleButton;				public function showBonus () {						removeHatMenu();										//current info			if (brain.xgen) {								graphic.currentPlayer.text="";				graphic.currentRun.text="";				graphic.currentPlayer.y=0;				graphic.currentRun.y=0;				graphic.playerRun.visible=false;				graphic.playerRun.y=0;				//graphic.singleInfo.text=stats.nam+", "+getCurrentRun();							} else {												graphic.currentPlayer.text=stats.nam;				graphic.currentRun.text=getCurrentRun();				graphic.infoPlayerRun.gotoAndStop (Brain.freeRun?2:1);											}										var totals:Array=["A","B","C","D","E","F","G","H","I","J","K","L"];			for each (var i in totals) { graphic.bonus[i].alpha=0 }			for each (var b in stats.screenBonus) { graphic.bonus[b].alpha=1 }			if (stats.SPD>3) { graphic.bonus.E.alpha=1 }			if (stats.JMP>3) { graphic.bonus.A.alpha=1 }						graphic.bt_colorR.visible=false;			graphic.bt_colorL.visible=false;			graphic.bt_hatR.visible=false;			graphic.bt_hatL.visible=false;			graphic.selectorTxt.visible=false;						//color/hat selector			//if (stats.bonus.length>0||stats.mods.indexOf("gt")!=-1||stats.mods.indexOf("bs")!=-1||stats.mods.indexOf("ss")!=-1||stats.mods.indexOf("gs")!=-1) {								graphic.bt_colorR.visible=true;				graphic.bt_colorL.visible=true;				graphic.bt_hatR.visible=true;				graphic.bt_hatL.visible=true;				graphic.selectorTxt.visible=true;								graphic.bt_colorR.addEventListener (MouseEvent.CLICK, colorR,false,0,true);				graphic.bt_colorL.addEventListener (MouseEvent.CLICK, colorL,false,0,true);				graphic.bt_hatR.addEventListener (MouseEvent.CLICK, hatR,false,0,true);				graphic.bt_hatL.addEventListener (MouseEvent.CLICK, hatL,false,0,true);								graphic.bt_colorR.addEventListener (MouseEvent.ROLL_OVER, showHatMsg,false,0,true);				graphic.bt_colorL.addEventListener (MouseEvent.ROLL_OVER, showHatMsg,false,0,true);				graphic.bt_hatR.addEventListener (MouseEvent.ROLL_OVER, showHatMsg,false,0,true);				graphic.bt_hatL.addEventListener (MouseEvent.ROLL_OVER, showHatMsg,false,0,true);								graphic.bt_Match.addEventListener (MouseEvent.CLICK, matchHat,false,0,true);								updater.hat=stats.hat;							//}								}						private function matchHat (e:Event):void		{			if (hatMatcher[stats.hat] == undefined)				return;			stats.matchHat = true;			stats.clr=hatMatcher[stats.hat];			updateDino (stats.clr,stats.hat,dino);		}				private function matchHatX (e:Event):void		{			if (hatMatcher[MP.Self.hat] == undefined)				return;			MP.Self.clr=hatMatcher[MP.Self.hat];			updateDino(MP.Self.clr,MP.Self.hat,interX.dino);			updatePColor (MP.getPVar(MP.Self.id,"indx"),MP.Self.clr,MP.Self.prestige);		}				private function showHatMsg(e:Event):void		{			if (stats.skip10)				return;			graphic.selectorTxt.alert.gotoAndPlay (2);			hatMSG = true;		}				public function getCurrentRun () {			switch (brain.S.mod) {				case "Challenge": return brain.S.dif+" Challenge";				case "PlanetD": return brain.S.dif+" Planet D";				case "Halloween": return brain.S.dif+" Halloween Hellrun";				case "SpeedRun": case "MP": return brain.sys.gData.GD.SpeedRun[brain.sys2.stats.speedRuns[0]].nam;							}						/*if (brain.S.mod=="Challenge") {				return brain.S.mod=="PlanetD" ? brain.S.dif+" Planet D" : brain.S.dif+" Challenge"			} else { 				return brain.sys.gData.GD.SpeedRun[brain.sys2.stats.speedRuns[0]].nam			}*/					}				public function initButtons (buttons) { 			for each (var bName:String in buttons) {								graphic["bt_"+bName].addEventListener ( MouseEvent.ROLL_OVER, overMain,false,0,true ) ;				graphic["bt_"+bName].addEventListener ( MouseEvent.ROLL_OUT, outMain,false,0,true ) ;				graphic["bt_"+bName].addEventListener ( MouseEvent.CLICK, activateItem,false,0,true ) ;							} 		}					public function removeButtons(buttons:Object) {						//if (buttons == interBTS.Main)				//stopNews();									for each (var bName:String in buttons) { 							graphic["bt_"+bName].removeEventListener ( MouseEvent.ROLL_OVER, overMain ) ;				graphic["bt_"+bName].removeEventListener ( MouseEvent.ROLL_OUT, outMain ) ;				graphic["bt_"+bName].removeEventListener ( MouseEvent.CLICK, activateItem ); 							}			//if (stats.bonus.length>0) {								graphic.bt_colorR.removeEventListener (MouseEvent.CLICK, colorR);				graphic.bt_colorL.removeEventListener (MouseEvent.CLICK, colorL);				graphic.bt_hatR.removeEventListener (MouseEvent.CLICK, hatR);				graphic.bt_hatL.removeEventListener (MouseEvent.CLICK, hatL);								graphic.bt_colorR.removeEventListener (MouseEvent.ROLL_OVER, showHatMsg);				graphic.bt_colorL.removeEventListener (MouseEvent.ROLL_OVER, showHatMsg);				graphic.bt_hatR.removeEventListener (MouseEvent.ROLL_OVER, showHatMsg);				graphic.bt_hatL.removeEventListener (MouseEvent.ROLL_OVER, showHatMsg);								graphic.bt_Match.removeEventListener (MouseEvent.CLICK, matchHat);							//}		}												public function initButtonsX (buttons) { for each (var bName:String in buttons) { interX["bt_"+bName].addEventListener ( MouseEvent.CLICK, this["act_"+bName],false,0,true ) } }					public function removeButtonsX (buttons) { for each (var bName:String in buttons) { interX["bt_"+bName].removeEventListener ( MouseEvent.CLICK, this["act_"+bName] ) } }		public function initButtonsXX (buttons) { for each (var bName:String in buttons) { trace (bName); interX.lobbyX["bt_"+bName].addEventListener ( MouseEvent.CLICK, this["act_"+bName],false,0,true ) } }					public function removeButtonsXX (buttons) { for each (var bName:String in buttons) { interX.lobbyX["bt_"+bName].removeEventListener ( MouseEvent.CLICK, this["act_"+bName] ) } }				public function overMain (ev:MouseEvent) {						trace ((ev.target.name.split ("_"))[1]);			try { info.gotoAndStop((ev.target.name.split ("_"))[1]) } catch (e:Error) {}					}				public function outMain (ev:MouseEvent) {						info.gotoAndStop("main")					}				public function activateItem (ev:MouseEvent) {						brain.sys.audio.ply ("j"+brain.rand(1,4),.5,false);						var itemName=(ev.target.name.split ("_"))[1];			if (itemName=="StartNow") {								removeButtons(interBTS.Main);				brain.startGame();						} else if (itemName=="FS") {								brain.toggleFullScreen();							} else if (itemName=="Quit") {								//flash.system.fscommand("quit","true");				stats.flushSaveBackup();				NativeApplication.nativeApplication.exit();							} else if (itemName=="PJ") {								navigateToURL(new URLRequest("http://www.pixeljam.com"),"_blank");						}  else if (itemName=="facebook") {								var fbURL:String = "http://www.facebook.com/sharer.php?u=" + escape("http://www.pixeljam.com/dinorun") + "&t=" + escape("DoomSurfing in Dino Run DX");				navigateToURL(new URLRequest(fbURL));							}  else if (itemName=="twitter") {								navigateToURL(new URLRequest("http://twitter.com/home?status=Dino Run DX: http://www.pixeljam.com/dinorun"));							} else if (itemName=="Donate") {								//navigateToURL(new URLRequest("http://www.pixeljam.com/donations"),"_blank");						} else if (itemName=="update") {								navigateToURL(new URLRequest("http://www.pixeljam.com/dinorunse/update.html"),"_blank");						} else if (itemName=="HighScores") {								showLB(null);							} else if (itemName=="Customize") {								var temp:HUIV_Main = new HUIV_Main();				temp.initialize( graphic,this,stats.hat,stats.clr);			} else {								saveStats=false;				current=itemName;				showInterX (itemName);							}		}				public function act_StartRun (ev) {						if ((brain.VAR=="SP"||brain.VAR=="AR"||brain.VAR=="AG")&&(current=="Options"||current=="Cheats")) { navigateToURL(new URLRequest("http://www.xgenstudios.com/play/dinorun"),"_blank") } else {							checkInterfaceSeed();								removeButtonsX(interBTS[current]);				removeButtons(interBTS.Main);				brain.startGame();							}						}				public function checkInterfaceSeed():void		{			if (current == "Options" && !Config.WEB) {				var seedNum:int = int(interX.seed.text);				if (seedNum >= 100000) {					Brain.useSeed = seedNum;				}			}		}				public function showOptions () {						mem.opt=false;			current="Options";			showInterX ("Options");						}				public function go_to (where) {						checkInterfaceSeed();						removeButtonsX (interBTS[current]);			current=where;			showInterX (where);					}				/////// Load Saved Game				public function initCreateNew () {						current="CreateNew";						//buttons			interX.bt_Done.addEventListener (MouseEvent.CLICK, createDone,false,0,true);						if (stats.openSlots.length==0) {								interX.nameDinoClip.gotoAndStop (2)							} else {							stage.focus = interX.nameDinoClip.dinoName;				interX.nameDinoClip.dinoName.restrict = "0-9A-Za-z.,!$*()_=-";							}					}				public function createDone (ev) {						if (stats.openSlots.length!=0) {								var newName:String=interX.nameDinoClip.dinoName.text;				if (newName!="") {									stats.createNewPlayer (newName);					updateDino("A","xx",dino);					showBonus();									} else {										interX.alert.gotoAndPlay (2);									}							}						interX.bt_Done.removeEventListener (MouseEvent.CLICK, createDone);			showInterX (1);			current="";		}				public function initCredits () {						initButtonsX (interBTS[current]);			if (brain.VAR=="DF"||brain.VAR=="MC"||brain.VAR=="BF") { interX.bt_RG.visible=false; interX.bt_MD.visible=false; interX.bt_MT.visible=false; }					}				function act_RG (ev) { navigateToURL (new URLRequest("http://www.rg.org"), "_blank" ) }		function act_MT (ev) { navigateToURL (new URLRequest("http://www.webhole.com"), "_blank" ) }		function act_MD (ev) { navigateToURL (new URLRequest("http://www.myspace.com/markdenardo"), "_blank" ) }		//function act_Donate (ev) { navigateToURL (new URLRequest("http://www.pixeljam.com/donations"), "_blank" ) }						/////// Load Saved Game				public function initLoadSaved () {						initButtonsX (interBTS[current]);			interX.bt_Sure1.visible=false;			interX.bt_Sure2.visible=false;			interX.bt_Sure3.visible=false;			interX.bt_No1.visible=false;			interX.bt_No2.visible=false;			interX.bt_No3.visible=false;						//show stats of all saved games			for (var i:int=1; i<4; i++) {				 				 var slot=interX["g"+i];				 if (stats.savedGames.data["g"+i].nam!=undefined) {					 					  var savedGame=stats.savedGames.data["g"+i];					  					 //abilities					 for each (var ab:String in abs) { for (var l:int=1; l<6; l++) { if (savedGame[ab]>=l) { slot["pt_"+ab+""+l].gotoAndStop (2) } } }					 					 //other stats					 slot.nam.text=savedGame.nam;					 slot.playerScore.text=savedGame.playerScore;					 slot.bones.text=savedGame.GP;					 slot.dinosSaved.text=savedGame.dinosSaved;					 slot.eggsPL.text=savedGame.eggsPL;					 slot.superEggsPLNum.text=savedGame.superEggsPL.length;					 					 //dino					 slot.updater.hat=savedGame.hat;					 updateDino(savedGame.clr,savedGame.hat,slot.dino);					 slot.dino.gotoAndPlay ("Still0");					 				 } else {					 					 slot.gotoAndStop(2);					 interX["bt_Choose"+i].visible=false;					 interX["bt_Clear"+i].visible=false;					 				 }				 			}					}				public function act_Choose1(ev) { stats.initSaved(1); updateDino (stats.clr,stats.hat,dino); act_GoHome (0) }		public function act_Choose2(ev) { stats.initSaved(2); updateDino (stats.clr,stats.hat,dino); act_GoHome (0) }		public function act_Choose3(ev) { stats.initSaved(3); updateDino (stats.clr,stats.hat,dino); act_GoHome (0) }		public function act_Clear1(ev) { interX.bt_Clear1.visible=false; interX.bt_Sure1.visible=true; interX.bt_No1.visible=true }		public function act_Clear2(ev) { interX.bt_Clear2.visible=false; interX.bt_Sure2.visible=true; interX.bt_No2.visible=true }		public function act_Clear3(ev) { interX.bt_Clear3.visible=false; interX.bt_Sure3.visible=true; interX.bt_No3.visible=true }		public function act_Sure1(ev) { act_No1(0); interX.bt_Clear1.visible=false; stats.clearSaved(1); updateDino (stats.clr,stats.hat,dino); interX.bt_Choose1.visible=false; interX.g1.gotoAndStop (2) }		public function act_Sure2(ev) { act_No2(0); interX.bt_Clear2.visible=false; stats.clearSaved(2); updateDino (stats.clr,stats.hat,dino); interX.bt_Choose2.visible=false; interX.g2.gotoAndStop (2) }		public function act_Sure3(ev) { act_No3(0); interX.bt_Clear3.visible=false; stats.clearSaved(3); updateDino (stats.clr,stats.hat,dino); interX.bt_Choose3.visible=false; interX.g3.gotoAndStop (2) }		public function act_No1(ev) { interX.bt_Clear1.visible=true; interX.bt_Sure1.visible=false; interX.bt_No1.visible=false }		public function act_No2(ev) { interX.bt_Clear2.visible=true; interX.bt_Sure2.visible=false; interX.bt_No2.visible=false }		public function act_No3(ev) { interX.bt_Clear3.visible=true; interX.bt_Sure3.visible=false; interX.bt_No3.visible=false }				/////// How To Play				public function initHowTo () {						initButtonsX (interBTS[current]);					}				public function act_Tips (ev) {						interX.clip.play();					}						/////// Stats				public function initStats () {						if (stats.lastPS==stats.playerScore) {				interX.bt_SubmitScore.visible=false;			} else {				if (Config.STEAM) {					Brain.GSSubmitScore(stats.playerScore,"PL");					interX.bt_SubmitScore.visible=false;				} else {									}			}			interX.changeNameClip.visible=false;			initButtonsX (interBTS[current]);			defineABS();			interX.nam.text=stats.nam;			interX.playerScore.text=stats.playerScore;			interX.highScorePL.text=stats.highScorePL;			interX.dinoSaved.text=stats.dinosSaved;			interX.eggPL.text=stats.eggsPL;			interX.DNA.text=stats.DNA;			interX.GP.text=stats.GP;						interX.liz.text=stats.eatLizPL;			interX.fis.text=stats.eatFisPL;			interX.wor.text=stats.eatWorPL;			interX.bir.text=stats.eatBirPL;			interX.run.text=stats.eatRunPL;						interX.dactylRidesNum.text=stats.dactylRides;			interX.boulderRideNum.text=Math.round((stats.boulderRide/5))/10+" Sec";			interX.doomSurfNum.text=Math.round((stats.doomSurf/5))/10+" Sec";						//dino			interX.updater.hat=stats.hat;			updateDino (stats.clr,stats.hat,interX.dino);		    interX.dino.gotoAndPlay ("Still0");								}				public function act_SubmitScore (ev) {						if (brain.VAR=="TT") {								go_to ("HighScores");							} else {								if (current=="Stats") {										mem.HS={nam:stats.nam,id:"PL",catName:"Player Score",score:stats.playerScore, from:"Stats"};									} else {										mem.HS={nam:stats.nam,id:getScoreCat(),catName:getCurrentRun(),score:stats.score, from:"EndGame"};									}								go_to ("SubmitScore");							}					}				public function getScoreCat () {			switch (brain.S.mod) {								case "Challenge":					return "C"+brain.S.difNum; 				case "PlanetD":					return "P"+brain.S.difNum;				case "Halloween":					return "H"+brain.S.difNum;				case "SpeedRun": 					var num:int=(srs.indexOf(brain.S.lvl))+1; 					return (num<10)?"0"+num.toString():num.toString(); 								}			return;					}				public function initHighScores () {						/*initButtonsX (interBTS[current]);			hs=new HS (brain,interX);*/					}				public function act_HSDone (e) {						/*removeButtonsX (interBTS[current]);			hs.remove();			showInterX (1);*/					}				function initSubmitScore () {						Brain.allowMute = false;						if (Brain.ENABLE_ZINC) Mouse.show();			interX.dinoName.restrict = "0-9A-Za-z.,!$*()_=-";			initButtonsX (interBTS[current]);			interX.dinoName.text=mem.HS.nam;			interX.catName.text=mem.HS.catName;			interX.scoreNum.text=mem.HS.score;						var tNam:String=interX.dinoName.text;			tNam = searchAndReplace(tNam,"<","");			tNam = searchAndReplace(tNam,">","");			tNam = searchAndReplace(tNam,"/","");			interX.dinoName.text=tNam;					}				function EPOCH_TIME () {						 var now:Date = new Date(); 			 return now.getTime();			 		}				function act_SubmitFinal (ev) {						Brain.allowMute = true;						current="Race";						//submit vars			var scoreReq:URLRequest=new URLRequest();						//HS SUBMIT			scoreReq.url="http://www.pixeljam.com/dinorunhiscores/HvAddHighScore.php?mode="+mem.HS.id+"DX&name="+filter(interX.dinoName.text)+"&score="+mem.HS.score+"&auth="+md5.getHash(mem.HS.score+"KZXO6IUY879AJFAUaf9848$YOHLS97");			var scoreLoader:URLLoader=new URLLoader();			scoreLoader.addEventListener(Event.COMPLETE,scoreResp)			scoreLoader.addEventListener(IOErrorEvent.IO_ERROR,scoreError);			scoreLoader.load(scoreReq);							interX.bt_SubmitFinal.visible=interX.submitClip.visible = false;			interX.bt_SubmitFinal.enabled=false;							if (mem.HS.id=="PL") { stats.lastPS = mem.HS.score; stats.saveGame() }						}				function scoreResp (e:Event) {						var loader:URLLoader=URLLoader(e.target);			var str:String = String(loader.data);			if (str=="1") {								//show HS				var obj:Object = new Object();				obj.nam=filter(interX.dinoName.text);				obj.score=mem.HS.score;				obj.id=mem.HS.id;				showLB(obj);								//return to game				switch (mem.HS.from) {										case "Stats": 					go_to ("Stats");					break;										case "EndGame": 					removeButtonsX (interBTS[current]); 					showInterX (1); 					break;									}											} else {								interX.submitClip.gotoAndPlay ("error");				interX.bt_SubmitFinal.visible=interX.submitClip.visible=true;							}					}				function act_CancelScore (ev) {						Brain.allowMute = true;						switch (mem.HS.from) {								case "Stats": go_to ("Stats"); break;				case "EndGame": removeButtonsX (interBTS[current]); showInterX (1); break;								}						}				function scoreError (ev) {						if (!interX.submitClip)				return;			interX.submitClip.gotoAndPlay ("error");			interX.bt_SubmitFinal.visible=interX.submitClip.visible=true;					}		public function initStats2 () {						if (!brain.S.gold) { interX.glow.visible=false }			initButtonsX (interBTS[current]);			interX.nam.text=stats.nam;						//dino			interX.updater.hat=stats.hat;			updateDino (stats.clr,stats.hat,interX.dino);		    dino.gotoAndPlay ("Still0");						//super eggs			for each (var se:String in sEggs) {								if (stats.superEggsPL.indexOf(se)!=-1) {										interX[se].gotoAndStop (se+"1")									} else {										interX[se].gotoAndStop (se+"0")									}							}						//trophies			var trophs:Array = ["eggsPL","superEggsPLNum","eatRunPL","eatLizPL","eatFisPL","eatBirPL","eatWorPL","dinosSaved","dactylRides","boulderRide","doomSurf","buddyFound"];			for each (var tr:String in trophs) {								if (stats.trophies[tr]!="") {										var trA:Array=stats.trophies[tr].split("_");					interX[tr].gotoAndStop (tr+"_"+trA[0]);					interX[tr].desc=trA[1];					interX[tr].bt.addEventListener (MouseEvent.ROLL_OVER, trophyOver,false,0,true);					interX[tr].bt.addEventListener (MouseEvent.ROLL_OUT, trophyOut,false,0,true);									} else {										interX[tr].bt.enabled=false;									}							}											}				public function trophyOver (ev) {						var tr:MovieClip = (ev.target.parent as MovieClip);			interX.trophDesc.text=tr.desc;								}				public function trophyOut(ev) {			interX.trophDesc.text=""								}				public function act_ChangeName (ev) {						interX.changeNameClip.visible=true;			interX.changeNameClip.nam.text="";			stage.focus = interX.changeNameClip.nam;			interX.changeNameClip.bt_NameDone.addEventListener (MouseEvent.CLICK, nameChangeDone,false,0,true);					}				public function nameChangeDone (ev) {						if (interX.changeNameClip.nam.text!=""&&interX.changeNameClip.visible==true) {								interX.nam.text=stats.nam=interX.changeNameClip.nam.text;				interX.changeNameClip.bt_NameDone.removeEventListener (MouseEvent.CLICK, nameChangeDone);				interX.changeNameClip.visible=false;							}					}				public function act_Stats (ev) {						go_to("Stats");					}				public function act_Stats2 (ev) {						removePTL();			go_to("Stats2");					}					public function act_Quit(ev) {								}							public function updateMode():void		{			if (brain.S.mod == "SpeedRun") {				interX.srCover.visible = false;				interX.modeSetting.gotoAndStop ("SpeedRun");			} else {				interX.srCover.visible = true;				interX.modeSetting.gotoAndStop ("Challenge");								interX.srCover.ch.alpha = .5;				interX.srCover.pd.alpha = .5;				interX.srCover.hh.alpha = .5;				interX.srCover.ch.gotoAndStop (1);				interX.srCover.pd.gotoAndStop (1);				interX.srCover.hh.gotoAndStop (1);								switch (brain.S.mod) {					case "Challenge": interX.srCover.ch.alpha = 1; interX.srCover.ch.gotoAndStop (2); break;					case "PlanetD": interX.srCover.pd.alpha = 1; interX.srCover.pd.gotoAndStop (2); break;					case "Halloween": interX.srCover.hh.alpha = 1; interX.srCover.hh.gotoAndStop (2); break;				}							}		}				public function seedInput(e):void		{			checkSeedValue();		}				public function checkSeedValue():void		{			interX.validate.gotoAndStop (1);			if ((interX.seed as TextField).length >=6 ) {				if (int(interX.seed.text) >= 100000) {					interX.validate.gotoAndStop (2);				} else {					interX.validate.gotoAndStop (3);				}			}		}					/////// Options				public function chOver(e):void {interX.srCover.ch.alpha = 1;}		public function chOut(e):void {if (brain.S.mod != "Challenge") interX.srCover.ch.alpha = .5; }		public function chClick(e):void {brain.S.mod = "Challenge"; updateMode()}		public function pdOver(e):void {interX.srCover.pd.alpha = 1; }		public function pdOut(e):void {if (brain.S.mod != "PlanetD") interX.srCover.pd.alpha = .5; }		public function pdClick(e):void {brain.S.mod = "PlanetD"; updateMode()}		public function hhOver(e):void {interX.srCover.hh.alpha = 1; }		public function hhOut(e):void {if (brain.S.mod != "Halloween") interX.srCover.hh.alpha = .5; }		public function hhClick(e):void {brain.S.mod = "Halloween"; updateMode();}				public function toggleFRInfo():void		{			if (graphic.freeRunInfo.currentFrame == 1) {				graphic.freeRunInfo.gotoAndPlay ("show");			} else {				graphic.freeRunInfo.gotoAndPlay ("hide");			}		}				public function checkFRInfo():void		{			if (graphic.freeRunInfo.currentFrame != 1) {				graphic.freeRunInfo.gotoAndPlay ("hide");			}		}				public function freeRunInfoOver(ev):void		{			if (interX.modeSetting.currentLabel == "SpeedRun") {				interX.srCover.visible = true;			}			interX.srCover.gotoAndStop (2);		}		public function freeRunInfoOut(ev):void		{			if (interX.modeSetting.currentLabel == "SpeedRun") {				interX.srCover.visible = false;			}			interX.srCover.gotoAndStop (1);			updateMode();		}		public function seedInfoOver(ev):void		{			if (interX.modeSetting.currentLabel == "SpeedRun") {				interX.srCover.visible = true;			}			interX.srCover.gotoAndStop (3);		}		public function seedInfoOut(ev):void		{			if (interX.modeSetting.currentLabel == "SpeedRun") {				interX.srCover.visible = false;			}			interX.srCover.gotoAndStop (1);			updateMode();		}				public function initOptions () {						if (Brain.useSeed) {				interX.seed.text = Brain.useSeed;			}			interX.seed.restrict = "0-9";			checkSeedValue();						interX.seed.addEventListener(Event.CHANGE,seedInput);						updateFreeRun();						interX.bt_freeRunInfo.addEventListener(MouseEvent.ROLL_OVER,freeRunInfoOver,false,0,true);			interX.bt_freeRunInfo.addEventListener(MouseEvent.ROLL_OUT,freeRunInfoOut,false,0,true);			interX.bt_seedInfo.addEventListener(MouseEvent.ROLL_OVER,seedInfoOver,false,0,true);			interX.bt_seedInfo.addEventListener(MouseEvent.ROLL_OUT,seedInfoOut,false,0,true);									initButtonsX (interBTS[current]);			interX.difSetting.gotoAndStop (brain.S.dif);						updateMode();						interX.srCover.bt_ch.addEventListener(MouseEvent.ROLL_OVER,chOver,false,0,true);			interX.srCover.bt_ch.addEventListener(MouseEvent.ROLL_OUT,chOut,false,0,true);			interX.srCover.bt_ch.addEventListener(MouseEvent.MOUSE_DOWN,chClick,false,0,true);			interX.srCover.bt_pd.addEventListener(MouseEvent.ROLL_OVER,pdOver,false,0,true);			interX.srCover.bt_pd.addEventListener(MouseEvent.ROLL_OUT,pdOut,false,0,true);			interX.srCover.bt_pd.addEventListener(MouseEvent.MOUSE_DOWN,pdClick,false,0,true);						if (Config.HALLOWEEN) {				interX.srCover.bt_hh.addEventListener(MouseEvent.ROLL_OVER,hhOver,false,0,true);				interX.srCover.bt_hh.addEventListener(MouseEvent.ROLL_OUT,hhOut,false,0,true);				interX.srCover.bt_hh.addEventListener(MouseEvent.MOUSE_DOWN,hhClick,false,0,true);			} else {				interX.srCover.bt_hh.y = 2000;				interX.srCover.hh.y = 2000;			}						/*interX.modeSetting.gotoAndStop (brain.S.mod);			if (brain.S.mod=="PlanetD") {				interX.modeSetting.gotoAndStop ("PlanetD")				interX.srCover.gotoAndStop ("PlanetD");			} else {				interX.srCover.gotoAndStop (brain.S.mod);			}*/			interX.showProg.gotoAndStop (brain.S.showProg.toString());						interX.bones.text=stats.GP;						//init speedrun selector			var srData:Object=brain.sys.gData.GD.SpeedRun;			var unlocked:Array=stats.speedRuns;			for each (var id:String in srs) {								//set stuff				interX[id].ID=id;				interX[id].sr_nam.nam.text=srData[id].nam;				var ul:Boolean=(unlocked.indexOf(id)!=-1 || Brain.DEBUG)?true:false;				interX[id].ul=ul;				interX[id].gotoAndStop (ul?2:1)				try { interX[id].won.gotoAndStop(unlocked[unlocked.indexOf(id)+1]); } catch (e) {}								//current?				if (unlocked[0]==id) { 									interX[id].gotoAndStop(3);					cSR=id;					interX[id].bt.enabled=false;					interX[id].bt.visible=false;									} else {										//buttons					interX[id].bt.addEventListener (MouseEvent.ROLL_OVER, srOver,false,0,true);					interX[id].bt.addEventListener (MouseEvent.ROLL_OUT, srOut,false,0,true);					interX[id].bt.addEventListener (MouseEvent.CLICK, srClick,false,0,true);					interX[id].bt.enabled=true;					interX[id].bt.visible=true;								}								}					}				public function updateFreeRun():void		{			interX.freeRun.gotoAndStop (Brain.freeRun ? 2 : 1);		}				public function act_clear (ev) {			interX.seed.text = "";			Brain.useSeed = 0;			checkSeedValue();		}				public function act_freeRun (ev) {			Brain.freeRun = !Brain.freeRun;			Brain.freeRunSP = Brain.freeRun;			updateFreeRun();		}				public function srOver (ev) {						var sr:MovieClip = (ev.target.parent as MovieClip);			if (sr.ul) {								interX[sr.ID].gotoAndStop (3);							} else {								//show cost				if (interX.srMSG) interX.srMSG.visible = false;				interX[sr.ID].gotoAndStop (2);				interX.cost.text="Cost: "+brain.sys.gData.GD.SpeedRun[sr.ID].cst;							}						}				public function srOut (ev) {						var sr:MovieClip = (ev.target.parent as MovieClip);			if (sr.ul) {								interX[sr.ID].gotoAndStop (2);							} else {								//show cost				interX[sr.ID].gotoAndStop (1);				interX.cost.text="";							}					}				public function srClick (ev) {						var unlocked:Array = stats.speedRuns;			var sr:MovieClip = (ev.target.parent as MovieClip);			if (sr.ul) {								brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);				setCurrentSR (sr.ID);							} else {								//enough bones?				var cost:int = brain.sys.gData.GD.SpeedRun[sr.ID].cst;				if (stats.GP>=cost&&cost!=0) {										brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);										//yank bones					stats.GP-=cost;					interX.bones.text=stats.GP;					interX.cost.text="";					//unlock					stats.speedRuns.push (sr.ID);					stats.speedRuns.push (0);										//set					setCurrentSR (sr.ID);					sr.ul=true;									}							}					}				private function setCurrentSR (id) {									saveStats=true;			var unlocked:Array = stats.speedRuns;						//reset old			if (cSR!="") { 							interX[cSR].gotoAndStop (2)				//buttons				interX[cSR].bt.addEventListener (MouseEvent.ROLL_OVER, srOver,false,0,true);				interX[cSR].bt.addEventListener (MouseEvent.ROLL_OUT, srOut,false,0,true);				interX[cSR].bt.addEventListener (MouseEvent.CLICK, srClick,false,0,true);				interX[cSR].bt.visible=true;				interX[cSR].bt.enabled=true;						 }						//set new (take out of current position and put at front of array)			interX[id].gotoAndStop (3);			var won:int=unlocked[(unlocked.indexOf(id))+1];			unlocked.splice (unlocked.indexOf(id),2);			unlocked.unshift (won);			unlocked.unshift (id);			cSR=id;						//buttons			interX[id].bt.removeEventListener (MouseEvent.ROLL_OVER, srOver);			interX[id].bt.removeEventListener (MouseEvent.ROLL_OUT, srOut);			interX[id].bt.removeEventListener (MouseEvent.CLICK, srClick);			interX[id].bt.visible=false;			interX[id].bt.enabled=false;					}				public function act_Cheats(ev) {						if (current=="Options") { removeSR() }			if (current=="Shop") { removeItems() }			go_to("Cheats");					}				public function act_Shop(ev) {						if (current=="Options") { removeSR() }			if (current=="Cheats") { removeMods() }			go_to("Shop");					}				public function act_Options(ev) {						if (current=="Cheats") { removeMods() }			if (current=="Shop") { removeItems() }			go_to("Options");					}				private function removeSR () {						for each (var id:String in srs) {								if (interX[id].bt.hasEventListener (MouseEvent.ROLL_OVER)) {								interX[id].bt.removeEventListener (MouseEvent.ROLL_OVER, srOver);					interX[id].bt.removeEventListener (MouseEvent.ROLL_OUT, srOut);					interX[id].bt.removeEventListener (MouseEvent.CLICK, srClick);									}							}					}				public function act_ToggleDif (ev) {						brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);						var difs:Array = ["Easy","Medium","Hard","Insane"]			var cDif=difs.indexOf(brain.S.dif);			cDif++;			if (cDif==difs.length) { cDif=0 }			brain.S.dif = difs[cDif];			interX.difSetting.gotoAndStop (brain.S.dif);					}				public function act_ToggleProg (ev) {						brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);						if (brain.S.showProg==true) { brain.S.showProg=false } else { brain.S.showProg=true }						interX.showProg.gotoAndStop (brain.S.showProg.toString());					}				public function act_ToggleMode (ev) {						brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);		/*	var modes:Array = ["Challenge","SpeedRun","PlanetD"];			var currentIndex:int = modes.indexOf(brain.S.mod);			if (brain.S.mod=="PlanetD")				currentIndex = 2;			currentIndex++;			if (currentIndex>2)				currentIndex = 0;			brain.S.mod=modes[currentIndex];*/						brain.S.mod = (brain.S.mod == "SpeedRun") ? "Challenge" : "SpeedRun";			updateMode();									//interX.modeSetting.gotoAndStop (brain.S.mod);			//interX.srCover.gotoAndStop (brain.S.mod);						/*if (brain.S.mod == "PlanetD") {				brain.S.mod = "Challenge";				brain.S.mod=="PlanetD" = true;			} else {				brain.S.mod=="PlanetD" = false;			}*/					}						/////// Shop				function act_MarkMusic (ev) {						navigateToURL (new URLRequest ("itms://phobos.apple.com/WebObjects/MZStore.woa/wa/viewAlbum?i=280314018&id=280314007&s=143441"),"_blank");					}				public function initShop () {						initButtonsX (interBTS[current]);			interX.bones.text=stats.GP;			if (brain.VAR=="DF"||brain.VAR=="MC"||brain.VAR=="BF") { interX.bt_MarkMusic.visible=false }						//init item selector			var unlocked:Array=stats.dls;			for (var id in shopItems) {								if (Brain.ENABLE_UPDATES) {					if (Brain.ENABLE_ZINC && id == "M") {						interX[id].visible = false;					}				}								//set stuff				interX[id].ID=id;				interX[id].item_nam.nam.text=shopItems[id][0];				var ul:Boolean=(unlocked.indexOf(id)!=-1)?true:false;				interX[id].ul=ul;				interX[id].gotoAndStop (ul?3:1)								//buttons				interX[id].bt.addEventListener (MouseEvent.ROLL_OVER, itemOver,false,0,true);				interX[id].bt.addEventListener (MouseEvent.ROLL_OUT, itemOut,false,0,true);				interX[id].bt.addEventListener (MouseEvent.CLICK, itemClick,false,0,true);							}					}				public function itemOver (ev) {						var item:MovieClip = (ev.target.parent as MovieClip);			interX[item.ID].gotoAndStop (item.ul?3:2);			interX.desc.gotoAndStop (item.ID);			var cost=shopItems[item.ID][2];			if (cost=="?"&&brain.S.gold) { cost=0 }			if (interX.srMSG) interX.srMSG.visible = false;			interX.cost.text="Cost: "+cost;					}				public function itemOut (ev) {						var item:MovieClip = (ev.target.parent as MovieClip);			interX[item.ID].gotoAndStop (item.ul?3:1);			interX.desc.gotoAndStop (1);			interX.cost.text=""					}				public function itemClick (ev) {						brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);						var item:MovieClip = (ev.target.parent as MovieClip);			var cost=shopItems[item.ID][2];			if ((cost=="?"&&brain.S.gold)||stats.GP>=cost||item.ul) {								//download item				//navigateToURL (new URLRequest ((brain.VAR=="BF"?"http://games.bigfishgames.com/en_dino-run/online/zips/":"http://www.pixeljam.com/dinorun/bonus/")+shopItems[item.ID][1]),"_blank");				navigateToURL (new URLRequest (("http://www.pixeljam.com/dinorun/bonus/")+shopItems[item.ID][1]));								//unlock if needed				if (!item.ul) {										stats.GP-=(cost=="?"?0:cost);					interX.bones.text=stats.GP;					saveStats=true;					item.ul=true;					stats.dls.push (item.ID);									}							}					}				public function removeItems () {						for (var id in shopItems) {								interX[id].bt.removeEventListener (MouseEvent.ROLL_OVER, modOver);				interX[id].bt.removeEventListener (MouseEvent.ROLL_OUT, modOut);				interX[id].bt.removeEventListener (MouseEvent.CLICK, modClick);							}					}						/////// Cheats				public function initCheats () {						initButtonsX (interBTS[current]);						//init mod selector			var unlocked:Array=stats.mods;			var activated:Array=stats.actMods;			for (var id in mods) {								//set stuff				interX[id].ID=id;				interX[id].mod_nam.nam.text=mods[id][0];				//var ul:Boolean=(unlocked.indexOf(id)!=-1)?true:false;				var ul:Boolean=true;				var act:Boolean=(activated.indexOf(id)!=-1)?true:false;				if (id=="I"&&stats.bonus.indexOf("ht")>-1) { ul=act=true }				interX[id].ul=ul;				interX[id].act=act;				interX[id].gotoAndStop (ul?(act?3:2):1)								//buttons				interX[id].bt.addEventListener (MouseEvent.ROLL_OVER, modOver,false,0,true);				interX[id].bt.addEventListener (MouseEvent.ROLL_OUT, modOut,false,0,true);				interX[id].bt.addEventListener (MouseEvent.CLICK, modClick,false,0,true);							}					}				public function submitPassword() {						var dsp:Boolean=false;			var pass=interX.pass.text.toUpperCase();			var auth:Boolean=false;			for (var id in mods) {								var mod:Array=mods[id];				if (pass==mod[1]) {										auth=true;					if (stats.mods.indexOf(id)==-1) {												saveStats=true;						stats.mods.push (id);						interX[id].gotoAndStop (2);						interX[id].ul=true;						interX.pass.text="";																															} else { interX.desc.gotoAndPlay ("enabled") }									}							}			if (pass=="TOTINOS") { if (stats.bonus.indexOf("ds")==-1) {											 				auth=true;				stats.bonus.push ("ds");				hats.push ("jj");				stats.hat="jj";				stats.saveGame();				//play another sound				brain.sys.audio.ply ("destructo",.65,false);				interX.pass.text="";										} else { dsp=true; interX.desc.gotoAndPlay ("enabled") } }							if (!auth&&!dsp) { interX.desc.gotoAndPlay ("nope") }					}		public function modOver (ev) {						var mod:MovieClip = (ev.target.parent as MovieClip);			interX[mod.ID].gotoAndStop (mod.ul?(mod.act?2:3):2);			interX.desc.gotoAndStop (mod.ID);					}				public function modOut (ev) {						var mod:MovieClip = (ev.target.parent as MovieClip);			interX[mod.ID].gotoAndStop (mod.ul?(mod.act?3:2):1);			interX.desc.gotoAndStop (1);					}				public function modClick (ev) {						var mod:MovieClip = (ev.target.parent as MovieClip);			if (mod.ul) {								brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);								var unlocked:Array=stats.mods;				var activated:Array=stats.actMods;				if (mod.act) {										//deactivate					interX[mod.ID].gotoAndStop (2);					interX[mod.ID].act=false;					activated.splice(activated.indexOf(mod.ID),1);									} else {										brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);										//activate					interX[mod.ID].gotoAndStop (3);					interX[mod.ID].act=true;					activated.push(mod.ID);									}											}						//donate			if (mod.ID=="I") {								//url				//if (!brain.S.hats&&brain.VAR!="DF"&&brain.VAR!="MC"&&brain.VAR!="BF"&&brain.VAR!="WR") { navigateToURL (new URLRequest("http://pixeljam.com/donations"), "_blank" ) }								}					}				public function removeMods () {						for (var id in mods) {								interX[id].bt.removeEventListener (MouseEvent.ROLL_OVER, modOver);				interX[id].bt.removeEventListener (MouseEvent.ROLL_OUT, modOut);				interX[id].bt.removeEventListener (MouseEvent.CLICK, modClick);							}					}									/////// Show milestones				public function showMS() {						showInterX ("MS");					}				public function initMS() {						if (Brain.ENABLE_ZINC) Mouse.show();			current="MS";			if (brain.sys2.levelStats!=undefined) { brain.sys2.levelStats.go=false }						//show stuff			var trc:int=0;			for (var i=0; i<stats.lvlMS.length; i++) {								interX.typ.appendText(stats.lvlMS[i][0]+"\n");				interX.bonus.appendText(stats.lvlMS[i][1]+"\n")								if (stats.lvlMS[i][2].length>0) {					trc++;					var tName:String=stats.lvlMS[i][2][0];					interX["t"+trc].gotoAndStop (tName+((tName.substr(0,4)=="dino")?"B":""));									}							}						//buttons			interX.bt_Done.addEventListener (MouseEvent.CLICK, MSDone,false,0,true);						//clear MS			stats.lvlMS=[];					}				public function MSDone(ev) {						interX.bt_Done.removeEventListener (MouseEvent.CLICK, MSDone);			showInterX (1);			current="";			if (brain.sys2.levelStats!=undefined) {								brain.sys2.levelStats.c=45;				brain.sys2.levelStats.go=true;				stats.checkUpgrade();							}					}																/////// Upgrade				public function upgrade() {						showInterX ("Upgrade");					}				public function initUpgrade() {						if (Brain.ENABLE_ZINC) Mouse.show();			current="Upgrade";			brain.sys2.levelStats.go=false;			interX.DNA.text=stats.DNA;			interX.cost.text="";						//abilities			defineABS();						//buttons			interX.bt_Done.addEventListener (MouseEvent.CLICK, upgradeDone,false,0,true);					}				public function defineABS () {						for each (var ab:String in abs) { 							for (var l:int=1; l<6; l++) {										var point=interX["pt_"+ab+""+l];					point.ID=ab+""+l;									if (stats[ab]>=l) {												point.gotoAndStop (2);						point.bt.visible=false;						point.bt.enabled=false;											} else {												point.bt.addEventListener (MouseEvent.ROLL_OVER, ptRollOver,false,0,true)						point.bt.addEventListener (MouseEvent.ROLL_OUT, ptRollOut,false,0,true)						point.bt.addEventListener (MouseEvent.CLICK, ptClick,false,0,true)											}									} 							}					}				public function getCost (ID) {						var cost:int=0;			var ab=ID.substring(0,3);			var abLvl=Number(ID.substring(3,4))			var cLvl=stats[ab]+1;			for (var i=cLvl; i<=abLvl; i++) { cost+=costs[ab+i] }			return cost					}				public function ptRollOver (ev) {						var pt:MovieClip = (ev.target.parent as MovieClip);			if  (interX.srMSG)				interX.srMSG.visible = false;			interX.cost.text="COST: "+getCost(pt.ID);			pt.gotoAndStop (3);					}						public function ptRollOut (ev) {						var pt:MovieClip = (ev.target.parent as MovieClip);			interX.cost.text="";			pt.gotoAndStop (1);					}				public function ptClick (ev) {						var pt:MovieClip = (ev.target.parent as MovieClip);			var cost=getCost(pt.ID);			if (stats.DNA>=cost) {								brain.sys.audio.ply ("slurp"+brain.rand(1,3),.5,false);								stats.DNA-=cost;				interX.DNA.text=stats.DNA;				interX.cost.text="";				var ab:String=pt.ID.substring(0,3);				stats[ab]=Number(pt.ID.substring(3,4));				saveStats=true;								//update abilities				for (var l:int=1; l<6; l++) {											var point=interX["pt_"+ab+""+l];										if (stats[ab]>=l) { 												point.bt.removeEventListener (MouseEvent.ROLL_OVER, ptRollOver);						point.bt.removeEventListener (MouseEvent.ROLL_OUT, ptRollOut);						point.bt.removeEventListener (MouseEvent.CLICK, ptClick);						point.bt.visible=false;						point.bt.enabled=false;						point.gotoAndStop (2);												}										} 							}					}				public function upgradeDone (ev) {						//remove all listeners			removePTL();						stats.saveGame();			interX.bt_Done.removeEventListener (MouseEvent.CLICK, upgradeDone);			showInterX (1);			current="";			graphic.msg2.visible=true;			brain.resetFocus();			brain.sys2.levelStats.c=45;			brain.sys2.levelStats.go=true;					}				public var msg2:TextField;				public function removePTL() {					for each (var ab:String in abs) { 							for (var l:int=1; l<6; l++) {										var point=interX["pt_"+ab+""+l];					if (point.bt.hasEventListener (MouseEvent.ROLL_OVER)) {												point.bt.removeEventListener (MouseEvent.ROLL_OVER, ptRollOver);						point.bt.removeEventListener (MouseEvent.ROLL_OUT, ptRollOut);						point.bt.removeEventListener (MouseEvent.CLICK, ptClick);											}									} 							}					}		////////////////////// OTHER INTERFACE FUNCTIONS				public function initEggs () {			if (interX.eggsBones.numEggs)				interX.eggsBones.numEggs.num.text=stats.eggsGame+stats.eggs;					}				public function initEggs1 () {			funcEXE = initEggs;		}				public function initBones1 () {			funcEXE = initBones;		}				public function initBones () {			if (interX.eggsBones.numBones)				interX.eggsBones.numBones.num.text=stats.GP+stats.GPLVL;					}				public function showMessage (m) {						if (brain.sys2.levelStats==undefined&&brain.sys2.levelStatsMP==undefined&&brain.gState!="extinct") {								msg=m;				showScreen ("message");							}					}				public function act_GoHome (ev) {						if (saveStats) { stats.saveGame() }			removeButtonsX (interBTS[current]);			startTicker();			switch (current) {				case "Stats": removePTL(); break;				case "Options": removeSR(); break;				case "Cheats": removeMods(); break;				case "Shop": removeItems(); break;							}			if (MP.current=="race") { current=""; brain.S.mod=mem.mod; brain.restart() } else {								warn=false;				showBonus();				showInterX (1);				current="";								if (MP.connected) {					MP.closeSocket();				}								Brain.freeRun = Brain.freeRunSP;							}					}				public function initBoot () {						if (bootMSG!="") {				interX.boot.res=bootMSG;				interX.boot.gotoAndPlay (2);				bootMSG="";			}					}		public function act_GoHomeL (ev) {						MP.undoAPI();			removeButtonsX (interBTS[current]);			showBonus();			showInterX (1);			current="";			startTicker();						if (MP.connected) {				MP.closeSocket();			}						Brain.freeRun = Brain.freeRunSP;					}						public var endTxt:MovieClip;				public function initEndTxt () {						if (stats.cont==0 && Brain.ENABLE_ZINC)				Mouse.show();			graphic.endTxt.endTxtClip.txt.text = (stats.cont==0)?"Extinct":"Doomed";			funcEXE = initRestartText;			funcDelay = 199;					}				public var rt:MovieClip				private function submitScore (ev) {						graphic.rt.rtc.bt_SubmitScore.removeEventListener (MouseEvent.CLICK,submitScore);			act_SubmitScore(0) 			graphic.rt.rtc.bt_SubmitScore.visible=false;					}				public function steamSubmitScore():void		{			trace ("cheat",brain.S.cheat);			if (brain.S.cheat)				return;			Brain.GSSubmitScore(stats.score,getScoreCat());		}				public function initRestartText () {			rt = graphic.rt;			//rt.gotoAndStop (Brain.ENABLE_ZINC ? 1 : 2); //alt			rt.gotoAndStop (1);			if (Config.STEAM) {				rt.rtc.gotoAndStop (2);				steamSubmitScore();			} else {				rt.rtc.bt_SubmitScore.addEventListener (MouseEvent.CLICK,submitScore,false,0,true);			}						if (brain.S.mod=="MP") { brain.restart() } else {								rt.numCont.htmlText=(brain.S.mod=="SpeedRun")?"":"<font color='#00BFF3'>You have </font>"+stats.cont+" Time ShiFt"+((stats.cont==1)?"":"s")+ " <font color='#00BFF3'>remaining.</font>";				if (stats.cont==0) { 									rt.rtc.alpha=1;					if (brain.S.cheat) { rt.rtc.bt_SubmitScore.visible=false }					//brain.submitHS();									} else { rt.rtc.visible=false }							}					}						public function initLevelStart () {			if (Brain.ENABLE_ZINC) Mouse.hide()			graphic.lvlDesc.msg.text = lvlDesc;			graphic.lvlDesc2.msg.text = lvlDesc;			graphic.levelTitle.title2.txt.text = lvlName;			graphic.levelTitleSH.title2.txt.text = lvlName;			graphic.levelTitle.blend.gotoAndPlay (brain.S.colorV);		}				public function initWin () {			if (Brain.ENABLE_ZINC) Mouse.show();			graphic.winText.txt.text = lvlName;			graphic.winText2.txt.text = lvlName;			if (flsh) { graphic.flasher.gotoAndPlay (2) }		}				public function initWinMP () {			graphic.winText.txt.text = lvlName;			graphic.winText2.txt.text = lvlName;			/*if (!Brain.ENABLE_ZINC) //alt				graphic.lobbyReturn.gotoAndStop (2);*/		}				public function initEndLevel () {			graphic.winText.txt.text = lvlName;			graphic.winTextSH.txt.text = lvlName;		}				public function initMessage () {			graphic.message.txtClip.txt.text=msg;			graphic.message2.txtClip.txt.text=msg;		}								public function showScreen (id) {			brain.removeTabs();			trace (id);			graphic.gotoAndPlay (id);			switch (id) {				case "main": resetFuncs(); funcEXE = initMain; break;				case "levelStart": funcEXE = initLevelStart; break;				case "win": funcEXE = initWin; break;				case "winMP": funcEXE = initWinMP; break;				case "endLevel": funcEXE = initEndLevel; break;				case "message": funcEXE = initMessage; break;				case "gameOver": funcEXE = initEndTxt; funcDelay = 35; break;				case "error": funcEXE = initError; break;				case "pauseOn": 					/*if (!Brain.ENABLE_ZINC && graphic.msg) //alt						graphic.msg.gotoAndStop (2);*/					funcEXE = initPause; 					funcDelay = 0;					break;			}					}				public function initPause():void		{			/*if (!Brain.ENABLE_ZINC) //alt				graphic.msg.gotoAndStop (2);*/			graphic.seed.text = Rndm.seed;			graphic.seed2.text = Rndm.seed;		}				public function initError ():void					{			graphic.mess.text = msg;			brain.looper ("stop");		}				public function showLobbyX (id) {						interX.lobbyX.gotoAndStop (id);			switch (id) {				case "CreateNewRace": funcEXE = initCreateNewRace; break;				case "WaitRace": funcEXE = initWaitRace; break;				case "JoinPrivate": funcEXE = initJoinPrivate; break;			}					}				public function showInterX (id) {			brain.removeTabs();			var app:String = "";			if (id == "Login" && Config.STEAM) {				app = "ST";			}			interX.gotoAndStop (id+app);			switch (id) {				case "SubmitScore": funcEXE2 = initSubmitScore; break;				case "Credits": funcEXE2 = initCredits; break;				case "CreateNew": funcEXE2 = initCreateNew; break;				case "LoadSaved": funcEXE2 = initLoadSaved; break;				case "HowTo": funcEXE2 = initHowTo; break;				case "Options": funcEXE2 = initOptions; break;				case "Cheats": funcEXE2 = initCheats; break;				case "Shop": funcEXE2 = initShop; break;				case "Stats": funcEXE2 = initStats; break;				case "Stats2": funcEXE2 = initStats2; break;				case "Upgrade": funcEXE2 = initUpgrade; break;				case "MS": funcEXE2 = initMS; break;				case "Update": funcEXE2 = initUpdate; break;				case "Warp": funcEXE2 = initWarp; break;				case "Login": funcEXE2 = initLogin; break;				case "CreateAcct": funcEXE2 = initCreateAcct; break;				case "MPLobby": funcEXE2 = initMPLobby; break;				case "Ad": funcEXE2 = initAd; break;				case "Disconnect": funcEXE2 = initDisconnect; break;				case "RaceLimbo": funcEXE2 = initRaceLimbo; break;			}											}				public function win () {						lvlName="Survival!";			if (brain.S.BC) { lvlName="Paradise"; flsh=true }			showScreen ("win");			graphic.scoreSubmitted.visible = false;					}				public function winMP (surv) {						lvlName=(surv)?"Survival!":"Hurry Up!";			showScreen ("winMP");					}				public function raceOver () {						lvlName="End Of Race";			showScreen ("winMP");					}				public function endLevel () {						if (brain.doom.dif<350) { lvlName="Yikes!" } else 			if (brain.doom.dif>=350&&brain.doom.dif<800) { lvlName="Close Call..." } else 			if (brain.doom.dif>=800&&brain.doom.dif<1500) { lvlName="Nice" } else { lvlName="Excellent" }			showScreen ("endLevel");					}				public function oops (m) {						trace (m);			msg=m;			showScreen ("error");					}				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////				//MULTIPLAYER				//buttons		private function disableBT(nam) {						trace (nam);			interX["bt_"+nam].mouseEnabled = false;			interX["bt_"+nam].enabled=false;			interX["bt_"+nam].alpha=.25;					}				private function enableBT(nam) {						interX["bt_"+nam].mouseEnabled = true;			interX["bt_"+nam].enabled=true;			interX["bt_"+nam].alpha=1;					}				//Warp				public function initWarp () {						current2="";			newRace={act:false};			//MP.removeNumPlayers();			if (Config.MMOCHA2 && MP.current!="loginGuest" && MP.current!="create") {				trace ("bloof")				C_Success();			} else {				trace ("blif");				MP.Connect();			}					}				public function modMSG(msg:String,all:Boolean=false) {			interX.modMSG.gotoAndStop (2);			interX.modMSG.mod1.text = all?"A moderator sent this message to the entire lobby:":"A moderator sent this message to you:"			interX.modMSG.mod2.text = msg;		}				public function modBack(e){			interX.modMSG.gotoAndStop (1);		}				public function act_Warp (ev) {						go_to("Warp");					}				public function C_Success () {						MP.checkLobby();					}				public function C_Fail () {						interX.warpMessage.visible=false;			timer = new Timer (2500,1);			timer.addEventListener(TimerEvent.TIMER, goHome,false,0,true);			timer.start();									}				public function C_Close () {						if (bootMSG != "") {				trace ("vlose",bootMSG);				act_SignOut(null);				return;			}						if (current=="MPLobby") { removeLobbyListeners() }						go_to("Disconnect");					}				public function initDisconnect () {						initButtonsX (interBTS[current]);					}				public function goHome (ev) {						timer.stop();			timer.removeEventListener(TimerEvent.TIMER, goHome);			act_GoHome(0);					}							//Login				public function initLogin () {						brain.enableTabs();			interX.user.tabIndex=0;			interX.pass.tabIndex=1;						interX.offLine.visible = false;			MP.initAPI();			//stats.loadBlocked();			interX.user.restrict="A-Z0-9a-z,.";			interX.pass.restrict="A-Z0-9a-z,.";			initButtonsX (interBTS[current]);			//interX.user.text = mem.login;						if (Config.AUTO_LOGIN) {				act_Login(null);			}						Config.STEAM_MP = false;			if (Config.STEAM) {				interX.steamLogin.addEventListener (MouseEvent.CLICK,steamLogin,false,0,true);			}						//saved login			interX.saveLogin.gotoAndStop (Brain.saveLogin?1:2);			interX.user.text = Brain.loginU;			interX.pass.text = Brain.loginP;						interX.bt_save.addEventListener (MouseEvent.CLICK,toggleLoginSave,false,0,true);		}				public function toggleLoginSave(e):void		{			Brain.saveLogin = !Brain.saveLogin;			interX.saveLogin.gotoAndStop (Brain.saveLogin?1:2);			brain.sys2.stats.saveLoginPref(Brain.saveLogin);					}				public function steamLogin(e):void		{			Config.STEAM_MP = true;			//MP.login(prepend_username("18181818"),"18181818"); //MPTEMP			MP.login(prepend_username(Brain.gameStats.getUserID()),Brain.gameStats.getUserID()); 		}				public function prepend_username(str:String):String		{			var pre:String = "zz.";			return pre + str;		}				public function loadError ():void		{			if (interX.offLine)				interX.offLine.visible = true;		}				public function act_CreateAcct (ev) {						go_to("CreateAcct");					}				public function act_Login (ev) {						//authenticate			interX.login.gotoAndPlay (2);			interX.bt_Login.visible=false;						if (Brain.saveLogin) {				brain.sys2.stats.saveLogin(interX.user.text.toLowerCase(),interX.pass.text.toLowerCase());			} else {				Brain.loginP = Brain.loginU = "";			}						if (Config.AUTO_LOGIN) {				MP.login("milestilmann","moxie1020");//CHECK - ERASE THIS BEFORE LAUNCH!			} else {				MP.login(interX.user.text.toLowerCase(),interX.pass.text.toLowerCase());			}			//mem.login=interX.user.text.toLowerCase();								}				public function act_PlayAsGuest (ev) {						MP.loginAsGuest();					}						// Create Account				public function initCreateAcct () {						brain.enableTabs();			interX.s_user.tabIndex=0;			interX.s_pass.tabIndex=1;			interX.s_email.tabIndex=2;						interX.alert.gotoAndStop ("create");			initButtonsX (interBTS[current]);			interX.s_user.restrict="A-Z0-9a-z,.";			interX.s_pass.restrict="A-Z0-9a-z,.";					}				public function act_Submit (ev) {						//submit new info			MP.create(interX.s_user.text,interX.s_pass.text,interX.s_email.text);			interX.submit.gotoAndPlay (2);			interX.bt_Submit.visible=false;					}				public function initAlert () {						switch (current) {								case "Login":				interX.login.gotoAndStop (1);				interX.bt_Login.visible=true;				break;								case "CreateAcct":				interX.submit.gotoAndStop (1);				interX.bt_Submit.visible=true;				break;							}					}				public function act_Cancel (ev) {						go_to("Login");					}				//ads				public function initAd () {						if (brain.xgen) { 							adTimer = new Timer (20000,1);				adTimer.addEventListener(TimerEvent.TIMER, stopAd,false,0,true);				adTimer.start();				ExternalInterface.call("ShowAd") 							//} else if (!brain.S.hats) { 			} else { 							//MochiAd.showInterLevelAd({clip:interX.mochiAd, id:"f1b8abd18fce4039", res:"800x450", no_bg:true});						} //else { brain.restart() }					}				public function endMochi() {						brain.restart();					}							/*public function adBar (ev) {						interX.adBar.nextFrame();			if (interX.adBar.currentFrame>=100) { stopAd () }				}*/				public function stopAd (ev) {						adTimer.stop();			adTimer.removeEventListener(TimerEvent.TIMER, stopAd);			adTimer=null;			brain.restart();					}				// MP Lobby				public function removeDropped () {						interX.MPHowTo.gotoAndStop(1);					}				function enterChat (e) {						interX.warning.enterChat.removeEventListener (MouseEvent.CLICK, enterChat);			interX.warning.visible=false;			warn=true;					}				public var lvlHats:Array=["dc","ac","vb","ub","oo","pp","qq","rr","ss"];				public function showMPNews ():void		{			interX.modMSG.gotoAndStop (3);			interX.modMSG.txt.htmlText = Brain.MPNews;			brain.sys2.stats.updateMPNewsIDShown(Brain.MPNewsID);			Brain.showMPNews = false;		}		public function initMPLobby () {						stopTicker();						Brain.freeRunSP = Brain.freeRun;						if (interX.hatMenu) interX.hatMenu.visible = false;												//servers			/*if (Brain.numServers == 2) {				interX.bt_s3.y = -2000;				interX.s3.visible = false;			} else if (Brain.numServers == 1) {				interX.s3.visible = false;				interX.bt_s3.y = -2000;				interX.s2.visible = false;				interX.bt_s2.y = -2000;			}*/						if (isMod(MP.Self.nam) || warn || !Config.WEB) {				interX.warning.visible=false;			} else {				interX.warning.enterChat.addEventListener (MouseEvent.CLICK, enterChat, false, 0, true);			}									msgNum=0;			mem.mod=brain.S.mod;			MP.stopHB2();			interX.MyRace.bt_MyRace.addEventListener ( MouseEvent.MOUSE_DOWN, showMyRace,false,0,true );			interX.MyRace.bt_CancelCur.addEventListener ( MouseEvent.MOUSE_DOWN, act_CancelRace,false,0,true );			interX.MyRace.visible=false;			interX.modMSG.bt_back.addEventListener ( MouseEvent.MOUSE_DOWN, modBack,false,0,true );			if (!MP.Self.guest && !MP.banned || isMod(MP.Self.nam)) interX.noChat.visible=false;			if (MP.banned) interX.noChat.noChat.visible=false;						//mpnews			if (Brain.showMPNews) {				showMPNews();			}						//ad?			interX.MPHowTo.gotoAndStop(1);			initButtonsX (interBTS[current]);			//			MP.Self.lvl=MP.getLvl(MP.Self.score);						//hairstyles							//  2    3    4    5    6    7    8    9   10						if (Config.UPDATE_ID >= 1) {				      //  2    3    4    5    6    7    8    9   10   11    12   13   14   15   16   17  18   19    20				lvlHats=["dc","ac","vb","ub","oo","pp","qq","rr","ss","kd","ld","md","nd","od","pd","qd","rd","sd","td"];			}						for (var ii:int=0; ii<=MP.Self.lvl-2; ii++) { if (hats.indexOf(lvlHats[ii])==-1) { hats.push (lvlHats[ii]); trace (ii,lvlHats[ii]) } }			if (hats.length>0) { if (hats.indexOf("xx")==-1) { hats.unshift("xx") } }									interX.hatWord.gotoAndStop (hats.length>0?1:2);			showStats(MP.Self.nam,true);			interX.dino.gotoAndPlay ("Still0");			updatePlayers();			updateRaces();									//init draggers+related buttons			interX.dr_players.addEventListener ( MouseEvent.MOUSE_DOWN, p_down,false,0,true );			interX.btu_players.addEventListener ( MouseEvent.MOUSE_DOWN, p_down,false,0,true );			interX.btd_players.addEventListener ( MouseEvent.MOUSE_DOWN, p_down,false,0,true );			//			interX.dr_races.addEventListener ( MouseEvent.MOUSE_DOWN, r_down,false,0,true );			interX.btu_races.addEventListener ( MouseEvent.MOUSE_DOWN, r_down,false,0,true );			interX.btd_races.addEventListener ( MouseEvent.MOUSE_DOWN, r_down,false,0,true );			//			interX.dr_chat.addEventListener ( MouseEvent.MOUSE_DOWN, c_down,false,0,true );			interX.btu_chat.addEventListener ( MouseEvent.MOUSE_DOWN, c_down,false,0,true );			interX.btd_chat.addEventListener ( MouseEvent.MOUSE_DOWN, c_down,false,0,true );						//server tabs			updateTabs();						//dropped?			if (brain.slow) {								brain.slow=false;				interX.MPHowTo.gotoAndStop(5);							}						//add chat text			//interX.chat.htmlText+="<font color='#DA1D1D'>To get 50+ extra hats, please donate any amount: </font><font color='#289FAC'><a href='http://www.pixeljam.com/donations' target='_blank'>pixeljam.com/donations</a> <br><br>*************************************</font>"						//(interX.indie as SimpleButton).addEventListener(MouseEvent.CLICK,customizeMP,false,0,true);			(interX.hatUI as SimpleButton).addEventListener(MouseEvent.CLICK,customizeMP,false,0,true);		}				public function customizeMP(e):void		{			var temp:HUIV_Main = new HUIV_Main();			temp.initialize( graphic,this,MP.Self.hat,MP.Self.clr);		}						public function updateTabs() {						interX.s1.gotoAndStop ("no");			interX.s2.gotoAndStop ("no");			interX.s3.gotoAndStop ("no");			interX.s4.gotoAndStop ("no");			interX.bt_s1.visible=true;			interX.bt_s2.visible=true;			interX.bt_s3.visible=true;			interX.bt_s4.visible=true; 			interX.bt_s1.enabled=true;			interX.bt_s2.enabled=true;			interX.bt_s3.enabled=true;			interX.bt_s4.enabled=true; 			interX.bt_s1.mouseEnabled=true;			interX.bt_s2.mouseEnabled=true;			interX.bt_s3.mouseEnabled=true;			interX.bt_s4.mouseEnabled=true; 						//var id:int = MP.DX ? 1 : MP.serverNum+1; // remove this for UPD			var id:int = MP.serverNum;						interX["s"+id].gotoAndStop ("yes"); 			interX["bt_s"+id].visible=false;			interX["bt_s"+id].enabled=false;			interX["bt_s"+id].mouseEnabled=false;					}				/*public function act_s1 (ev) { MP.DX = true; switchServer(1) }		public function act_s2 (ev) { MP.DX = false; switchServer(1) }		public function act_s3 (ev) { MP.DX = false; switchServer(2) }		public function act_s4 (ev) { MP.DX = false; switchServer(3) }*/				public function act_s1 (ev) { MP.DX = true; switchServer(1) }		public function act_s2 (ev) { MP.DX = true; switchServer(2) }		public function act_s3 (ev) { MP.DX = true; switchServer(3) }		public function act_s4 (ev) { MP.DX = true; switchServer(4) }				private var serverNames:Array = ["","PARADISE","DINO CENTRAL","STONEYVILLE","BONEDOCKS"];				public function switchServer (num) {						MP.serverNum=num;			interX.MPHowTo.gotoAndStop(3);			var serverName:String = serverNames[num];			interX.chat.htmlText+="<font color='#DA1D1D'>---------------------------<br>SWITCHING SERVER TO: "+serverName+"<br>---------------------------</font>"			updateChatDragger();			MP.stopHB();			updateTabs();			MP.switchServer();					}				public function act_MPHow (ev) {						if (current=="MPLobby") {						interX.bt_MPHow.visible=false;			interX.MPHowTo.gotoAndStop(2);			interX.MPHowTo.bt_BackToLobby.addEventListener ( MouseEvent.CLICK, backToLobby,false,0,true );						}					}				public function backToLobby (ev) {						if (current=="MPLobby") {						interX.MPHowTo.bt_BackToLobby.removeEventListener ( MouseEvent.CLICK, backToLobby );			interX.MPHowTo.gotoAndStop(1);			interX.bt_MPHow.visible=true;						}					}					private var format:TextFormat = new TextFormat();				public function showStats (who,init) {						//trace ("showStats",who)						//who = addPrepend(who);//TODO - this needs work						if (current=="MPLobby") {							var dStats:Object=MP.getStats(who);				var self:Boolean=(MP.Self.nam==who || MP.Self.persona==who);				//trace (MP.Self.nam,self);								var lvls:Array = Config.UPDATE_ID >= 1 ? MPManager.lvlsNEW : MPManager.lvlsOLD;				lvls.push("?");								interX.score.htmlText=dStats.score+(self?"<font color='#AB9D87'>/"+lvls[MP.Self.lvl+1]:"");				interX.level.text=dStats.lvl;				interX.nam.text=showName(dStats);				if (MP.hasPrestige(dStats.nam)) {//MPTODO - does this work?					interX.namP.text= showName(dStats);					format.color = 0xe38700;					(interX.nam as TextField).setTextFormat(format);				} else {					interX.namP.text= "";					format.color = 0x289FAC;					(interX.nam as TextField).setTextFormat(format);				}				interX.rank.text=MP.getRank(dStats.nam);				updateDino (dStats.clr,dStats.hat,interX.dino);								//private MSG				mem.pOver=dStats.nam;						}import flash.display.MovieClip;
import flash.events.MouseEvent;
					}							//CHAT				public function submitChat () {						trace (current);						if (current=="MPLobby") {							if (interX.sendPrivateClip.currentFrame!=1) {										var id:String=MP.getPID(interX.sendPrivateClip.to.text);					if (id=="0") { interX.sendPrivateClip.alert.gotoAndPlay (2) } else {							if (interX.say.text!="") {														var mod:Boolean = false;							if (Config.MMOCHA2 && MP.Self.isMod) {																if (interX.say.text.substr(0,5)=="boot;") {									mod = true;									var split:Array = interX.say.text.split(";");									if (split.length == 3) {										MP.C.send ("0e"+id+";"+split[1]+";"+split[2]);									}								} else if (interX.say.text.substr(0,6)=="lobby;") {									mod = true;									var split:Array = interX.say.text.split(";");									if (split.length == 2) {										MP.C.send ("0j"+split[1]);									}									showChat (interX.sendPrivateClip.to.text, split[1], MP.getPVar(id,"clr"),"SendLobby");									mem.privateMSGNam=interX.sendPrivateClip.to.text;								} else if (interX.say.text.substr(0,7)=="player;") {									mod = true;									var split:Array = interX.say.text.split(";");									if (split.length == 2) {										MP.C.send ("0g"+id+split[1]);									}									showChat (interX.sendPrivateClip.to.text, split[1], MP.getPVar(id,"clr"),"SendPlayer");									mem.privateMSGNam=interX.sendPrivateClip.to.text;								}							}							if (!mod)	{										MP.C.send ("00"+id+"PM"+interX.say.text+"!@#$!@#&!@#*LlL"+MP.myInfoToString());								showChat (interX.sendPrivateClip.to.text, interX.say.text, MP.getPVar(id,"clr"),"SendPrivate");								mem.privateMSGNam=interX.sendPrivateClip.to.text;							}							//							interX.sendPrivateClip.bt_CancelMSG.removeEventListener ( MouseEvent.CLICK, cancelMSG );							interX.sendPrivateClip.gotoAndStop (1);							interX.say.text="";							MP.hbc2=0;													}											}									} else if (interX.say.text!="") {										var txt=interX.say.text;					if (txt==mem.chat[0]||txt==mem.chat[1]||chatSent) {} else {												trace ("CH"+txt+"!@#$!@#&!@#*LlL"+MP.myInfoToString());												MP.C.send ("CH"+txt+"!@#$!@#&!@#*LlL"+MP.myInfoToString());						interX.say.text="";						mem.chat.push(txt);						if (mem.chat.length>2) { mem.chat.shift() }						chatSent=true;						MP.hbc2=0;											}									}						}					}				public function showChat (nam,msg,clr,typ) {						nam = showNameByName(nam);						if (current=="MPLobby"&&MP.getStats(nam).blocked==false) {								if (interX.warning.visible) return;								var color:String;				var colorData:Array =  dColors[clr][dColors[clr].text];				//trace (dColors[clr].text,colorData)				color = rgbToHex(colorData).toString(16);							//var hexCodes:Object={A:"D97227",B:"00B0EE",C:"A85534",D:"FF5CE7",E:"0090DD",F:"946C27",G:"B48B52",H:"EE6D00",I:"FF8100",J:"62BC00",K:"D55CE7",L:"008CFF",M:"82643C",N:"CE8E52",O:"E1833D",P:"D97227",Q:"5B7C00",R:"8262A4",S:"006CDF",T:"8C441C",U:"DD9E62",V:"FFFFFF",W:"959595",X:"6A6A6A",Y:"333333",Z:"000000",a:"F02700",b:"977C00",c:"759700",d:"44D475",e:"2273F5",f:"8F8D7E",g:"618112",h:"2D87BC",i:"A85EA5",j:"9778BF",k:"289AB4",l:"4EC152",m:"CD171D",n:"9C9C9C",o:"73481E",p:"A29E42",q:"FFFFFF"};				var chatSTR:String="";				msg=filter(msg);				switch (typ) {										case "Chat": 					chatSTR = "<font color='#"+ color +"'>"+nam+": "+msg+"</font><p>"; 					break;										case "GetPrivate":					chatSTR = "<font color='#DA1D1D'>From "+nam+": "+msg+"</font><p>";					break;										case "SendPrivate":					chatSTR = "<font color='#DA1D1D'>Sent to "+nam+": "+msg+"</font><p>";					break;										case "SendPlayer":					chatSTR = "<font color='#DA1D1D'>Mod message sent to "+nam+": "+msg+"</font><p>";					break;										case "SendLobby":					chatSTR = "<font color='#DA1D1D'>Sent to lobby: "+msg+"</font><p>";					break;								}				interX.chat.htmlText+=chatSTR;				//truncate?				if (interX.chat.numLines>100) { interX.chat.replaceText(0,interX.chat.getLineLength(0),"") }				//trace (interX.chat.scrollV,interX.chat.maxScrollV)				//if (interX.chat.scrollV-interX.chat.maxScrollV==-2) { updateChatDragger() }								updateChatDragger() //uncomment to force down on new chat						}		}				public function filter(arg1) {						var pattern:RegExp =/[^a-z0-9.,!\$\*\(\)\_\=\-\@\#\%\^\&\+\~\`\{\}\|\[\]\;\'\:\"\ \>\?\/]/ig;			if (pattern.test(arg1)) { return "" }						if (arg1.length>100) { return "" }			                        var i:String = "[i;|l]";            var c:String = "[c\[\{\(]";            var o:String = "[o0]";						//``™£¢∞§¶•ªº–≠œ∑´´†¥¨ˆöπ“‘«åß∂ƒ©˙∆˚¬…æΩ≈ç√∫˜÷≤≥÷`⁄€‹›ﬁﬂ‡°·‚—±Œ„´‰ˇÁ¨ˆØ∏”’»ÅÍÎÏ˝ÓÔÒÚÆ¸˛Ç◊ı˜Â¯˘éúíóáëÿüïöäêûîôâöõãñ			arg1 = arg1.replace(new RegExp("&#", "gi"), "");			arg1 = arg1.replace(new RegExp("                    ", "gi"), "");			arg1 = arg1.replace(new RegExp("\<", "gi"), "");            arg1 = arg1.replace(new RegExp("assh"+o+"le", "gi"), ["jurrasichole", "pooper"][rand(0, 1)]);			arg1 = arg1.replace(new RegExp("fag", "gi"), ["frog", "frag"][rand(0, 1)]);			arg1 = arg1.replace(new RegExp("twat", "gi"), ["twig", "twonk"][rand(0, 1)]);			arg1 = arg1.replace(new RegExp("g"+o+"ddamn", "gi"), ["flimflam"][rand(0, 0)]);			arg1 = arg1.replace(new RegExp("g"+o+"d damn", "gi"), ["flim flam"][rand(0, 0)]);			arg1 = arg1.replace(new RegExp("g"+o+"ddamm"+i+"t", "gi"), ["flimflammit"][rand(0, 0)]);			arg1 = arg1.replace(new RegExp("g"+o+"ddamn"+i+"t", "gi"), ["flimflammit"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("m"+o+"therfu"+c+"ker", "gi"), ["mothersaurus", "macrophalangia"][rand(0, 1)]);			arg1 = arg1.replace(new RegExp("fvck", "gi"), ["bonk", "flonk"][rand(0, 1)]);			arg1 = arg1.replace(new RegExp("fuk", "gi"), ["bonk", "flonk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("fu"+c+"knuts", "gi"), ["rockstick", "eggnoodle"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("fu"+c+"ker", "gi"), ["flower", "bonky"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("fu"+c+"k"+i+"ng", "gi"), ["flapping", "flooping"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("fu"+c+"k you", "gi"), ["i love you", "lets cuddle"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("f"+i+"stfu"+c+"k", "gi"), ["foliage", "finger fun"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("buttfu"+c+"k", "gi"), ["bronto abuse", "backflip"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("fu"+c+"k", "gi"), ["fossil", "bonk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("c"+o+c+"k", "gi"), ["rock", "bone"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("b"+i+"t"+c+"h", "gi"), ["ditch", "skronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("b:t"+c+"h", "gi"), ["ditch", "skronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("b1t"+c+"h", "gi"), ["ditch", "skronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("blt"+c+"h", "gi"), ["ditch", "skronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("b!t"+c+"h", "gi"), ["ditch", "skronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"um ", "gi"), ["oil ", "DNA "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"uum ", "gi"), ["oiil ", "DNNA "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" ass ", "gi"), [" tail ", " scale ", " anklyo "][rand(0, 2)]);            arg1 = arg1.replace(new RegExp("t"+i+"t ", "gi"), ["mound ", "pebble "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" t"+i+"ts", "gi"), [" mounds", " pebbles"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("t1t ", "gi"), ["mound ", "pebble "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" t1ts", "gi"), [" mounds", " pebbles"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("t:t ", "gi"), ["mound ", "pebble "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" t:ts", "gi"), [" mounds", " pebbles"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("t"+i+"tt"+i+"es", "gi"), ["titanos", "mounds"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("sh"+i+"t", "gi"), ["dung", "dirt"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("sh1t", "gi"), ["dung", "dirt"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("sh!t", "gi"), ["dung", "dirt"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("src", "gi"), ["srb", "sra"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("pussy", "gi"), ["eggnest", "nest"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("di"+c+"k", "gi"), ["diplo", "dactyl"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("d!"+c+"k", "gi"), ["diplo", "dactyl"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("d:"+c+"k", "gi"), ["diplo", "dactyl"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("d1"+c+"k", "gi"), ["diplo", "dactyl"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(""+c+"unt", "gi"), ["hole", "kronk"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"amel t"+o+"e", "gi"), ["camelotia hoof", "raptor hoof"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"amelt"+o+"e", "gi"), ["camelotia hoof", "raptor hoof"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("eja"+c+"ulate", "gi"), ["erupt", "squirt"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("eja"+c+"ulati"+o+"n", "gi"), ["eruption"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("bl"+o+"w j"+o+"b", "gi"), ["oil change"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("bl"+o+"wj"+o+"b", "gi"), ["oil change"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("wh"+o+"re", "gi"), ["hadrosaurus", "hoop"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" "+c+"l"+i+"t", "gi"), [" claw", " clump"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"l"+i+"t ", "gi"), ["claw ", "clump "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" "+c+"l:t", "gi"), [" claw", " clump"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"l:t ", "gi"), ["claw ", "clump "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(" "+c+"l1t", "gi"), [" claw", " clump"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"l1t ", "gi"), ["claw ", "clump "][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("gl"+o+"ry h"+o+"le", "gi"), ["tar pit", "stonehenge"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("jerk "+o+"ff", "gi"), ["jurassic"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("jerk"+o+"ff", "gi"), ["jurassic"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("jerk-"+o+"ff", "gi"), ["jur-assic"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("c"+i+"r"+c+"le jerk", "gi"), ["stone throw", "fun toss"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("d"+o+"nkey pun"+c+"h", "gi"), ["dino punch"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("d"+i+"rty san"+c+"hez", "gi"), ["dirty saurolophus"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("p"+i+"ss", "gi"), ["pee", "oil"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("p!ss", "gi"), ["pee", "oil"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("p1ss", "gi"), ["pee", "oil"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("p:ss", "gi"), ["pee", "oil"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp(c+"umswap", "gi"), ["eggswap"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("bastard", "gi"), ["bactasaurus", "basket"][rand(0, 1)]);            arg1 = arg1.replace(new RegExp("n"+i+"gger", "gi"), ["nanosaur"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("n:gger", "gi"), ["nanosaur"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("n1gger", "gi"), ["nanosaur"][rand(0, 0)]);            arg1 = arg1.replace(new RegExp("n!gger", "gi"), ["nanosaur"][rand(0, 0)]);						/*if (arg1.indexOf("hatcode")!=-1) {								msgNum++;				arg1=(msgNum<2)?"<font color='#CC3333'>Please donate any amount to get the hat code. It helps us make more games: </font><font color='#FF0000'><a href='http://www.pixeljam.com/donations' target='_blank'>pixeljam.com/donations</a></font>":"";							}*/			            return arg1;			        }				function searchAndReplace(holder:String, searchFor:String, replacement:String) {						var copy:String = holder;			if (copy.indexOf(searchFor)!=-1) {								var tempArray:Array = copy.split(searchFor);				copy = tempArray.join(replacement);				return copy;						} else { return holder }			return null;					}				public function rand(min:int, max:int):int {			return (Math.round(Math.random()*(max-min))+min);		}				public function c_down (ev) {						var typ=(ev.target.name.split ("_"))[0].substring(0,3);			switch (typ) {								case "ins":					if (Config.WEB) {						interX.dr_chat.startDrag (false, new Rectangle(731,119,0,200));					} else {						interX.dr_chat.startDrag (false, new Rectangle(831,119,0,300));					}				break;								case "btu":				drc="cu";				break;								case "btd":				drc="cd";				break;							}							stage.addEventListener(MouseEvent.MOUSE_UP, c_up,false,0,true);			addEventListener (Event.ENTER_FRAME, updateChatY);					}				public function c_up (ev) {						if (current=="MPLobby") {						drc="";			interX.dr_chat.stopDrag ();			stage.removeEventListener(MouseEvent.MOUSE_UP, c_up);			removeEventListener (Event.ENTER_FRAME, updateChatY);						}					}				public function updateChatY (ev) {						var min:int = 119;			var max:int = Config.WEB ? 319 : 419;									if (current=="MPLobby") {							switch (drc) {										case "cu":					interX.dr_chat.y-=4;					if (interX.dr_chat.y<min) { interX.dr_chat.y=min }					break;										case "cd":					interX.dr_chat.y+=4;					if (interX.dr_chat.y>max) { interX.dr_chat.y=max }					break;									}				interX.chat.scrollV=(((interX.dr_chat.y-min)/(max-min))*interX.chat.maxScrollV);				chatScrollY = interX.chat.scrollV;			}					}				public var chatLocked:Boolean = true;		public var chatScrollY:int = 1;				public function act_ScrollLock (ev) {						if (chatLocked) {				interX.scrollLock.gotoAndStop (2);				chatLocked = false;			} else {				interX.scrollLock.gotoAndStop (1);				chatLocked = true;			}					}				public function updateChatDragger() {						var max:int = Config.WEB?319:419;						if (current=="MPLobby") {												if (chatLocked) {					interX.dr_chat.y=max; //319					updateChatY (0);				} else if (interX.chat.maxScrollV != 1 ) {					interX.dr_chat.y=translate(chatScrollY,1,interX.chat.maxScrollV,119,max);					interX.chat.scrollV = chatScrollY;				}							}					}				public function translate (num:Number,min1:Number,max1:Number,min2:Number,max2:Number):Number 		{			return ((num-min1)/(max1-min1)*(max2-min2))+min2;		}																//PLAYERS				public function showName(playerData:Object):String		{			trace (playerData.nam,playerData.persona);			if (playerData.persona != "null") {				return playerData.persona;			}			return playerData.nam;		}				public function showNameByName(str:String):String		{			if (str.substr(0,3)=="zz.") {				for each(var pl:Object in MP.Players) {					if (pl.persona != "null" && pl.nam == str) {						return pl.persona;					}				}			}			return str;		}				//remove prepend		public function removePrepend(str:String):String		{			return (str.substr(0,3)=="zz.")?str.substring(3):str;		}				//add prepend		public function addPrepend(str:String):String		{			return (str.substr(0,3)=="zz.")?str:"zz."+str;		}				public function updatePlayers() {						trace ("update players");						if (current=="MPLobby") {						//delete old			var nc:int=interX.Players.clip.numChildren;			for (var c:uint=0; c<nc; c++) {								var pc:MovieClip = interX.Players.clip.getChildAt (0);				pc.bt.removeEventListener ( MouseEvent.ROLL_OVER, pOver );				pc.bt.removeEventListener ( MouseEvent.ROLL_OUT, pOut );				pc.bt.removeEventListener ( MouseEvent.CLICK, act_SendPrivate );				interX.Players.clip.removeChildAt (0);							}						//make new			MP.rankPlayers();			var l=MP.Players.length;			for (var i:int=0; i<l; i++) {					var PL:Object=MP.Players[i];				var PC:MovieClip = new PlayerClip();				PC.nam.text=showName(PL);				PC.extra.gotoAndStop(1);				if (PL.blocked) {PC.extra.gotoAndStop(2)}				if (PL.friend) {PC.extra.gotoAndStop(3)}				if (isMod(PL.nam))					PC.BG.gotoAndStop (2);								changeColor(PC.BG,PL.clr,PL.prestige);				PC.BG.alpha=.2;								interX.Players.clip.addChild (PC);				PC.y=i*16;								//init buttons				PC.bt.addEventListener ( MouseEvent.ROLL_OVER, pOver,false,0,true ) ;				PC.bt.addEventListener ( MouseEvent.ROLL_OUT, pOut,false,0,true ) ;				PC.bt.addEventListener ( MouseEvent.CLICK, act_SendPrivate,false,0,true ) ;							}						//update my rank			interX.rank.text=MP.getRank(MP.Self.nam);						//waiting for race?			//if (current2=="waitRace") { updateWaitRace() }						//update raceNum			MP.updateRaceNum();						updatePlayersY(0,true);									}					}				public function updatePColor (indx,clr,prestige:int=1) {						if (current=="MPLobby") {								interX.Players.clip.getChildAt(indx).BG.gotoAndStop(prestige)				changeColor (interX.Players.clip.getChildAt(indx).BG,clr,0);				interX.Players.clip.getChildAt(indx).BG.alpha = .2;				//interX.Players.clip.getChildAt(indx).BG.gotoAndStop(clr);						}					}				private function changeColor (clip:MovieClip,colorID:String,prestige:int=1):void		{			if (prestige)				clip.gotoAndStop(prestige);			colorTrans.color = rgbToHex(dColors[colorID].body);			clip.transform.colorTransform = colorTrans;			clip.alpha = .2;			//Shape(clip.getChildAt(0)).transform.colorTransform = colorTrans;		}				private function rgbToHex(array:Array):uint 		{			return array[0] << 16 ^ array[1] << 8 ^ array[2];		}				public function pOver (ev) {						if (current=="MPLobby") {							var PL:MovieClip=(ev.target.parent as MovieClip);				showStats(PL.nam.text.toString(),false);				interX.colorWord.gotoAndStop (2);				interX.hatWord.gotoAndStop (2);				PL.BG.alpha=.5;						}					}				public function pOut (ev) {						if (current=="MPLobby") {							var PL:MovieClip=(ev.target.parent as MovieClip);				showStats(MP.Self.nam,false);				interX.colorWord.gotoAndStop (1);				interX.hatWord.gotoAndStop (hats.length>0?1:2);				PL.BG.alpha=.2;				mem.pOver="";						}					}						public function p_down (ev) {						if (current=="MPLobby") {						var typ=(ev.target.name.split ("_"))[0].substring(0,3);			switch (typ) {								case "ins":					if (Config.WEB) {						interX.dr_players.startDrag (false, new Rectangle(463,119+14,0,150));					} else {						interX.dr_players.startDrag (false, new Rectangle(463,133,0,250));					}				break;								case "btu":				drc="pu";				break;								case "btd":				drc="pd";				break;							}							stage.addEventListener(MouseEvent.MOUSE_UP, p_up,false,0,true);			addEventListener (Event.ENTER_FRAME, updatePlayersY);						}					}				public function p_up (ev) {						if (current=="MPLobby") {						drc="";			interX.dr_players.stopDrag ();			stage.removeEventListener(MouseEvent.MOUSE_UP, p_up);			removeEventListener (Event.ENTER_FRAME, updatePlayersY);						}					}				public function updatePlayersY (ev,fromUpdate:Boolean = false) {						trace ("////");						var min:int = Config.WEB ? 119+14 : 119+14;			var max:int = Config.WEB ? 269+14 : 269+14 + 100; 			var max2:int = Config.WEB ? 189 : 289;						if (current=="MPLobby") {								if (!fromUpdate) {													switch (drc) {												case "pu":						interX.dr_players.y-=2;						if (interX.dr_players.y<min) { interX.dr_players.y=min }						break;												case "pd":						interX.dr_players.y+=2;						if (interX.dr_players.y>max) { interX.dr_players.y=max }						break;											}				}								trace (interX.Players.clip.height,max2);								if (interX.Players.clip.height>max2) {					interX.dr_players.visible = true;					interX.Players.clip.y=Math.round((((interX.dr_players.y-(min))/(max-min))*-1*(interX.Players.clip.height-(max2)))/16)*16;					trace (interX.dr_players.y,max-min,interX.Players.clip.y)				} else {					interX.dr_players.visible = false;				}						}					}				//RACES				public function updateRaces() {						trace ("updateRaces");			if (current=="MPLobby") {							//delete old				var nc:int=interX.Races.clip.numChildren;				for (var c:uint=0; c<nc; c++) { interX.Races.clip.removeChildAt (0) }								//make new				MP.rankRaces();				var l=MP.Races.length;				trace ("race length",l);				var yi:int=0;				for (var i:int=0; i<l; i++) {										var R:Object=MP.Races[i];					if (R.privateID==0) {																		var RC:MovieClip = new RaceClip();						RC.nam.text=R.nam;						//trace (RC.nam.text,R.zone);						RC.lvl.text=R.lvl;						RC.players.text=R.curP.length+"/"+R.maxP;						RC.freeRun.visible = R.free == 1;						RC.zone.text=brain.sys.gData.GD.MP[R.zone].nam;						try { RC.BG.gotoAndStop(R.zone) } catch (e:Error) { trace ("//////////////////////bad zone BG!",R.zone) }						RC.BG.alpha=.25;						//RC.id=R.id;						interX.Races.clip.addChild (RC);						RC.y=yi*16;						yi++;												//trace (RC.nam,RC.lvl,RC.players,RC.zone);												//init buttons						RC.bt.addEventListener ( MouseEvent.ROLL_OVER, rOver,false,0,true ) ;						RC.bt.addEventListener ( MouseEvent.ROLL_OUT, rOut,false,0,true ) ;						RC.bt.addEventListener ( MouseEvent.CLICK, rClick,false,0,true ) ;											}									}						}					}				public function rOver (ev) {						var RC:MovieClip=(ev.target.parent as MovieClip);			RC.BG.alpha=.66;					}				public function rOut (ev) {						var RC:MovieClip=(ev.target.parent as MovieClip);			RC.BG.alpha=.25;					}				public function rClick (ev) {						trace ("click");			var RC:MovieClip=(ev.target.parent as MovieClip);			RC.BG.alpha=0;			RC.bt.enabled=false;			RC.bt.visible=false;			mem.RC=RC;			joinRace (RC.nam.text)					}				public function r_down (ev) {						if (current=="MPLobby") {						var typ=(ev.target.name.split ("_"))[0].substring(0,3);			switch (typ) {								case "ins":					if (Config.WEB) {						interX.dr_races.startDrag (false, new Rectangle(301,240,0,88));					} else {						interX.dr_races.startDrag (false, new Rectangle(301,240,0,88));					}				break;								case "btu":				drc="ru";				break;								case "btd":				drc="rd";				break;							}							stage.addEventListener(MouseEvent.MOUSE_UP, r_up,false,0,true);			addEventListener (Event.ENTER_FRAME, updateRacesY);						}					}				public function r_up (ev) {						if (current=="MPLobby") {						drc="";			interX.dr_races.stopDrag ();			stage.removeEventListener(MouseEvent.MOUSE_UP, r_up);			removeEventListener (Event.ENTER_FRAME, updateRacesY);						}					}				public function updateRacesY (ev) {						if (current=="MPLobby") {						switch (drc) {								case "ru":				interX.dr_races.y-=2;				if (interX.dr_races.y<240) { interX.dr_races.y=240 }				break;								case "rd":				interX.dr_races.y+=2;				if (interX.dr_races.y>328) { interX.dr_races.y=328 }				break;							}			if (interX.Races.clip.height>132) { interX.Races.clip.y=Math.round((((interX.dr_races.y-240)/88)*-1*(interX.Races.clip.height-132))/16)*16 }						}					}						////////////				public function updateDino (clr,hat,dinoClip,fromC:Boolean = false) {						trace (fromC,current);			if (fromC && current=="MPLobby") {				MP.Self.hat = hat;				MP.Self.clr = clr;				updateDino (clr,hat,interX.dino);				return;			}									if (dColors[clr]!=undefined) {																//dino colors				var bodyC:Array=dColors[clr].body;				var stripeC:Array=dColors[clr].stripe;				var dotC:Array=dColors[clr].dot;				var eyeC:Array=dColors[clr].eye;				//				dinoClip.dot.visible=true;				dinoClip.stripe.visible=true;				dinoClip.head.stripe.visible=true;				var ccB=new ColorChange (dinoClip.main); ccB.cChange ([bodyC[0],bodyC[1],bodyC[2],1,1,1,1]);				if (dotC.length>0) { var ccD=new ColorChange (dinoClip.dot); ccD.cChange ([dotC[0],dotC[1],dotC[2],1,1,1,1]) } else { dinoClip.dot.visible=false }				if (stripeC.length>0) { var ccS=new ColorChange (dinoClip.stripe); ccS.cChange ([stripeC[0],stripeC[1],stripeC[2],1,1,1,1]) } else { dinoClip.stripe.visible=false }				var ccH=new ColorChange (dinoClip.head.main); ccH.cChange ([bodyC[0],bodyC[1],bodyC[2],1,1,1,1]);				if (stripeC.length>0) { var ccHS=new ColorChange (dinoClip.head.stripe); ccHS.cChange ([stripeC[0],stripeC[1],stripeC[2],1,1,1,1]) } else { dinoClip.head.stripe.visible=false }				var ccHE=new ColorChange (dinoClip.head.eye); ccHE.cChange ([eyeC[0],eyeC[1],eyeC[2],1,1,1,1]);				var ccE=new ColorChange (dinoClip.eye); ccE.cChange ([eyeC[0],eyeC[1],eyeC[2],1,1,1,1]);							}			updater.hat=hat;			if (interX.updater!=null) { interX.updater.hat=hat }					}				public function act_colorR(ev:MouseEvent) {						//var dca:Array=this["dinoColors"+(brain.S.hats?10:MP.Self.lvl)];			var dca:Array=dinoColors;			var i=dca.indexOf (MP.Self.clr);			i += (ev.shiftKey ? 10 : 1);			if (i>=dca.length) { i=0 }			MP.Self.clr=dca[i];			updateDino(dca[i],MP.Self.hat,interX.dino);			updatePColor (MP.getPVar(MP.Self.id,"indx"),MP.Self.clr,MP.Self.prestige);			}				public function act_colorL (ev:MouseEvent) {						//var dca:Array=this["dinoColors"+(brain.S.hats?10:MP.Self.lvl)];			var dca:Array=dinoColors;			var i=dca.indexOf (MP.Self.clr);			i -= (ev.shiftKey ? 10 : 1);			if (i<0) { i=dca.length-1 }			MP.Self.clr=dca[i];			updateDino(dca[i],MP.Self.hat,interX.dino);			updatePColor (MP.getPVar(MP.Self.id,"indx"),MP.Self.clr,MP.Self.prestige);					}				private var mph:int = 0;		public function checkHatMenuMP():void		{						if (interX.hatMenu && interX.hatMenu.visible == false && indieC == 0 && mph == 0) {				interX.hatMenu.visible = true;				indieC = 120;			}			mph = 250;						//if ((interX.hatMenu.indie as SimpleButton).hasEventListener(MouseEvent.CLICK))				//return;			//(interX.hatMenu.indie as SimpleButton).addEventListener(MouseEvent.CLICK,indieClickMP,false,0,true);			//(interX.hatMenu.classic as SimpleButton).addEventListener(MouseEvent.CLICK,classicClickMP,false,0,true);		}				public function indieClickMP(e:Event):void		{			indieC = 120;			var indx:int=hats.indexOf("ic_02_");			MP.Self.hat=hats[indx];			interX.updater.hat=MP.Self.hat;		}				public function classicClickMP(e:Event):void		{			indieC = 120;			var indx:int=hats.indexOf("A");			MP.Self.hat=hats[indx];			interX.updater.hat=MP.Self.hat;		}				public function removeHatMenuMP():void		{				if (interX.hatMenu) interX.hatMenu.visible = false;		}				public function act_hatR(ev:MouseEvent) {			checkHatMenuMP();			var indx:int=hats.indexOf(MP.Self.hat);						indx += (ev.shiftKey ? 10 : 1);			if (indx>=hats.length) { indx=0 }			MP.Self.hat=hats[indx];			interX.updater.hat=MP.Self.hat;						trace (MP.Self.hat);						if (hatMatcher[MP.Self.hat] != undefined) {				interX.bt_Match.visible = true;			} else {				interX.bt_Match.visible = false;			}			}				public function act_hatL (ev:MouseEvent) {			checkHatMenuMP();			var indx:int=hats.indexOf(MP.Self.hat);			indx -= (ev.shiftKey ? 10 : 1);			if (indx<0) { indx=hats.length-1 }			MP.Self.hat=hats[indx];			interX.updater.hat=MP.Self.hat;						if (hatMatcher[MP.Self.hat] != undefined) {				graphic.bt_Match.visible = true;			} else {				graphic.bt_Match.visible = false;			}					}				public function joinRace (nam) {						if (current=="MPLobby") {								//authorize				trace ("i want to join "+nam);				newRace={act:false}				var creatorID=MP.getRVar(nam,"creator");				MP.C.send ("00"+creatorID+"AR"+nam+"_"+MP.myInfoToString());									}					}				public function authRace (nam) {						trace ("i can join this race");			var race:Object=MP.getRVar (nam,"obj");			newRace=race;			newRace.curP.push(MP.Self.id);			//send message that we joined a race			if (race.nam=="dinotest") { brain.S.testRun=true };			MP.C.send ("RJ"+race.nam+"_"+MP.myInfoToString());			//go_to waitRace			updateRaces();			showLobbyX ("WaitRace");								}				public function notAuth () {						trace ("sorry");			mem.RC.BG.alpha=.25;			mem.RC.bt.enabled=true;			mem.RC.bt.visible=true;			delete mem.RC;							}				public function updateRaceNumP(nam,num,maxP,myRace:Boolean = false) {						trace ("update race num",nam,num,myRace)						if (current=="MPLobby") {							var nc:int=interX.Races.clip.numChildren;				for (var c:uint=0; c<nc; c++) { if (interX.Races.clip.getChildAt(c).nam.text==nam) { interX.Races.clip.getChildAt(c).players.text=num+"/"+maxP; break } }				if ((num==0||num==maxP) && !myRace) {										traceRaces();					trace ("/////// REMOVE RACE", MP.Races.indexOf(MP.getRVar(nam,"obj")));					MP.Races.splice(MP.Races.indexOf(MP.getRVar(nam,"obj"),1));					traceRaces();					updateRaces();											}						}										}										//////// JOIN PRIVATE RACE						public function act_JoinPrivate (ev) {						showLobbyX("JoinPrivate");					}				public function initJoinPrivate () {						initButtonsXX (interBTS["JoinPrivate"]);						//buttons			disableBT("CreateNewRace");			disableBT("JoinPrivate");								}				public function act_JoinPrivate2 (ev) {						var nam:String=interX.lobbyX.raceName.text;			var exists:Boolean=false;			for each (var race:Object in MP.Races) { if (race.nam==nam) { exists=true; break } }			if (exists) { joinRace(nam) } else { interX.lobbyX.alert.gotoAndPlay ("a1"); }					}											////// BLOCK PLAYER				public function isMod (nam:String) : Boolean {						if (Config.MMOCHA2) {				return MP.isMod(nam);			}						return (stats.moders.indexOf(nam)>-1)					}				public function toggleBlock (PL:MovieClip) {						var nam:String=PL.nam.text;			var pStats:Object=MP.getStats(nam);			if (isMod(MP.Self.nam.toLowerCase())) MP.getIP(pStats.id,pStats.nam);						if (isMod(pStats.nam)) {				return;			}									if (!pStats.friend) {								if (!pStats.blocked) {										pStats.blocked=true;					PL.extra.gotoAndStop (2);					if (!pStats.guest) {												stats.blocked.push (nam.toLowerCase());						stats.savedGames.data.blocked=stats.blocked.slice();						stats.flushSave();											}									} else {										pStats.blocked=false;					PL.extra.gotoAndStop (1);					stats.blocked.splice (stats.blocked.indexOf(nam.toLowerCase()),1);					stats.savedGames.data.blocked=stats.blocked.slice();					stats.flushSave();									}							}					}						public function toggleFriend (PL:MovieClip) {						var nam:String=PL.nam.text;			var pStats:Object=MP.getStats(nam);						if (!pStats.blocked&&!pStats.guest) {								if (!pStats.friend) {										pStats.friend=true;					PL.extra.gotoAndStop (3);					stats.friends.push (nam.toLowerCase())					stats.savedGames.data.friends=stats.friends.slice();					stats.flushSave();									} else {										pStats.friend=false;					PL.extra.gotoAndStop (1);					stats.friends.splice (stats.friends.indexOf(nam.toLowerCase()),1);					stats.savedGames.data.friends=stats.friends.slice();					stats.flushSave();									}							}					}				public function preInitAlert():void		{			funcEXE = initAlert;		}						////// SEND PRIVATE MESSAGE				private function changePrestigeBG(clip:MovieClip,clr:String):void		{			var nextFrame:int = clip.currentFrame+1;			if (!MP.Self.isMod && nextFrame == 2) {				nextFrame = 3;			}			if (nextFrame > clip.totalFrames) {				nextFrame = 1;			}			clip.gotoAndStop(nextFrame);			MP.Self.prestige = nextFrame;			changeColor(clip,clr,0);			clip.alpha = .5;		}				public function act_SendPrivate (ev) {						if (current=="MPLobby") {								if (ev.shiftKey) {										var PL:MovieClip=(ev.target.parent as MovieClip);										//prestige bg change					if (Config.UPDATE_ID >=1) {						var nam:String=PL.nam.text;						var pStats:Object=MP.getStats(nam);						if (pStats.nam == MP.Self.nam && MP.hasPrestige(MP.Self.nam)) {							changePrestigeBG(PL.BG,MP.Self.clr);						} else {							toggleFriend(PL);						}					} 				} else if (ev.ctrlKey) {										var PL2:MovieClip=(ev.target.parent as MovieClip);					toggleBlock(PL2);				} else { 					interX.sendPrivateClip.gotoAndStop (2);					funcEXE = initSendPrivate;				}						}					}				public function initSendPrivate () {						if (current=="MPLobby") {						interX.sendPrivateClip.bt_CancelMSG.addEventListener ( MouseEvent.CLICK, cancelMSG,false,0,true );			interX.sendPrivateClip.to.text=showNameByName((mem.pOver!="")?mem.pOver:removePrepend(mem.privateMSGNam));						}					}				public function cancelMSG (ev) {						if (current=="MPLobby") {						interX.sendPrivateClip.bt_CancelMSG.removeEventListener ( MouseEvent.CLICK, cancelMSG );			interX.sendPrivateClip.gotoAndStop (1);						}					}				////////// CREATE A NEW RACE				public function act_CreateNewRace (ev) {						showLobbyX ("CreateNewRace");								}				public function act_Match (ev) {						matchHatX(ev);								}								public function initCreateNewRace () {						interX.lobbyX.raceName.restrict = "0-9A-Za-z.!$*()=-";			interX.lobbyX.seed.restrict = "0-9";			disableBT("CreateNewRace");			disableBT("JoinPrivate");			newRace={ act:false, zone:this["MPZones"+MP.Self.lvl][0], lvl:MP.Self.lvl, maxP:6, privateID:0, free:0 };			interX.lobbyX.c_zone.gotoAndStop (newRace.zone);			interX.lobbyX.lvl.text=MP.Self.lvl;			var vizLevel:int = Math.max (1,MP.Self.lvl - MPManager.levelBuffer);			if (vizLevel>1) { interX.lobbyX.lvlAlert.text="Players below level "+vizLevel+" will not see this race." }						//init buttons			initButtonsXX (interBTS["CreateNewRace"]);						if (Brain.useSeed) {				interX.lobbyX.seed.text = Brain.useSeed;			}					}						public function act_FreeRun (ev) {			newRace.free = newRace.free == 1 ? 0 : 1;			interX.lobbyX.freeRun.gotoAndStop (newRace.free+1);		}				public function act_ToggleLvl (ev) {						var lvl=interX.lobbyX.lvl.text;			var lvlMax=MP.Self.lvl;			lvl--;			if (lvl<1) {lvl=lvlMax}			newRace.lvl=lvl;			interX.lobbyX.lvl.text=lvl;			var vizLevel:int = Math.max (1,lvl - MPManager.levelBuffer);			if (vizLevel>1) { interX.lobbyX.lvlAlert.text="Players below level "+vizLevel+" will not see this race." } else { interX.lobbyX.lvlAlert.text="" }						//adjust playable zones?			if (this["MPZones"+lvl].indexOf(newRace.zone)==-1) { newRace.zone=this["MPZones"+lvl][(this["MPZones"+lvl].length)-1]; interX.lobbyX.c_zone.gotoAndStop (newRace.zone) }					}							public function act_CreateRace (ev) {						var raceName:String=interX.lobbyX.raceName.text;			var seed:int = int(interX.lobbyX.seed.text);			if (seed >= 100000) {				Brain.useSeed = seed;			} else {				Brain.useSeed = 0;			}			if (raceName=="dinotest") { brain.S.testRun=true };						if (allowNewRace(raceName)) {								var extraInfo:String=MP.myInfoToString();				MP.Races.push ({act:true, nam:raceName, id:MP.Self.id, lvl:newRace.lvl, free:newRace.free, curP:[MP.Self.id], maxP:newRace.maxP, zone:newRace.zone, privateID:newRace.privateID});				traceRaces();				newRace = MP.Races[MP.Races.length-1];				MP.C.send ("NR"+"1,"+newRace.nam+","+MP.Self.id+","+newRace.lvl+","+newRace.maxP+","+newRace.zone+","+newRace.free+","+newRace.privateID+"_"+extraInfo);				updateRaces();								//go to waiting area				removeButtonsXX (interBTS["CreateNewRace"]);				showLobbyX ("WaitRace");										}					}				public function traceRaces():void {			for (var i:int = 0; i< MP.Races.length; i++) {				trace (i,MP.Races[i].nam);			}		}				private function allowNewRace(nam) {						if (nam=="") { 							interX.lobbyX.alert.gotoAndPlay ("blankName"); 				return false ;							} else {								for each (var race in MP.Races) { if (race.nam==nam) { interX.lobbyX.alert.gotoAndPlay ("nameUsed"); return false } }							}			return true;														}				public function act_CancelRace (ev) {						if (current=="MPLobby") {				if (newRace.nam!=undefined) {										//get out of race array					newRace.curP.splice(newRace.curP.indexOf(MP.Self.id),1);					updateRaceNumP(newRace.nam,newRace.curP.length,newRace.maxP,newRace.id==MP.Self.id);										//send cancel message + update race list					var sc:int=0;					if (newRace.id==MP.Self.id) { 												sc=1;						traceRaces();						if (MP.Races.indexOf(newRace) != -1)							MP.Races.splice(MP.Races.indexOf(newRace),1);						updateRaces();											}					MP.C.send ("CR"+newRace.nam+";"+sc);										if (interX.MyRace.visible==true) { interX.MyRace.visible=false; interX.lobbyX.visible=true; }									}								//get out				bootFromWait();						}					}				public function bootFromWait () {						if (current=="MPLobby") {							removeButtonsXX (interBTS[interX.lobbyX.currentLabel]);								//enable buttons				enableBT("CreateNewRace");				enableBT("JoinPrivate");								//init				current2="";				newRace={ act:false }								//go				showLobbyX (1);						}					}							public function act_zoneR (ev) {						var zoneA:Array=this["MPZones"+newRace.lvl];			var i=this["MPZones"+newRace.lvl].indexOf (newRace.zone);			i++;			if (i>=zoneA.length) { i=0 }						//skip DX levels if not in DX mode			if (!MP.DX && brain.sys.gData.GD.MP[zoneA[i]].SE)				i++;						if (i>=zoneA.length) { i=0 }			newRace.zone=zoneA[i];			interX.lobbyX.c_zone.gotoAndStop (newRace.zone);		}				public function act_zoneL (ev) {						trace (this["MPZones"+newRace.lvl],MP.DX);			var zoneA:Array=this["MPZones"+newRace.lvl];			var i=this["MPZones"+newRace.lvl].indexOf (newRace.zone);			i--;						if (i<0) { i=zoneA.length-1 }						//skip DX levels if not in DX mode			if (!MP.DX && brain.sys.gData.GD.MP[zoneA[i]].SE)				i--;						if (i<0) { i=zoneA.length-1 }			newRace.zone=zoneA[i];			interX.lobbyX.c_zone.gotoAndStop (newRace.zone);		}				public function act_players5 (ev) {						newRace.maxP=5;			interX.lobbyX.c_playersNum.gotoAndStop (5);					}				public function act_players6 (ev) {						newRace.maxP=6;			interX.lobbyX.c_playersNum.gotoAndStop (6);					}				public function act_players4 (ev) {						newRace.maxP=4;			interX.lobbyX.c_playersNum.gotoAndStop (4);					}				public function act_players3 (ev) {						newRace.maxP=3;			interX.lobbyX.c_playersNum.gotoAndStop (3);					}				public function act_players2 (ev) {						newRace.maxP=2;			interX.lobbyX.c_playersNum.gotoAndStop (2);					}				public function act_TogglePrivate (ev) {						newRace.privateID=(newRace.privateID==0)?1:0;			interX.lobbyX.c_private.gotoAndStop (newRace.privateID+1);					}						///////// WAIT FOR RACE TO START				public function initWaitRace () {						interX.lobbyX.bt_AllRaces.visible=true;			initButtonsXX (interBTS["WaitRace"]);			current2="waitRace";						//buttons			disableBT("CreateNewRace");			disableBT("JoinPrivate");						//populate names			interX.lobbyX.raceName.text=newRace.nam;			interX.lobbyX.lvl.text=newRace.lvl;			interX.lobbyX.zoneName.text=brain.sys.gData.GD.MP[newRace.zone].nam;			trace (newRace.free);			interX.lobbyX.freeRun.gotoAndStop (newRace.free+1);						//update			updateWaitRace();					}				public function act_AllRaces (ev) {						interX.lobbyX.visible=false;			interX.MyRace.visible=true;					}				public function showMyRace (ev) {						interX.lobbyX.visible=true;			interX.MyRace.visible=false;					}				public function updateWaitRace () {						if (current=="MPLobby") {							var pLeft:int=newRace.maxP-newRace.curP.length;				interX.lobbyX.playersLeft.text=pLeft;								//show current players				var curPStr:String="";				var l=newRace.curP.length;				for (var i:int=0; i<l; i++) { curPStr+=removePrepend(MP.getPVar(newRace.curP[i],"nam"))+"\n" }				interX.lobbyX.curP.text=curPStr;								//give creator option to start early				if (newRace.act&&newRace.curP.length>=2) {										interX.lobbyX.startRaceText.visible=true;					interX.lobbyX.bt_StartRace.enabled=true;					interX.lobbyX.bt_StartRace.visible=true;									} else {										interX.lobbyX.startRaceText.visible=false;					interX.lobbyX.bt_StartRace.enabled=false;					interX.lobbyX.bt_StartRace.visible=false;									}								//start if race is full				if (pLeft==0&&newRace.act) { act_StartRace (0) }						}				}				public function act_StartRace (ev) {						if (current=="MPLobby") {							current="RaceLimbo";				current2="";				MP.current="raceLimbo";								//make players array only current players				if (!newRace.act) { newRace.curP=mem.curPSTR.split(",") }				trace ("actual curP ",newRace.curP);				newRace.maxP=newRace.curP.length;				for (var i:int=0; i<MP.Players.length; i++) { if (newRace.curP.indexOf(MP.Players[i].id)==-1) { MP.Players.splice (i,1); i-- } else { MP.Players[i].fTime=0; MP.Players[i].fin=false } }				//missed players				/*for each (var pid:String in newRace.curP) {										var found:Boolean=false;					for each (var PP in MP.Players) { if (PP.id==pid) { found=true; break } }					if (!found) { trace ("/////////////// LAST MINUTE NEW RACE PLAYER"); MP.Players*/										 				Brain.freeRun = newRace.free == 1;								for each (var P in MP.Players) { trace (P.nam,P.clr,P.hat) }				if (newRace.act) {						newRace.ldc=newRace.rcc=newRace.npc=newRace.curP.length-1;					MP.sendToRoom ("NP"+newRace.curP.toString());									}				MP.saveStats();				go_toRaceLimbo();									}					}				public function initReturnLobby () {						MP.returnToLobby();					}				public function errorReturnLobby (ev) {						interX.limboError.bt_return.removeEventListener (MouseEvent.CLICK, errorReturnLobby);			MP.returnToLobby();			MP.checkLobby();					}								public function go_toRaceLimbo () {						removeLobbyListeners();			//if ( interX.lobbyX.currentLabel=="WaitRace") { trace ("//////////////I was at wait race"); removeButtonsXX (interBTS[interX.lobbyX.currentLabel]) } else {  trace ("//////////////I was NOTNOTNOT at wait race") }			MP.stopHB();			go_to("RaceLimbo");								}				//////////// RACE LIMBO				public function initRaceLimbo () {						//interX.zone.text=newRace.zone+""+newRace.lvl;			brain.S.mod="MP";			interX.limboError.bt_return.addEventListener (MouseEvent.CLICK, errorReturnLobby,false,0,true)					}				/*public function initReturn () {						interX.limboError.bt_return.addEventListener (MouseEvent.CLICK, errorReturnLobby,false,0,true)					}*/		public function removeLobbyListeners () {						MP.stopHB();						interX.MyRace.bt_MyRace.removeEventListener ( MouseEvent.MOUSE_DOWN, showMyRace );			interX.MyRace.bt_CancelCur.removeEventListener ( MouseEvent.MOUSE_DOWN, act_CancelRace );			interX.dr_players.removeEventListener ( MouseEvent.MOUSE_DOWN, p_down );			interX.btu_players.removeEventListener ( MouseEvent.MOUSE_DOWN, p_down );			interX.btd_players.removeEventListener ( MouseEvent.MOUSE_DOWN, p_down );			//			interX.dr_races.removeEventListener ( MouseEvent.MOUSE_DOWN, r_down );			interX.btu_races.removeEventListener ( MouseEvent.MOUSE_DOWN, r_down );			interX.btd_races.removeEventListener ( MouseEvent.MOUSE_DOWN, r_down );			//			interX.dr_chat.removeEventListener ( MouseEvent.MOUSE_DOWN, c_down );			interX.btu_chat.removeEventListener ( MouseEvent.MOUSE_DOWN, c_down );			interX.btd_chat.removeEventListener ( MouseEvent.MOUSE_DOWN, c_down );						//races			var nc:int=interX.Races.clip.numChildren;			for (var c:uint=0; c<nc; c++) { 							var RC:MovieClip = interX.Races.clip.getChildAt (0);				RC.bt.removeEventListener ( MouseEvent.ROLL_OVER, rOver );				RC.bt.removeEventListener ( MouseEvent.ROLL_OUT, rOut );				RC.bt.removeEventListener ( MouseEvent.CLICK, rClick );				interX.Races.clip.removeChildAt (0);							}						//delete old			var nc2:int=interX.Players.clip.numChildren;			for (var c2:uint=0; c2<nc2; c2++) {								var pc:MovieClip = interX.Players.clip.getChildAt (0);				pc.bt.removeEventListener ( MouseEvent.ROLL_OVER, pOver );				pc.bt.removeEventListener ( MouseEvent.ROLL_OUT, pOut );				pc.bt.removeEventListener ( MouseEvent.CLICK, act_SendPrivate );				interX.Players.clip.removeChildAt (0);							}						//chat			drc="";			if (this.hasEventListener(Event.ENTER_FRAME)) {								stage.removeEventListener(MouseEvent.MOUSE_UP, c_up);				removeEventListener (Event.ENTER_FRAME, updateChatY);							}						//misc			if (interX.sendPrivateClip.currentFrame!=1) { interX.sendPrivateClip.bt_CancelMSG.removeEventListener ( MouseEvent.CLICK, cancelMSG ) }					}				public function refreshLobby() {						interX.dr_players.y=119+14;			updatePlayersY(0);						interX.MPHowTo.gotoAndStop(1);  			if (interX.lobbyX.currentFrame!=1) { 								removeButtonsXX (interBTS[interX.lobbyX.currentLabel]); 				showLobbyX(1);				enableBT("CreateNewRace");				enableBT("JoinPrivate");							}			if (interX.sendPrivateClip.currentFrame!=1) { 								interX.sendPrivateClip.bt_CancelMSG.removeEventListener ( MouseEvent.CLICK, cancelMSG );				interX.sendPrivateClip.gotoAndStop (1);								}			updatePlayers();			updateRaces();					}							public function act_SignOut (ev) {						//remove mp hats			//var lvlHats:Array=["dc","ac","vb","ub","oo","pp","qq","rr","ss"];			for (var ii:int=0; ii<=lvlHats.length; ii++) { 				if (hats.indexOf(lvlHats[ii]) > -1) { 					hats.splice (hats.indexOf(lvlHats[ii]), 1);				} 			}						MP.C.close();			MP.unconfig(MP.C);			MP.cOpen=false;			removeLobbyListeners();			act_GoHome(0);			//MP.checkNumPlayers();			initBoot();											}			}	}