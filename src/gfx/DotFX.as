package gfx {		import flash.geom.*;	import flash.display.Bitmap;	import flash.display.BitmapData;		public class DotFX extends Bitmap {		public var pos:Point;   	// position		public var vel:Point;   	// position		public var o:Object;   	    // data object		public var brain:Object; 	// ref to brain		private var c:uint;			// counter		private var aI:Number;		// alpha increment		public var NN:Boolean=false;//near near var?		private var colors:Object;		private var rect:Rectangle;		private var ind:int;		private var inc:int=0;				//////////////////////////////////////////////////		//////////////////////////////////////////////////				public function DotFX (obj,br):void {						//init vars			o = obj;			c = o.c;			aI = o.alph/c;			ind=rand(0,3);						//colors			colors={Y:[0xFFFF99,0xFFFFFF,0xFFCC33,0xFFFFFF],					P:[0xFF99FF,0xFFFFFF,0x99CCFF,0xFFFFFF],					R:[0xFF9999,0xFFFFFF,0xFFBB77,0xFFFFFF]}						//brain ref			brain = br;						//position + velocity			vel = new Point (o.vx,o.vy);			pos = new Point (o.px,o.py);			x=pos.x;			y=pos.y;						//appearance			this.bitmapData = new BitmapData(3, 3, false, colors[o.colr][rand(0,3)]);			rect= new Rectangle (0,0,3,3);					}				// delete this object reference in the brain lib   	    public function deleteAll():void {						o.ex=false;			brain.deleteObj(this);			//brain.deleteClip(this);					}				public function nulls() {						for (var oo in o) { delete o[oo] }			o=null;			vel=null			pos=null;			this.bitmapData=null;			rect=null;			colors=null;			brain=null;					}				//final actions		public function finalActions():void {					}						//functions common to all DotFX		//external systems		public function main () {						//move dot			vel.x*=o.velA;			vel.y*=o.velA;			pos.offset (vel.x,vel.y);			x=pos.x;			y=pos.y;									//color			inc++			if (inc>=2) {								inc=0;				ind++;				if (ind>3) {ind=0}				this.bitmapData.fillRect(rect, colors[o.colr][ind]);							}						//alpha			alpha=aI*c;						//remove?			if (c--<1) { deleteAll() }		}				////////////////////////////////////////////////////////////				// give a rounded random number		public function rand(min:int, max:int):int {						return (Math.round(Math.random()*(max-min))+min);					}		// give an unrounded random number		public function rand2(min:Number, max:Number):Number {						return (Math.random()*(max-min))+min;					}			}	}