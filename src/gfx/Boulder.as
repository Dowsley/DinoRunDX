package gfx {		import flash.display.MovieClip;	import flash.geom.Point;		import fx.ColorChange;		import supers.MovingClip;		public class Boulder extends MovingClip {				private var colorV:uint;		private var ang:int=0;		private var rollI:int;		private var rollC:int=-1;		private var vel2:Point;		private var dx:Number;		private var dc:Number=0;		private var masses:Array=[0,10,20,30,50,70];		private var colors:Array=[[],[102,102,102],[123,123,123],[150,139,139],     [208,	71,	215],[255,	105,	51],[255,	107,	93],[149,	206,	248],[255,	244,	153],[239,	255,	68],[176,	229,	85],[179,	97,	255],[243,	95,	255],[128,	255,	71],[255,	166,	221]];		private var cc:int=0;		public var bal:Boolean;		public var dinoR:Object;		private var graphicID:String = "b";				override public function nulls() {						super.nulls();			vel2=null;			masses=null;			colors=null;			dinoR=null;					}				public function collected():void		{			deleteAll();		}				public function Boulder (o,brain):void {						//appearance						assignGFX(new _Boulder);			graphic.gotoAndStop ("b"+o.lvl+"_0");			if (brain.S.pk && o.pumpkin) {				graphicID = "p";				graphic.gotoAndStop (graphicID+o.lvl+"_0");			}						//init			init (o,brain,this);						if (brain.S.pk && o.pumpkin) {				ph.r = o.lvl == 1 ? 10 : 20;			}						NN=true;			bal=brain.S.balloons;						//extra physics properties			ph.sh = "circ";						//shape			ph.f = .99;							//friction			ph.bn = .75;						//bounce			ph.g = bal?.1:.25;					//gravity			ph.m = bal?.00001:masses[o.lvl]		//mass						vel2 = new Point (0,0);						//ride?			if (o.lvl==5) { ph.r-=3; ride=true }						//drop?			if (o.drop) {							ph.g=0;				inter=false ;				dx=rand(-300,-75);							}						//color variation			if (brain.S.pk && o.pumpkin) {				//graphicID = "p";				//graphic.gotoAndStop (graphicID+o.lvl+"_0");			} else {				var cc = new ColorChange (this);				colorV=(o.colorV==undefined)?rand(1,3):o.colorV;				if (bal) { colorV=rand(4,14); ride = false }				var r:int=colors[colorV][0];				var g:int=colors[colorV][1];				var b:int=colors[colorV][2];				if (!bal) {					switch (brain.S.colorV) {												case "B":						r-=15; g-=30; b-=15;						break;												case "C":						r-=15; g-=30; b-=30;						break;												case "V":						r-=100; g-=100; b-=100;						if (r<10) { r=g=b=30 }						break;											}				}				cc.cChange ([r,g,b,0,0,0,1]);				cc.nulls();			}						//broadcast creation?			if (brain.S.mod=="MP"&&o.remote==undefined) { brain.sys.MP.sendToRoom ("OC"+"px:"+rnd(o.px)+";py:"+rnd(o.py)+";vx:"+rnd2(vel.x)+";vy:"+rnd2(vel.y)+";lvl:"+o.lvl+";rdt:"+(o.rData?roomID:0)+";nam:Boulder") }					}				public function rnd2(num) {						return (rnd(num*100))/100;					}				public function main ():void {						//run functions common to all MovingClips			mainMC ();						if (bal) { vel.x*=.985; vel.y*=.985 }						if (o.cr) {								cc++;				if (cc>30) { o.cr=false }							}						//drop?			if (o.drop) { if (brain.dino.x-x>dx) {									ph.g=.25;				dc=1;				o.drop=false;							} }						if (dc>0) { dc++; if (dc>15) { inter=true } }						//roll that boulder			var vv=getVV(vel);			rollI = (vv<1)?(1-vv)*200:(7-vv)/1;			if (vv<.1) { rollI=100000000 }			rollC++;			if (rollC>rollI) {								rollC=-1;				ang=(vel.x>0)?ang+45:ang-45;				if (ang<0) { ang=315 }				if (ang>315) { ang=0 }				//graphic.gotoAndStop ("b"+o.lvl+"_"+ang);				graphic.gotoAndStop (graphicID+o.lvl+"_"+ang);							}						//hit Ground			if (near) { if (!oNear) {								hitAudio (vv);				if (o.lvl==5&&!bal) { if (roomID==brain.dino.roomID) { brain.world.shakeC=vv*4 } }							} }			oNear=near;					}				// REACTIONS				// bounced		public function bounce (v) {						vel2.x=vel.x;			vel2.y=vel.y;			vel.x=v.x*(bal?1.5:1);			vel.y=v.y*(bal?1.5:1);					}				public function remove (obj) {						deleteAll();					}					public function hitBoulder (obj) {						//create rocks?			var vv:Number = getVV(vel2);			if (vv>5) { if (!bal) {								var l=rand(1,4);				for (var i:uint=1; i<=l; i++) { brain.create ({nam:"Rock", px:ip.x, py:ip.y, vx:rand(-4,4), vy:rand(-4,4), colorV:colorV, depth:["world","main"]}) }							} }						//audio			hitAudio(vv);					}				public function hitAudio (vv) {						if (roomID==brain.dino.roomID&&!bal) {				var vol=vv*.1;				if (vol>.7) { vol=.7 }				if (o.lvl<1) { o.lvl=1 }				if (!brain.dino.end) { brain.sys.audio.ply ("b"+o.lvl+""+rand(1,2),vol,false) }							}					}				public function dinoHit (dino) {						hitAudio (getVV(dino.vel));		}								public function shake (lvl) {						if (near) {								if (lvl>2) { lvl=2 }				vel.offset (rand(-1*lvl,lvl),rand(0,-1*lvl))							}					}				public function crush (obj) {						var allow:Boolean=false;			if (obj.o.nam=="Meteorite") { if (obj.o.lvl>=o.lvl) { allow=true } } else { allow=true }			if (o.cr) { allow=false }						var bt:int=o.lvl;			if (bt<1) { bt=1 }			brain.sys.audio.ply ("b"+bt+""+rand(1,2),.75,false);						if (allow) {								var rockMin:uint=0;				var rockMax:uint=0;				var bldMin:uint=0;				var bldMax:uint=0;								switch (Number(o.lvl)) {										case 1:					rockMin=3; rockMax=5;					break;										case 2:					rockMin=5; rockMax=7;					break;										case 3:					rockMin=4; rockMax=6; bldMin=1; bldMax=1;					break;										case 4:					rockMin=3; rockMax=4; bldMin=2; bldMax=3;					break;										case 5:					if (dinoR!=null) { dinoR.endRide() }					rockMin=4; rockMax=7; bldMin=4; bldMax=6;					break;									}								//var bang:Number=Math.atan2(y-obj.y,x-obj.x);				var cMin=ph.r*-1;				var cMax=ph.r;								//rocks				if (!bal) {										var r=rand(rockMin,rockMax);					for (var i:uint=1; i<=r; i++) { brain.create ({nam:"Rock", px:x+rand(cMin,cMax), py:y+rand(cMin,cMax), vx:vel.x+rand(-8,8), vy:vel.y+rand(-12,8), colorV:colorV, depth:["world","main"]}) }								}				//boulders				var b=rand(bldMin,bldMax);				var tl:int=o.lvl-1;				for (var ii:uint=1; ii<=b; ii++) {										tl--;					if (tl<1) { tl=1 }					brain.create ({nam:"Boulder", px:x+rand(cMin,cMax), py:y+rand(cMin,cMax), vx:vel.x+rand(-8,8), vy:vel.y+rand(-12,8), colorV:colorV, lvl:tl, rd:true, cr:true, depth:["world","main"]}) 									}								deleteAll();							}					}		}	}